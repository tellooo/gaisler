This is posix1003_1.info, produced by makeinfo version 4.13 from
posix1003_1.texi.

INFO-DIR-SECTION RTEMS On-Line Manual
START-INFO-DIR-ENTRY
* RTEMS POSIX 1003.1 Compliance Guide: (posix1003_1).
END-INFO-DIR-ENTRY


File: posix1003_1.info,  Node: Preface,  Next: General,  Prev: Top,  Up: Top

Preface
*******

This document lists the functions, constant, macros, feature flags, and
types defined in the POSIX 1003.1 standard.  Each section in this
document corresponds to a section in the 1003.1 standard and the
implementation status of the items required by the standard are listed.

RTEMS supports a number of POSIX process, user, and group oriented
routines in what is referred to as a "SUSP" (Single-User, Single
Process) manner.  RTEMS supports a single process, multithreaded POSIX
1003.1b environment.  In a pure world, there would be no reason to even
include routines like `getpid()' when there can only be one process.
But providing routines like `getpid()' and making them work in a
sensible fashion for an embedded environment while not returning ENOSYS
(for not implemented) makes it significantly easier to port code from a
UNIX environment without modifying it.


File: posix1003_1.info,  Node: General,  Next: Scope,  Prev: Preface,  Up: Top

1 General
*********

* Menu:

* Scope::
* Normative References::
* Conformance::


File: posix1003_1.info,  Node: Scope,  Next: Normative References,  Prev: General,  Up: General

1.1 Scope
=========


File: posix1003_1.info,  Node: Normative References,  Next: Conformance,  Prev: Scope,  Up: General

1.2 Normative References
========================


File: posix1003_1.info,  Node: Conformance,  Next: Terminology and General Requirements,  Prev: Normative References,  Up: General

1.3 Conformance
===============

     NGROUPS_MAX, Feature Flag,
     _POSIX_ASYNCHRONOUS_IO, Feature Flag,
     _POSIX_CHOWN_RESTRICTED, Feature Flag,
     _POSIX_FSYNC, Feature Flag,
     _POSIX_JOB_CONTROL, Feature Flag,
     _POSIX_MAPPED_FILES, Feature Flag,
     _POSIX_MEMLOCK, Feature Flag,
     _POSIX_MEMLOCK_RANGE, Feature Flag,
     _POSIX_MEMORY_PROTECTION, Feature Flag,
     _POSIX_MESSAGE_PASSING, Feature Flag,
     _POSIX_PRIORITIZED_IO, Feature Flag,
     _POSIX_PRIORITY_SCHEDULING, Feature Flag,
     _POSIX_REALTIME_SIGNALS, Feature Flag,
     _POSIX_SEMAPHORES, Feature Flag,
     _POSIX_SHARED_MEMORY_OBJECTS, Feature Flag,
     _POSIX_SYNCHRONIZED_IO, Feature Flag,
     _POSIX_TIMERS, Feature Flag,
     _POSIX_THREAD_PRIO_INHERIT, Feature Flag,
     _POSIX_THREAD_PRIORITY_SCHEDULING, Feature Flag,
     _POSIX_THREADS, Feature Flag,
     _POSIX_THREAD_SAFE_FUNCTIONS, Feature Flag,


File: posix1003_1.info,  Node: Terminology and General Requirements,  Next: Conventions,  Prev: Conformance,  Up: Top

2 Terminology and General Requirements
**************************************

* Menu:

* Conventions::
* Definitions::
* General Concepts::
* Error Numbers::
* Primitive System Types::
* Environment Description::
* C Language Definitions::
* Numerical Limits::
* C Language Limits::
* Symbolic Constants::


File: posix1003_1.info,  Node: Conventions,  Next: Definitions,  Prev: Terminology and General Requirements,  Up: Terminology and General Requirements

2.1 Conventions
===============


File: posix1003_1.info,  Node: Definitions,  Next: General Concepts,  Prev: Conventions,  Up: Terminology and General Requirements

2.2 Definitions
===============


File: posix1003_1.info,  Node: General Concepts,  Next: Error Numbers,  Prev: Definitions,  Up: Terminology and General Requirements

2.3 General Concepts
====================


File: posix1003_1.info,  Node: Error Numbers,  Next: Primitive System Types,  Prev: General Concepts,  Up: Terminology and General Requirements

2.4 Error Numbers
=================

     E2BIG, Constant, Implemented
     EACCES, Constant, Implemented
     EAGAIN, Constant, Implemented
     EBADF, Constant, Implemented
     EBADMSG, Constant, Implemented
     EBUSY, Constant, Implemented
     ECANCELED, Constant, Unimplemented
     ECHILD, Constant, Implemented
     EDEADLK, Constant, Implemented
     EDOM, Constant, Implemented
     EEXIST, Constant, Implemented
     EFAULT, Constant, Implemented
     EFBIG, Constant, Implemented
     EINPROGRESS, Constant, Implemented
     EINTR, Constant, Implemented
     EINVAL, Constant, Implemented
     EIO, Constant, Implemented
     EISDIR, Constant, Implemented
     EMFILE, Constant, Implemented
     EMLINK, Constant, Implemented
     EMSGSIZE, Constant, Implemented
     ENAMETOOLONG, Constant, Implemented
     ENFILE, Constant, Implemented
     ENODEV, Constant, Implemented
     ENOENT, Constant, Implemented
     ENOEXEC, Constant, Implemented
     ENOLCK, Constant, Implemented
     ENOMEM, Constant, Implemented
     ENOSPC, Constant, Implemented
     ENOSYS, Constant, Implemented
     ENOTDIR, Constant, Implemented
     ENOTEMPTY, Constant, Implemented
     ENOTSUP, Constant, Implemented
     ENOTTY, Constant, Implemented
     ENXIO, Constant, Implemented
     EPERM, Constant, Implemented
     EPIPE, Constant, Implemented
     ERANGE, Constant, Implemented
     EROFS, Constant, Implemented
     ESPIPE, Constant, Implemented
     ESRCH, Constant, Implemented
     ETIMEDOUT, Constant, Implemented
     EXDEV, Constant, Implemented


File: posix1003_1.info,  Node: Primitive System Types,  Next: Environment Description,  Prev: Error Numbers,  Up: Terminology and General Requirements

2.5 Primitive System Types
==========================

     dev_t, Type, Implemented
     gid_t, Type, Implemented
     ino_t, Type, Implemented
     mode_t, Type, Implemented
     nlink_t, Type, Implemented
     off_t, Type, Implemented
     pid_t, Type, Implemented
     pthread_t, Type, Implemented
     pthread_attr_t, Type, Implemented
     pthread_mutex_t, Type, Implemented
     pthread_mutex_attr_t, Type, Implemented
     pthread_cond_t, Type, Implemented
     pthread_cond_attr_t, Type, Implemented
     pthread_key_t, Type, Implemented
     pthread_once_t, Type, Implemented
     size_t, Type, Implemented
     ssize_t, Type, Implemented
     time_t, Type, Implemented
     uid_t, Type, Implemented

NOTE: time_t is not listed in this section but is used by many
functions.


File: posix1003_1.info,  Node: Environment Description,  Next: C Language Definitions,  Prev: Primitive System Types,  Up: Terminology and General Requirements

2.6 Environment Description
===========================


File: posix1003_1.info,  Node: C Language Definitions,  Next: Symbols From the C Standard,  Prev: Environment Description,  Up: Terminology and General Requirements

2.7 C Language Definitions
==========================

* Menu:

* Symbols From the C Standard::
* POSIX.1 Symbols::


File: posix1003_1.info,  Node: Symbols From the C Standard,  Next: POSIX.1 Symbols,  Prev: C Language Definitions,  Up: C Language Definitions

2.7.1 Symbols From the C Standard
---------------------------------

     NULL, Constant, Implemented


File: posix1003_1.info,  Node: POSIX.1 Symbols,  Next: Numerical Limits,  Prev: Symbols From the C Standard,  Up: C Language Definitions

2.7.2 POSIX.1 Symbols
---------------------

     _POSIX_C_SOURCE, Feature Flag,


File: posix1003_1.info,  Node: Numerical Limits,  Next: C Language Limits,  Prev: POSIX.1 Symbols,  Up: Terminology and General Requirements

2.8 Numerical Limits
====================


File: posix1003_1.info,  Node: C Language Limits,  Next: Minimum Values,  Prev: Numerical Limits,  Up: Terminology and General Requirements

2.9 C Language Limits
=====================

* Menu:

* Minimum Values::
* Run-Time Increasable Values::
* Run-Time Invariant Values (Possible Indeterminate)::
* Pathname Variable Values::
* Invariant Values::
* Maximum Values::

     CHAR_BIT, Constant, Implemented
     CHAR_MAX, Constant, Implemented
     CHAR_MIN, Constant, Implemented
     INT_MAX, Constant, Implemented
     INT_MIN, Constant, Implemented
     LONG_MAX, Constant, Implemented
     LONG_MIN, Constant, Implemented
     MB_LEN_MAX, Constant, Implemented
     SCHAR_MAX, Constant, Implemented
     SCHAR_MIN, Constant, Implemented
     SHRT_MAX, Constant, Implemented
     SHRT_MIN, Constant, Implemented
     UCHAR_MAX, Constant, Implemented
     UINT_MAX, Constant, Implemented
     ULONG_MAX, Constant, Implemented
     USHRT_MAX, Constant, Implemented

NOTE: These are implemented in GCC's limits.h file.


File: posix1003_1.info,  Node: Minimum Values,  Next: Run-Time Increasable Values,  Prev: C Language Limits,  Up: C Language Limits

2.9.1 Minimum Values
--------------------

     _POSIX_AIO_LISTIO_MAX, Constant, Implemented
     _POSIX_AIO_MAX, Constant, Implemented
     _POSIX_ARG_MAX, Constant, Implemented
     _POSIX_CHILD_MAX, Constant, Implemented
     _POSIX_DELAYTIMER_MAX, Constant, Implemented
     _POSIX_LINK_MAX, Constant, Implemented
     _POSIX_LOGIN_NAME_MAX, Constant, Implemented
     _POSIX_MAX_CANON, Constant, Implemented
     _POSIX_MAX_INPUT, Constant, Implemented
     _POSIX_MQ_OPEN_MAX, Constant, Implemented
     _POSIX_MQ_PRIO_MAX, Constant, Implemented
     _POSIX_NAME_MAX, Constant, Implemented
     _POSIX_NGROUPS_MAX, Constant, Implemented
     _POSIX_OPEN_MAX, Constant, Implemented
     _POSIX_PATH_MAX, Constant, Implemented
     _POSIX_PIPE_BUF, Constant, Implemented
     _POSIX_RTSIG_MAX, Constant, Implemented
     _POSIX_SEM_NSEMS_MAX, Constant, Implemented
     _POSIX_SEM_VALUE_MAX, Constant, Implemented
     _POSIX_SIGQUEUE_MAX, Constant, Implemented
     _POSIX_SSIZE_MAX, Constant, Implemented
     _POSIX_STREAM_MAX, Constant, Implemented
     _POSIX_THREAD_DESTRUCTOR_ITERATIONS, Constant, Implemented
     _POSIX_THREAD_KEYS_MAX, Constant, Implemented
     _POSIX_THREAD_THREADS_MAX, Constant, Implemented
     _POSIX_TTY_NAME_MAX, Constant, Implemented
     _POSIX_TIME_MAX, Constant, Unimplemented
     _POSIX_TZNAME_MAX, Constant, Implemented


File: posix1003_1.info,  Node: Run-Time Increasable Values,  Next: Run-Time Invariant Values (Possible Indeterminate),  Prev: Minimum Values,  Up: C Language Limits

2.9.2 Run-Time Increasable Values
---------------------------------

     _POSIX_NGROUPS_MAX, Constant, Implemented


File: posix1003_1.info,  Node: Run-Time Invariant Values (Possible Indeterminate),  Next: Pathname Variable Values,  Prev: Run-Time Increasable Values,  Up: C Language Limits

2.9.3 Run-Time Invariant Values (Possible Indeterminate)
--------------------------------------------------------

     AIO_LISTIO_MAX, Constant, Implemented
     AIO_MAX, Constant, Implemented
     AIO_PRIO_DELTA_MAX, Constant, Implemented
     ARG_MAX, Constant, Implemented
     CHILD_MAX, Constant, Implemented
     DELAYTIMER_MAX, Constant, Implemented
     LOGIN_NAME_MAX, Constant, Implemented
     MQ_OPEN_MAX, Constant, Implemented
     OPEN_MAX, Constant, Implemented
     PAGESIZE, Constant, Implemented
     PTHREAD_DESTRUCTOR_ITERATIONS, Constant, Implemented
     PTHREAD_KEYS_MAX, Constant, Implemented
     PTHREAD_STACK_MIN, Constant, Implemented
     PTHJREAD_THREADS_MAX, Constant, Implemented
     RTSIG_MAX, Constant, Implemented
     SEM_NSEMS_MAX, Constant, Implemented
     SEM_VALUE_MAX, Constant, Implemented
     SIGQUEUE_MAX, Constant, Implemented
     STREAM_MAX, Constant, Implemented
     TIMER_MAX, Constant, Implemented
     TTY_NAME_MAX, Constant, Implemented
     TZNAME_MAX, Constant, Implemented


File: posix1003_1.info,  Node: Pathname Variable Values,  Next: Invariant Values,  Prev: Run-Time Invariant Values (Possible Indeterminate),  Up: C Language Limits

2.9.4 Pathname Variable Values
------------------------------

     LINK_MAX, Constant, Implemented
     MAX_CANON, Constant, Implemented
     MAX_INPUT, Constant, Implemented
     NAME_MAX, Constant, Implemented
     PATH_MAX, Constant, Implemented
     PIPE_BUF, Constant, Implemented


File: posix1003_1.info,  Node: Invariant Values,  Next: Maximum Values,  Prev: Pathname Variable Values,  Up: C Language Limits

2.9.5 Invariant Values
----------------------

     SSIZE_MAX, Constant, Implemented


File: posix1003_1.info,  Node: Maximum Values,  Next: Symbolic Constants,  Prev: Invariant Values,  Up: C Language Limits

2.9.6 Maximum Values
--------------------

     _POSIX_CLOCKRES_MIN, Constant, Implemented


File: posix1003_1.info,  Node: Symbolic Constants,  Next: Symbolic Constants for the access Function,  Prev: Maximum Values,  Up: Terminology and General Requirements

2.10 Symbolic Constants
=======================

* Menu:

* Symbolic Constants for the access Function::
* Symbolic Constants for the lseek Function::
* Compile-Time Symbolic Constants for Portability Specifications::
* Execution-Time Symbolic Constants for Portability Specifications::


File: posix1003_1.info,  Node: Symbolic Constants for the access Function,  Next: Symbolic Constants for the lseek Function,  Prev: Symbolic Constants,  Up: Symbolic Constants

2.10.1 Symbolic Constants for the access Function
-------------------------------------------------

     R_OK, Constant, Implemented
     W_OK, Constant, Implemented
     X_OK, Constant, Implemented
     F_OK, Constant, Implemented


File: posix1003_1.info,  Node: Symbolic Constants for the lseek Function,  Next: Compile-Time Symbolic Constants for Portability Specifications,  Prev: Symbolic Constants for the access Function,  Up: Symbolic Constants

2.10.2 Symbolic Constants for the lseek Function
------------------------------------------------

     SEEK_SET, Constant, Implemented
     SEEK_CUR, Constant, Implemented
     SEEK_END, Constant, Implemented


File: posix1003_1.info,  Node: Compile-Time Symbolic Constants for Portability Specifications,  Next: Execution-Time Symbolic Constants for Portability Specifications,  Prev: Symbolic Constants for the lseek Function,  Up: Symbolic Constants

2.10.3 Compile-Time Symbolic Constants for Portability Specifications
---------------------------------------------------------------------

     _POSIX_ASYNCHRONOUS_IO, Feature Flag,
     _POSIX_FSYNC, Feature Flag,
     _POSIX_JOB_CONTROL, Feature Flag,
     _POSIX_MAPPED_FILES, Feature Flag,
     _POSIX_MEMLOCK, Feature Flag,
     _POSIX_MEMLOCK_RANGE, Feature Flag,
     _POSIX_MEMORY_PROTECTION, Feature Flag,
     _POSIX_MESSAGE_PASSING, Feature Flag,
     _POSIX_PRIORITIZED_IO, Feature Flag,
     _POSIX_PRIORITY_SCHEDULING, Feature Flag,
     _POSIX_REALTIME_SIGNALS, Feature Flag,
     _POSIX_SAVED_IDS, Feature Flag,
     _POSIX_SEMAPHORES, Feature Flag,
     _POSIX_SHARED_MEMORY_OBJECTS, Feature Flag,
     _POSIX_SYNCHRONIZED_IO, Feature Flag,
     _POSIX_THREADS, Feature Flag,
     _POSIX_THREAD_ATTR_STACKADDR, Feature Flag,
     _POSIX_THREAD_ATTR_STACKSIZE, Feature Flag,
     _POSIX_THREAD_PRIORITY_SCHEDULING, Feature Flag,
     _POSIX_THREAD_PRIO_INHERIT, Feature Flag,
     _POSIX_THREAD_PRIO_CEILING, Feature Flag,
     _POSIX_THREAD_PROCESS_SHARED, Feature Flag,
     _POSIX_THREAD_SAFE_FUNCTIONS, Feature Flag,
     _POSIX_TIMERS, Feature Flag,
     _POSIX_VERSION, Feature Flag,


File: posix1003_1.info,  Node: Execution-Time Symbolic Constants for Portability Specifications,  Next: Process Primitives,  Prev: Compile-Time Symbolic Constants for Portability Specifications,  Up: Symbolic Constants

2.10.4 Execution-Time Symbolic Constants for Portability Specifications
-----------------------------------------------------------------------

     _POSIX_ASYNC_IO, Feature Flag,
     _POSIX_CHOWN_RESTRICTED, Feature Flag,
     _POSIX_NO_TRUNC, Feature Flag,
     _POSIX_PRIO_IO, Feature Flag,
     _POSIX_SYNC_IO, Feature Flag,
     _POSIX_VDISABLE, Feature Flag,


File: posix1003_1.info,  Node: Process Primitives,  Next: Process Creation and Execution,  Prev: Execution-Time Symbolic Constants for Portability Specifications,  Up: Top

3 Process Primitives
********************

* Menu:

* Process Creation and Execution::
* Process Termination::
* Signals::
* Timer Operations::


File: posix1003_1.info,  Node: Process Creation and Execution,  Next: Process Creation,  Prev: Process Primitives,  Up: Process Primitives

3.1 Process Creation and Execution
==================================

* Menu:

* Process Creation::
* Execute a File::
* Register Fork Handlers::


File: posix1003_1.info,  Node: Process Creation,  Next: Execute a File,  Prev: Process Creation and Execution,  Up: Process Creation and Execution

3.1.1 Process Creation
----------------------

     fork(), Function, Unimplementable, Requires Processes


File: posix1003_1.info,  Node: Execute a File,  Next: Register Fork Handlers,  Prev: Process Creation,  Up: Process Creation and Execution

3.1.2 Execute a File
--------------------

     execl(), Function, Unimplementable, Requires Processes
     execv(), Function, Unimplementable, Requires Processes
     execle(), Function, Unimplementable, Requires Processes
     execve(), Function, Unimplementable, Requires Processes
     execlp(), Function, Unimplementable, Requires Processes
     execvp(), Function, Unimplementable, Requires Processes


File: posix1003_1.info,  Node: Register Fork Handlers,  Next: Process Termination,  Prev: Execute a File,  Up: Process Creation and Execution

3.1.3 Register Fork Handlers
----------------------------

     pthread_atfork(), Function, Unimplementable, Requires Processes


File: posix1003_1.info,  Node: Process Termination,  Next: Wait for Process Termination,  Prev: Register Fork Handlers,  Up: Process Primitives

3.2 Process Termination
=======================

* Menu:

* Wait for Process Termination::
* Terminate a Process::


File: posix1003_1.info,  Node: Wait for Process Termination,  Next: Terminate a Process,  Prev: Process Termination,  Up: Process Termination

3.2.1 Wait for Process Termination
----------------------------------

     wait(), Function, Unimplementable, Requires Processes
     waitpid(), Function, Unimplementable, Requires Processes
     WNOHANG, Constant, Unimplementable, Requires Processes
     WUNTRACED, Constant, Unimplementable, Requires Processes
     WIFEXITED(), Function, Unimplementable, Requires Processes
     WEXITSTATUS(), Function, Unimplementable, Requires Processes
     WIFSIGNALED(), Function, Unimplementable, Requires Processes
     WTERMSIG(), Function, Unimplementable, Requires Processes
     WIFSTOPPED(), Function, Unimplementable, Requires Processes
     WSTOPSIG(), Function, Unimplementable, Requires Processes


File: posix1003_1.info,  Node: Terminate a Process,  Next: Signals,  Prev: Wait for Process Termination,  Up: Process Termination

3.2.2 Terminate a Process
-------------------------

     _exit(), Function, Implemented


File: posix1003_1.info,  Node: Signals,  Next: Signal Concepts,  Prev: Terminate a Process,  Up: Process Primitives

3.3 Signals
===========

* Menu:

* Signal Concepts::
* Send a Signal to a Process::
* Manipulate Signal Sets::
* Examine and Change Signal Action::
* Examine and Change Blocked Signals::
* Examine Pending Signals::
* Wait for a Signal::
* Synchronously Accept a Signal::
* Queue a Signal to a Process::
* Send a Signal to a Thread::


File: posix1003_1.info,  Node: Signal Concepts,  Next: Signal Names,  Prev: Signals,  Up: Signals

3.3.1 Signal Concepts
---------------------

* Menu:

* Signal Names::
* Signal Generation and Delivery::
* Signal Actions::


File: posix1003_1.info,  Node: Signal Names,  Next: Signal Generation and Delivery,  Prev: Signal Concepts,  Up: Signal Concepts

3.3.1.1 Signal Names
....................

     sigset_t, Type, Implemented
     SIG_DFL, Constant, Implemented
     SIG_IGN, Constant, Implemented
     SIG_ERR, Constant, Implemented
     SIGABRT, Constant, Implemented
     SIGALRM, Constant, Implemented
     SIGFPE, Constant, Implemented
     SIGHUP, Constant, Implemented
     SIGILL, Constant, Implemented
     SIGINT, Constant, Implemented
     SIGKILL, Constant, Implemented
     SIGPIPE, Constant, Implemented
     SIGQUIT, Constant, Implemented
     SIGSEGV, Constant, Implemented
     SIGTERM, Constant, Implemented
     SIGUSR1, Constant, Implemented
     SIGUSR2, Constant, Implemented
     SIGCHLD, Constant, Unimplemented
     SIGCONT, Constant, Unimplemented
     SIGSTOP, Constant, Unimplemented
     SIGTSTP, Constant, Unimplemented
     SIGTTIN, Constant, Unimplemented
     SIGTTOU, Constant, Unimplemented
     SIGBUS, Constant, Implemented
     SIGRTMIN, Constant, Implemented
     SIGRTMAX, Constant, Implemented

NOTE: SIG_ERR is technically an extension to the C Library which is not
documented anywhere else according to the index.


File: posix1003_1.info,  Node: Signal Generation and Delivery,  Next: Signal Actions,  Prev: Signal Names,  Up: Signal Concepts

3.3.1.2 Signal Generation and Delivery
......................................

     struct sigevent, Type, Implemented
     union sigval, Type, Implemented
     SIGEV_NONE, Constant, Implemented
     SIGEV_SIGNAL, Constant, Implemented
     SIGEV_THREAD, Constant, Implemented


File: posix1003_1.info,  Node: Signal Actions,  Next: Send a Signal to a Process,  Prev: Signal Generation and Delivery,  Up: Signal Concepts

3.3.1.3 Signal Actions
......................

     siginfo_t, Type, Implemented
     SI_USER, Constant, Implemented
     SI_QUEUE, Constant, Implemented
     SI_TIMER, Constant, Implemented
     SI_ASYNCIO, Constant, Implemented
     SI_MESGQ, Constant, Implemented


File: posix1003_1.info,  Node: Send a Signal to a Process,  Next: Manipulate Signal Sets,  Prev: Signal Actions,  Up: Signals

3.3.2 Send a Signal to a Process
--------------------------------

     kill(), Function, Implemented


File: posix1003_1.info,  Node: Manipulate Signal Sets,  Next: Examine and Change Signal Action,  Prev: Send a Signal to a Process,  Up: Signals

3.3.3 Manipulate Signal Sets
----------------------------

     sigemptyset(), Function, Implemented
     sigfillset(), Function, Implemented
     sigaddset(), Function, Implemented
     sigdelset(), Function, Implemented
     sigismember(), Function, Implemented


File: posix1003_1.info,  Node: Examine and Change Signal Action,  Next: Examine and Change Blocked Signals,  Prev: Manipulate Signal Sets,  Up: Signals

3.3.4 Examine and Change Signal Action
--------------------------------------

     sigaction(), Function, Implemented
     sigaction, Type, Implemented
     SA_NOCLDSTOP, Constant, Implemented
     SA_SIGINFO, Constant, Implemented


File: posix1003_1.info,  Node: Examine and Change Blocked Signals,  Next: Examine Pending Signals,  Prev: Examine and Change Signal Action,  Up: Signals

3.3.5 Examine and Change Blocked Signals
----------------------------------------

     pthread_sigmask(), Function, Implemented
     sigprocmask(), Function, Implemented
     SIG_BLOCK, Constant, Implemented
     SIG_UNBLOCK, Constant, Implemented
     SIG_SETMASK, Constant, Implemented


File: posix1003_1.info,  Node: Examine Pending Signals,  Next: Wait for a Signal,  Prev: Examine and Change Blocked Signals,  Up: Signals

3.3.6 Examine Pending Signals
-----------------------------

     sigpending(), Function, Implemented


File: posix1003_1.info,  Node: Wait for a Signal,  Next: Synchronously Accept a Signal,  Prev: Examine Pending Signals,  Up: Signals

3.3.7 Wait for a Signal
-----------------------

     sigsuspend(), Function, Implemented


File: posix1003_1.info,  Node: Synchronously Accept a Signal,  Next: Queue a Signal to a Process,  Prev: Wait for a Signal,  Up: Signals

3.3.8 Synchronously Accept a Signal
-----------------------------------

     sigwait(), Function, Implemented
     sigwaitinfo(), Function, Implemented
     sigtimedwait(), Function, Implemented


File: posix1003_1.info,  Node: Queue a Signal to a Process,  Next: Send a Signal to a Thread,  Prev: Synchronously Accept a Signal,  Up: Signals

3.3.9 Queue a Signal to a Process
---------------------------------

     sigqueue(), Function, Implemented


File: posix1003_1.info,  Node: Send a Signal to a Thread,  Next: Timer Operations,  Prev: Queue a Signal to a Process,  Up: Signals

3.3.10 Send a Signal to a Thread
--------------------------------

     pthread_kill(), Function, Implemented


File: posix1003_1.info,  Node: Timer Operations,  Next: Schedule Alarm,  Prev: Send a Signal to a Thread,  Up: Process Primitives

3.4 Timer Operations
====================

* Menu:

* Schedule Alarm::
* Suspend Process Execution::
* Delay Process Execution::


File: posix1003_1.info,  Node: Schedule Alarm,  Next: Suspend Process Execution,  Prev: Timer Operations,  Up: Timer Operations

3.4.1 Schedule Alarm
--------------------

     alarm(), Function, Implemented


File: posix1003_1.info,  Node: Suspend Process Execution,  Next: Delay Process Execution,  Prev: Schedule Alarm,  Up: Timer Operations

3.4.2 Suspend Process Execution
-------------------------------

     pause(), Function, Implemented


File: posix1003_1.info,  Node: Delay Process Execution,  Next: Process Environment,  Prev: Suspend Process Execution,  Up: Timer Operations

3.4.3 Delay Process Execution
-----------------------------

     sleep(), Function, Implemented


File: posix1003_1.info,  Node: Process Environment,  Next: Process Identification,  Prev: Delay Process Execution,  Up: Top

4 Process Environment
*********************

* Menu:

* Process Identification::
* User Identification::
* Process Groups::
* System Identification::
* Time::
* Environment Variables::
* Terminal Identification::
* Configurable System Variables::


File: posix1003_1.info,  Node: Process Identification,  Next: Get Process and Parent Process IDs,  Prev: Process Environment,  Up: Process Environment

4.1 Process Identification
==========================

* Menu:

* Get Process and Parent Process IDs::


File: posix1003_1.info,  Node: Get Process and Parent Process IDs,  Next: User Identification,  Prev: Process Identification,  Up: Process Identification

4.1.1 Get Process and Parent Process IDs
----------------------------------------

     getpid(), Function, Implemented, SUSP Functionality
     getppid(), Function, Implemented, SUSP Functionality


File: posix1003_1.info,  Node: User Identification,  Next: Get Real User Effective User Real Group and Effective Group IDs,  Prev: Get Process and Parent Process IDs,  Up: Process Environment

4.2 User Identification
=======================

* Menu:

* Get Real User Effective User Real Group and Effective Group IDs::
* Set User and Group IDs::
* Get Supplementary Group IDs::
* Get User Name::


File: posix1003_1.info,  Node: Get Real User Effective User Real Group and Effective Group IDs,  Next: Set User and Group IDs,  Prev: User Identification,  Up: User Identification

4.2.1 Get Real User Effective User Real Group and Effective Group IDs
---------------------------------------------------------------------

     getuid(), Function, Implemented, SUSP Functionality
     geteuid(), Function, Implemented, SUSP Functionality
     getgid(), Function, Implemented, SUSP Functionality
     getegid(), Function, Implemented, SUSP Functionality


File: posix1003_1.info,  Node: Set User and Group IDs,  Next: Get Supplementary Group IDs,  Prev: Get Real User Effective User Real Group and Effective Group IDs,  Up: User Identification

4.2.2 Set User and Group IDs
----------------------------

     setuid(), Function, Implemented, SUSP Functionality
     setgid(), Function, Implemented, SUSP Functionality


File: posix1003_1.info,  Node: Get Supplementary Group IDs,  Next: Get User Name,  Prev: Set User and Group IDs,  Up: User Identification

4.2.3 Get Supplementary Group IDs
---------------------------------

     getgroups(), Function, Implemented, SUSP Functionality


File: posix1003_1.info,  Node: Get User Name,  Next: Process Groups,  Prev: Get Supplementary Group IDs,  Up: User Identification

4.2.4 Get User Name
-------------------

     getlogin(), Function, Implemented, SUSP Functionality
     getlogin_r(), Function, Implemented, SUSP Functionality


File: posix1003_1.info,  Node: Process Groups,  Next: Get Process Group ID,  Prev: Get User Name,  Up: Process Environment

4.3 Process Groups
==================

* Menu:

* Get Process Group ID::
* Create Session and Set Process Group ID::
* Set Process Group ID for Job Control::


File: posix1003_1.info,  Node: Get Process Group ID,  Next: Create Session and Set Process Group ID,  Prev: Process Groups,  Up: Process Groups

4.3.1 Get Process Group ID
--------------------------

     getpgrp(), Function, Implemented, SUSP Functionality


File: posix1003_1.info,  Node: Create Session and Set Process Group ID,  Next: Set Process Group ID for Job Control,  Prev: Get Process Group ID,  Up: Process Groups

4.3.2 Create Session and Set Process Group ID
---------------------------------------------

     setsid(), Function, Implemented, SUSP Functionality


File: posix1003_1.info,  Node: Set Process Group ID for Job Control,  Next: System Identification,  Prev: Create Session and Set Process Group ID,  Up: Process Groups

4.3.3 Set Process Group ID for Job Control
------------------------------------------

     setpgid(), Function, Dummy Implementation


File: posix1003_1.info,  Node: System Identification,  Next: Get System Name,  Prev: Set Process Group ID for Job Control,  Up: Process Environment

4.4 System Identification
=========================

* Menu:

* Get System Name::


File: posix1003_1.info,  Node: Get System Name,  Next: Time,  Prev: System Identification,  Up: System Identification

4.4.1 Get System Name
---------------------

     struct utsname, Type, Implemented
     uname(), Function, Implemented


File: posix1003_1.info,  Node: Time,  Next: Get System Time,  Prev: Get System Name,  Up: Process Environment

4.5 Time
========

* Menu:

* Get System Time::
* Get Process Times::


File: posix1003_1.info,  Node: Get System Time,  Next: Get Process Times,  Prev: Time,  Up: Time

4.5.1 Get System Time
---------------------

     time(), Function, Implemented


File: posix1003_1.info,  Node: Get Process Times,  Next: Environment Variables,  Prev: Get System Time,  Up: Time

4.5.2 Get Process Times
-----------------------

     struct tms, Type, Implemented
     times(), Function, Implemented

NOTE: `times' always returns 0 for tms_stime, tms_cutime, and
tms_cstime fields of the `struct tms' returned.


File: posix1003_1.info,  Node: Environment Variables,  Next: Environment Access,  Prev: Get Process Times,  Up: Process Environment

4.6 Environment Variables
=========================

* Menu:

* Environment Access::


File: posix1003_1.info,  Node: Environment Access,  Next: Terminal Identification,  Prev: Environment Variables,  Up: Environment Variables

4.6.1 Environment Access
------------------------

     getenv(), Function, Implemented


File: posix1003_1.info,  Node: Terminal Identification,  Next: Generate Terminal Pathname,  Prev: Environment Access,  Up: Process Environment

4.7 Terminal Identification
===========================

* Menu:

* Generate Terminal Pathname::
* Determine Terminal Device Name::


File: posix1003_1.info,  Node: Generate Terminal Pathname,  Next: Determine Terminal Device Name,  Prev: Terminal Identification,  Up: Terminal Identification

4.7.1 Generate Terminal Pathname
--------------------------------

     ctermid(), Function, Implemented


File: posix1003_1.info,  Node: Determine Terminal Device Name,  Next: Configurable System Variables,  Prev: Generate Terminal Pathname,  Up: Terminal Identification

4.7.2 Determine Terminal Device Name
------------------------------------

     ttyname(), Function, Implemented, untested
     ttyname_r(), Function, Implemented, untested
     isatty(), Function, Implemented


File: posix1003_1.info,  Node: Configurable System Variables,  Next: Get Configurable System Variables,  Prev: Determine Terminal Device Name,  Up: Process Environment

4.8 Configurable System Variables
=================================

* Menu:

* Get Configurable System Variables::


File: posix1003_1.info,  Node: Get Configurable System Variables,  Next: Files and Directories,  Prev: Configurable System Variables,  Up: Configurable System Variables

4.8.1 Get Configurable System Variables
---------------------------------------

     sysconf(), Function, Dummy Implementation
     _SC_AIO_LISTIO_MAX, Constant, Implemented
     _SC_AIO_MAX, Constant, Implemented
     _SC_AIO_PRIO_DELTA_MAX, Constant, Implemented
     _SC_ARG_MAX, Constant, Implemented
     _SC_CHILD_MAX, Constant, Implemented
     _SC_CLK_TCK, Constant, Implemented
     CLK_TCK, Constant, Implemented
     _SC_DELAYTIMER_MAX, Constant, Implemented
     _SC_GETGR_R_SIZE_MAX, Constant, Implemented
     _SC_GETPW_R_SIZE_MAX, Constant, Implemented
     _SC_LOGIN_NAME_MAX, Constant, Implemented
     _SC_MQ_OPEN_MAX, Constant, Implemented
     _SC_MQ_PRIO_MAX, Constant, Implemented
     _SC_NGROUPS_MAX, Constant, Implemented
     _SC_OPEN_MAX, Constant, Implemented
     _SC_PAGESIZE, Constant, Implemented
     _SC_RTSIG_MAX, Constant, Implemented
     _SC_SEM_NSEMS_MAX, Constant, Implemented
     _SC_SEM_VALUE_MAX, Constant, Implemented
     _SC_SIGQUEUE_MAX, Constant, Implemented
     _SC_STREAM_MAX, Constant, Implemented
     _SC_THREAD_DESTRUCTOR_ITERATIONS, Constant, Implemented
     _SC_THREAD_KEYS_MAX, Constant, Implemented
     _SC_THREAD_STACK_MIN, Constant, Implemented
     _SC_THREAD_THREADS_MAX, Constant, Implemented
     _SC_TIMER_MAX, Constant, Implemented
     _SC_TTY_NAME_MAX, Constant, Implemented
     _SC_TZNAME_MAX, Constant, Implemented
     _SC_ASYNCHRONOUS_IO, Constant, Implemented
     _SC_FSYNC, Constant, Implemented
     _SC_JOB_CONROL, Constant, Implemented
     _SC_MAPPED_FILES, Constant, Implemented
     _SC_MEMLOCK, Constant, Implemented
     _SC_MEMLOCK_RANGE, Constant, Implemented
     _SC_MEMORY_PROTECTION, Constant, Implemented
     _SC_MESSAGE_PASSING, Constant, Implemented
     _SC_PRIORITIZED_IO, Constant, Implemented
     _SC_PRIORITY_SCHEDULING, Constant, Unimplemented
     _SC_REALTIME_SIGNALS, Constant, Implemented
     _SC_SAVED_IDS, Constant, Implemented
     _SC_SEMAPHORES, Constant, Implemented
     _SC_SHARED_MEMORY_OBJECTS, Constant, Implemented
     _SC_SYNCHRONIZED_IO, Constant, Implemented
     _SC_TIMERS, Constant, Implemented
     _SC_THREADS, Constant, Implemented
     _SC_THREAD_ATTR_STACKADDR, Constant, Implemented
     _SC_THREAD_ATTR_STACKSIZE, Constant, Implemented
     _SC_THREAD_PRIORITY_SCHEDULING, Constant, Implemented
     _SC_THREAD_PRIO_INHERIT, Constant, Implemented
     _SC_THREAD_PRIO_PROTECT, Constant, Unimplemented
     _SC_THREAD_PROCESS_SHARED, Constant, Implemented
     _SC_THREAD_SAFE_FUNCTIONS, Constant, Implemented
     _SC_VERSION, Constant, Implemented


File: posix1003_1.info,  Node: Files and Directories,  Next: Directories,  Prev: Get Configurable System Variables,  Up: Top

5 Files and Directories
***********************

* Menu:

* Directories::
* Working Directory::
* General File Creation::
* Special File Creation::
* File Removal::
* File Characteristics::
* Configurable Pathname Variable::


File: posix1003_1.info,  Node: Directories,  Next: Format of Directory Entries,  Prev: Files and Directories,  Up: Files and Directories

5.1 Directories
===============

* Menu:

* Format of Directory Entries::
* Directory Operations::


File: posix1003_1.info,  Node: Format of Directory Entries,  Next: Directory Operations,  Prev: Directories,  Up: Directories

5.1.1 Format of Directory Entries
---------------------------------


File: posix1003_1.info,  Node: Directory Operations,  Next: Working Directory,  Prev: Format of Directory Entries,  Up: Directories

5.1.2 Directory Operations
--------------------------

     struct dirent, Type, Implemented
     opendir(), Function, Implemented
     readdir(), Function, Implemented
     readdir_r(), Function, Implemented
     rewinddir(), Function, Implemented
     closedir(), Function, Implemented


File: posix1003_1.info,  Node: Working Directory,  Next: Change Current Working Directory,  Prev: Directory Operations,  Up: Files and Directories

5.2 Working Directory
=====================

* Menu:

* Change Current Working Directory::
* Get Working Directory Pathname::


File: posix1003_1.info,  Node: Change Current Working Directory,  Next: Get Working Directory Pathname,  Prev: Working Directory,  Up: Working Directory

5.2.1 Change Current Working Directory
--------------------------------------

     chdir(), Function, Implemented


File: posix1003_1.info,  Node: Get Working Directory Pathname,  Next: General File Creation,  Prev: Change Current Working Directory,  Up: Working Directory

5.2.2 Get Working Directory Pathname
------------------------------------

     getcwd(), Function, Implemented


File: posix1003_1.info,  Node: General File Creation,  Next: Open a File,  Prev: Get Working Directory Pathname,  Up: Files and Directories

5.3 General File Creation
=========================

* Menu:

* Open a File::
* Create a New File or Rewrite an Existing One::
* Set File Creation Mask::
* Link to a File::


File: posix1003_1.info,  Node: Open a File,  Next: Create a New File or Rewrite an Existing One,  Prev: General File Creation,  Up: General File Creation

5.3.1 Open a File
-----------------

     open(), Function, Implemented
     O_RDONLY, Constant, Implemented
     O_WRONLY, Constant, Implemented
     O_RDWR, Constant, Implemented
     O_APPEND, Constant, Implemented
     O_CREAT, Constant, Implemented
     O_DSYNC, Constant, Unimplemented
     O_EXCL, Constant, Implemented
     O_NOCTTY, Constant, Implemented
     O_NONBLOCK, Constant, Implemented
     O_RSYNC, Constant, Unimplemented
     O_SYNC, Constant, Implemented
     O_TRUNC, Constant, Implemented

NOTE: In the newlib fcntl.h, O_SYNC is defined only if _POSIX_SOURCE is
not defined.  This seems wrong.


File: posix1003_1.info,  Node: Create a New File or Rewrite an Existing One,  Next: Set File Creation Mask,  Prev: Open a File,  Up: General File Creation

5.3.2 Create a New File or Rewrite an Existing One
--------------------------------------------------

     creat(), Function, Implemented


File: posix1003_1.info,  Node: Set File Creation Mask,  Next: Link to a File,  Prev: Create a New File or Rewrite an Existing One,  Up: General File Creation

5.3.3 Set File Creation Mask
----------------------------

     umask(), Function, Implemented


File: posix1003_1.info,  Node: Link to a File,  Next: Special File Creation,  Prev: Set File Creation Mask,  Up: General File Creation

5.3.4 Link to a File
--------------------

     link(), Function, Implemented


File: posix1003_1.info,  Node: Special File Creation,  Next: Make a Directory,  Prev: Link to a File,  Up: Files and Directories

5.4 Special File Creation
=========================

* Menu:

* Make a Directory::
* Make a FIFO Special File::


File: posix1003_1.info,  Node: Make a Directory,  Next: Make a FIFO Special File,  Prev: Special File Creation,  Up: Special File Creation

5.4.1 Make a Directory
----------------------

     mkdir(), Function, Implemented


File: posix1003_1.info,  Node: Make a FIFO Special File,  Next: File Removal,  Prev: Make a Directory,  Up: Special File Creation

5.4.2 Make a FIFO Special File
------------------------------

     mkfifo(), Function, Untested Implementation

NOTE: mkfifo() is implemented but no filesystem supports FIFOs.


File: posix1003_1.info,  Node: File Removal,  Next: Remove Directory Entries,  Prev: Make a FIFO Special File,  Up: Files and Directories

5.5 File Removal
================

* Menu:

* Remove Directory Entries::
* Remove a Directory::
* Rename a File::


File: posix1003_1.info,  Node: Remove Directory Entries,  Next: Remove a Directory,  Prev: File Removal,  Up: File Removal

5.5.1 Remove Directory Entries
------------------------------

     unlink(), Function, Implemented


File: posix1003_1.info,  Node: Remove a Directory,  Next: Rename a File,  Prev: Remove Directory Entries,  Up: File Removal

5.5.2 Remove a Directory
------------------------

     rmdir(), Function, Implemented


File: posix1003_1.info,  Node: Rename a File,  Next: File Characteristics,  Prev: Remove a Directory,  Up: File Removal

5.5.3 Rename a File
-------------------

     rename(), Function, Implemented


File: posix1003_1.info,  Node: File Characteristics,  Next: File Characteristics Header and Data Structure,  Prev: Rename a File,  Up: Files and Directories

5.6 File Characteristics
========================

* Menu:

* File Characteristics Header and Data Structure::
* Get File Status::
* Check File Accessibility::
* Change File Modes::
* Change Owner and Group of a File::
* Set File Access and Modification Times::
* Truncate a File to a Specified Length::


File: posix1003_1.info,  Node: File Characteristics Header and Data Structure,  Next: <sys/stat.h> File Types,  Prev: File Characteristics,  Up: File Characteristics

5.6.1 File Characteristics Header and Data Structure
----------------------------------------------------

* Menu:

* <sys/stat.h> File Types::
* <sys/stat.h> File Modes::
* <sys/stat.h> Time Entries::

     struct stat, Type, Implemented


File: posix1003_1.info,  Node: <sys/stat.h> File Types,  Next: <sys/stat.h> File Modes,  Prev: File Characteristics Header and Data Structure,  Up: File Characteristics Header and Data Structure

5.6.1.1 <sys/stat.h> File Types
...............................

     S_ISBLK(), Function, Implemented
     S_ISCHR(), Function, Implemented
     S_ISDIR(), Function, Implemented
     S_ISFIFO(), Function, Implemented
     S_ISREG(), Function, Implemented
     S_TYPEISMQ(), Function, Unimplemented
     S_TYPEISSEM(), Function, Unimplemented
     S_TYPEISSHM(), Function, Unimplemented


File: posix1003_1.info,  Node: <sys/stat.h> File Modes,  Next: <sys/stat.h> Time Entries,  Prev: <sys/stat.h> File Types,  Up: File Characteristics Header and Data Structure

5.6.1.2 <sys/stat.h> File Modes
...............................

     S_IRWXU, Constant, Implemented
     S_IRUSR, Constant, Implemented
     S_IWUSR, Constant, Implemented
     S_IXUSR, Constant, Implemented
     S_IRWXG, Constant, Implemented
     S_IRGRP, Constant, Implemented
     S_IWGRP, Constant, Implemented
     S_IXGRP, Constant, Implemented
     S_IRWXO, Constant, Implemented
     S_IROTH, Constant, Implemented
     S_IWOTH, Constant, Implemented
     S_IXOTH, Constant, Implemented
     S_ISUID, Constant, Implemented
     S_ISGID, Constant, Implemented


File: posix1003_1.info,  Node: <sys/stat.h> Time Entries,  Next: Get File Status,  Prev: <sys/stat.h> File Modes,  Up: File Characteristics Header and Data Structure

5.6.1.3 <sys/stat.h> Time Entries
.................................


File: posix1003_1.info,  Node: Get File Status,  Next: Check File Accessibility,  Prev: <sys/stat.h> Time Entries,  Up: File Characteristics

5.6.2 Get File Status
---------------------

     stat(), Function, Implemented
     fstat(), Function, Implemented


File: posix1003_1.info,  Node: Check File Accessibility,  Next: Change File Modes,  Prev: Get File Status,  Up: File Characteristics

5.6.3 Check File Accessibility
------------------------------

     access(), Function, Implemented


File: posix1003_1.info,  Node: Change File Modes,  Next: Change Owner and Group of a File,  Prev: Check File Accessibility,  Up: File Characteristics

5.6.4 Change File Modes
-----------------------

     chmod(), Function, Implemented
     fchmod(), Function, Implemented


File: posix1003_1.info,  Node: Change Owner and Group of a File,  Next: Set File Access and Modification Times,  Prev: Change File Modes,  Up: File Characteristics

5.6.5 Change Owner and Group of a File
--------------------------------------

     chown(), Function, Implemented


File: posix1003_1.info,  Node: Set File Access and Modification Times,  Next: Truncate a File to a Specified Length,  Prev: Change Owner and Group of a File,  Up: File Characteristics

5.6.6 Set File Access and Modification Times
--------------------------------------------

     struct utimbuf, Type, Implemented
     utime(), Function, Implemented


File: posix1003_1.info,  Node: Truncate a File to a Specified Length,  Next: Configurable Pathname Variable,  Prev: Set File Access and Modification Times,  Up: File Characteristics

5.6.7 Truncate a File to a Specified Length
-------------------------------------------

     ftruncate(), Function, Implemented


File: posix1003_1.info,  Node: Configurable Pathname Variable,  Next: Get Configurable Pathname Variables,  Prev: Truncate a File to a Specified Length,  Up: Files and Directories

5.7 Configurable Pathname Variable
==================================

* Menu:

* Get Configurable Pathname Variables::


File: posix1003_1.info,  Node: Get Configurable Pathname Variables,  Next: Input and Output Primitives,  Prev: Configurable Pathname Variable,  Up: Configurable Pathname Variable

5.7.1 Get Configurable Pathname Variables
-----------------------------------------

     pathconf(), Function, Implemented
     fpathconf(), Function, Implemented
     _PC_LINK_MAX, Constant, Implemented
     _PC_MAX_CANON, Constant, Implemented
     _PC_MAX_INPUT, Constant, Implemented
     _PC_MAX_INPUT, Constant, Implemented
     _PC_NAME_MAX, Constant, Implemented
     _PC_PATH_MAX, Constant, Implemented
     _PC_PIPE_BUF, Constant, Implemented
     _PC_ASYNC_IO, Constant, Implemented
     _PC_CHOWN_RESTRICTED, Constant, Implemented
     _PC_NO_TRUNC, Constant, Implemented
     _PC_PRIO_IO, Constant, Implemented
     _PC_SYNC_IO, Constant, Implemented
     _PC_VDISABLE, Constant, Implemented

NOTE: The newlib unistd.h and sys/unistd.h are installed and the
include search patch is used to get the right one.  There are conflicts
between the newlib unistd.h and RTEMS' version.


File: posix1003_1.info,  Node: Input and Output Primitives,  Next: Pipes,  Prev: Get Configurable Pathname Variables,  Up: Top

6 Input and Output Primitives
*****************************

* Menu:

* Pipes::
* File Descriptor Manipulation::
* File Descriptor Deassignment::
* Input and Output::
* Control Operations on Files::
* File Synchronization::
* Asynchronous Input and Output::


File: posix1003_1.info,  Node: Pipes,  Next: Create an Inter-Process Channel,  Prev: Input and Output Primitives,  Up: Input and Output Primitives

6.1 Pipes
=========

* Menu:

* Create an Inter-Process Channel::


File: posix1003_1.info,  Node: Create an Inter-Process Channel,  Next: File Descriptor Manipulation,  Prev: Pipes,  Up: Pipes

6.1.1 Create an Inter-Process Channel
-------------------------------------

     pipe(), Function, Dummy Implementation

NOTE: pipe() returns ENOSYS.


File: posix1003_1.info,  Node: File Descriptor Manipulation,  Next: Duplicate an Open File Descriptor,  Prev: Create an Inter-Process Channel,  Up: Input and Output Primitives

6.2 File Descriptor Manipulation
================================

* Menu:

* Duplicate an Open File Descriptor::


File: posix1003_1.info,  Node: Duplicate an Open File Descriptor,  Next: File Descriptor Deassignment,  Prev: File Descriptor Manipulation,  Up: File Descriptor Manipulation

6.2.1 Duplicate an Open File Descriptor
---------------------------------------

     dup(), Function, Implemented
     dup2(), Function, Implemented


File: posix1003_1.info,  Node: File Descriptor Deassignment,  Next: Close a File,  Prev: Duplicate an Open File Descriptor,  Up: Input and Output Primitives

6.3 File Descriptor Deassignment
================================

* Menu:

* Close a File::


File: posix1003_1.info,  Node: Close a File,  Next: Input and Output,  Prev: File Descriptor Deassignment,  Up: File Descriptor Deassignment

6.3.1 Close a File
------------------

     close(), Function, Implemented


File: posix1003_1.info,  Node: Input and Output,  Next: Read from a File,  Prev: Close a File,  Up: Input and Output Primitives

6.4 Input and Output
====================

* Menu:

* Read from a File::
* Write to a File::


File: posix1003_1.info,  Node: Read from a File,  Next: Write to a File,  Prev: Input and Output,  Up: Input and Output

6.4.1 Read from a File
----------------------

     read(), Function, Implemented


File: posix1003_1.info,  Node: Write to a File,  Next: Control Operations on Files,  Prev: Read from a File,  Up: Input and Output

6.4.2 Write to a File
---------------------

     write(), Function, Implemented


File: posix1003_1.info,  Node: Control Operations on Files,  Next: Data Definitions for File Control Operations,  Prev: Write to a File,  Up: Input and Output Primitives

6.5 Control Operations on Files
===============================

* Menu:

* Data Definitions for File Control Operations::
* File Control::
* Reposition Read/Write File Offset::


File: posix1003_1.info,  Node: Data Definitions for File Control Operations,  Next: File Control,  Prev: Control Operations on Files,  Up: Control Operations on Files

6.5.1 Data Definitions for File Control Operations
--------------------------------------------------


File: posix1003_1.info,  Node: File Control,  Next: Reposition Read/Write File Offset,  Prev: Data Definitions for File Control Operations,  Up: Control Operations on Files

6.5.2 File Control
------------------

     struct flock, Type, Implemented
     fcntl(), Function, Implemented
     F_DUPFD, Constant, Implemented
     F_GETFD, Constant, Implemented
     F_GETLK, Constant, Implemented
     F_SETFD, Constant, Implemented
     F_GETFL, Constant, Implemented
     F_SETFL, Constant, Implemented
     F_SETLK, Constant, Implemented
     F_SETLKW, Constant, Implemented
     FD_CLOEXEC, Constant, Implemented
     F_RDLCK, Constant, Implemented
     F_UNLCK, Constant, Implemented
     F_WRLCK, Constant, Implemented
     O_ACCMODE, Constant, Implemented

NOTE: A number of constants are used by both `open' and `fcntl'.
`O_CREAT', `O_EXCL', `O_NOCTTY', `O_TRUNC', `O_APPEND', `O_DSYNC',
`O_NONBLOCK', `O_RSYNC', `O_SYNC', `O_RDONLY', `O_RDWR', and `O_WRONLY'
are also included in another section.  *Note Open a File::.


File: posix1003_1.info,  Node: Reposition Read/Write File Offset,  Next: File Synchronization,  Prev: File Control,  Up: Control Operations on Files

6.5.3 Reposition Read/Write File Offset
---------------------------------------

     lseek(), Function, Implemented
     SEEK_SET, Constant, Implemented
     SEEK_CUR, Constant, Implemented
     SEEK_END, Constant, Implemented


File: posix1003_1.info,  Node: File Synchronization,  Next: Synchronize the State of a File,  Prev: Reposition Read/Write File Offset,  Up: Input and Output Primitives

6.6 File Synchronization
========================

* Menu:

* Synchronize the State of a File::
* Synchronize the Data of a File::


File: posix1003_1.info,  Node: Synchronize the State of a File,  Next: Synchronize the Data of a File,  Prev: File Synchronization,  Up: File Synchronization

6.6.1 Synchronize the State of a File
-------------------------------------

     fsync(), Function, Implemented


File: posix1003_1.info,  Node: Synchronize the Data of a File,  Next: Asynchronous Input and Output,  Prev: Synchronize the State of a File,  Up: File Synchronization

6.6.2 Synchronize the Data of a File
------------------------------------

     fdatasync(), Function, Implemented


File: posix1003_1.info,  Node: Asynchronous Input and Output,  Next: Data Definitions for Asynchronous Input and Output,  Prev: Synchronize the Data of a File,  Up: Input and Output Primitives

6.7 Asynchronous Input and Output
=================================

* Menu:

* Data Definitions for Asynchronous Input and Output::
* Asynchronous Read::
* Asynchronous Write::
* List Directed I/O::
* Retrieve Error Status of Asynchronous I/O Operation::
* Retrieve Return Status of Asynchronous I/O Operation::
* Cancel Asynchronous I/O Request::
* Wait for Asynchronous I/O Request::
* Asynchronous File Synchronization::


File: posix1003_1.info,  Node: Data Definitions for Asynchronous Input and Output,  Next: Asynchronous I/O Control Block,  Prev: Asynchronous Input and Output,  Up: Asynchronous Input and Output

6.7.1 Data Definitions for Asynchronous Input and Output
--------------------------------------------------------

* Menu:

* Asynchronous I/O Control Block::
* Asynchronous I/O Manifest Constants::


File: posix1003_1.info,  Node: Asynchronous I/O Control Block,  Next: Asynchronous I/O Manifest Constants,  Prev: Data Definitions for Asynchronous Input and Output,  Up: Data Definitions for Asynchronous Input and Output

6.7.1.1 Asynchronous I/O Control Block
......................................

     struct aiocb, Type, Untested Implementation


File: posix1003_1.info,  Node: Asynchronous I/O Manifest Constants,  Next: Asynchronous Read,  Prev: Asynchronous I/O Control Block,  Up: Data Definitions for Asynchronous Input and Output

6.7.1.2 Asynchronous I/O Manifest Constants
...........................................

     AIO_CANCELED, Constant, Implemented
     AIO_NOTCANCELED, Constant, Implemented
     AIO_ALLDONE, Constant, Implemented
     LIO_WAIT, Constant, Implemented
     LIO_NOWAIT, Constant, Implemented
     LIO_READ, Constant, Implemented
     LIO_WRITE, Constant, Implemented
     LIO_NOP, Constant, Implemented


File: posix1003_1.info,  Node: Asynchronous Read,  Next: Asynchronous Write,  Prev: Asynchronous I/O Manifest Constants,  Up: Asynchronous Input and Output

6.7.2 Asynchronous Read
-----------------------

     aio_read(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Asynchronous Write,  Next: List Directed I/O,  Prev: Asynchronous Read,  Up: Asynchronous Input and Output

6.7.3 Asynchronous Write
------------------------

     aio_write(), Function, Dummy Implementation


File: posix1003_1.info,  Node: List Directed I/O,  Next: Retrieve Error Status of Asynchronous I/O Operation,  Prev: Asynchronous Write,  Up: Asynchronous Input and Output

6.7.4 List Directed I/O
-----------------------

     lio_listio(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Retrieve Error Status of Asynchronous I/O Operation,  Next: Retrieve Return Status of Asynchronous I/O Operation,  Prev: List Directed I/O,  Up: Asynchronous Input and Output

6.7.5 Retrieve Error Status of Asynchronous I/O Operation
---------------------------------------------------------

     aio_error(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Retrieve Return Status of Asynchronous I/O Operation,  Next: Cancel Asynchronous I/O Request,  Prev: Retrieve Error Status of Asynchronous I/O Operation,  Up: Asynchronous Input and Output

6.7.6 Retrieve Return Status of Asynchronous I/O Operation
----------------------------------------------------------

     aio_return(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Cancel Asynchronous I/O Request,  Next: Wait for Asynchronous I/O Request,  Prev: Retrieve Return Status of Asynchronous I/O Operation,  Up: Asynchronous Input and Output

6.7.7 Cancel Asynchronous I/O Request
-------------------------------------

     aio_cancel(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Wait for Asynchronous I/O Request,  Next: Asynchronous File Synchronization,  Prev: Cancel Asynchronous I/O Request,  Up: Asynchronous Input and Output

6.7.8 Wait for Asynchronous I/O Request
---------------------------------------

     aio_suspend(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Asynchronous File Synchronization,  Next: Device- and Class-Specific Functions,  Prev: Wait for Asynchronous I/O Request,  Up: Asynchronous Input and Output

6.7.9 Asynchronous File Synchronization
---------------------------------------

     aio_fsync(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Device- and Class-Specific Functions,  Next: General Terminal Interface,  Prev: Asynchronous File Synchronization,  Up: Top

7 Device- and Class-Specific Functions
**************************************

* Menu:

* General Terminal Interface::
* General Terminal Interface Control Functions::


File: posix1003_1.info,  Node: General Terminal Interface,  Next: Interface Characteristics,  Prev: Device- and Class-Specific Functions,  Up: Device- and Class-Specific Functions

7.1 General Terminal Interface
==============================

* Menu:

* Interface Characteristics::
* Parameters That Can Be Set::
* Baud Rate Values::


File: posix1003_1.info,  Node: Interface Characteristics,  Next: Opening a Terminal Device File,  Prev: General Terminal Interface,  Up: General Terminal Interface

7.1.1 Interface Characteristics
-------------------------------

* Menu:

* Opening a Terminal Device File::
* Process Groups (TTY)::
* The Controlling Terminal::
* Terminal Access Control::
* Input Processing and Reading Data::
* Canonical Mode Input Processing::
* Noncanonical Mode Input Processing::
* Writing Data and Output Processing::
* Special Characters::
* Modem Disconnect::
* Closing a Terminal Device File::


File: posix1003_1.info,  Node: Opening a Terminal Device File,  Next: Process Groups (TTY),  Prev: Interface Characteristics,  Up: Interface Characteristics

7.1.1.1 Opening a Terminal Device File
......................................


File: posix1003_1.info,  Node: Process Groups (TTY),  Next: The Controlling Terminal,  Prev: Opening a Terminal Device File,  Up: Interface Characteristics

7.1.1.2 Process Groups (TTY)
............................


File: posix1003_1.info,  Node: The Controlling Terminal,  Next: Terminal Access Control,  Prev: Process Groups (TTY),  Up: Interface Characteristics

7.1.1.3 The Controlling Terminal
................................


File: posix1003_1.info,  Node: Terminal Access Control,  Next: Input Processing and Reading Data,  Prev: The Controlling Terminal,  Up: Interface Characteristics

7.1.1.4 Terminal Access Control
...............................


File: posix1003_1.info,  Node: Input Processing and Reading Data,  Next: Canonical Mode Input Processing,  Prev: Terminal Access Control,  Up: Interface Characteristics

7.1.1.5 Input Processing and Reading Data
.........................................


File: posix1003_1.info,  Node: Canonical Mode Input Processing,  Next: Noncanonical Mode Input Processing,  Prev: Input Processing and Reading Data,  Up: Interface Characteristics

7.1.1.6 Canonical Mode Input Processing
.......................................


File: posix1003_1.info,  Node: Noncanonical Mode Input Processing,  Next: Writing Data and Output Processing,  Prev: Canonical Mode Input Processing,  Up: Interface Characteristics

7.1.1.7 Noncanonical Mode Input Processing
..........................................

   * Case A - MIN > 0 and TIME > 0

   * Case B - MIN > 0 and TIME = 0

   * Case C - MIN = 0 and TIME > 0

   * Case D - MIN = 0 and TIME = 0



File: posix1003_1.info,  Node: Writing Data and Output Processing,  Next: Special Characters,  Prev: Noncanonical Mode Input Processing,  Up: Interface Characteristics

7.1.1.8 Writing Data and Output Processing
..........................................


File: posix1003_1.info,  Node: Special Characters,  Next: Modem Disconnect,  Prev: Writing Data and Output Processing,  Up: Interface Characteristics

7.1.1.9 Special Characters
..........................

     INTR, Constant, Implemented
     QUIT, Constant, Implemented
     ERASE, Constant, Implemented
     KILL, Constant, Implemented
     EOF, Constant, Implemented
     NL, Constant, Implemented
     EOL, Constant, Implemented
     SUSP, Constant, Implemented
     STOP, Constant, Implemented
     START, Constant, Implemented
     CR, Constant, Implemented


File: posix1003_1.info,  Node: Modem Disconnect,  Next: Closing a Terminal Device File,  Prev: Special Characters,  Up: Interface Characteristics

7.1.1.10 Modem Disconnect
.........................


File: posix1003_1.info,  Node: Closing a Terminal Device File,  Next: Parameters That Can Be Set,  Prev: Modem Disconnect,  Up: Interface Characteristics

7.1.1.11 Closing a Terminal Device File
.......................................


File: posix1003_1.info,  Node: Parameters That Can Be Set,  Next: termios Structure,  Prev: Closing a Terminal Device File,  Up: General Terminal Interface

7.1.2 Parameters That Can Be Set
--------------------------------

* Menu:

* termios Structure::
* Input Modes::
* Output Modes::
* Control Modes::
* Local Modes::
* Special Control Characters::


File: posix1003_1.info,  Node: termios Structure,  Next: Input Modes,  Prev: Parameters That Can Be Set,  Up: Parameters That Can Be Set

7.1.2.1 termios Structure
.........................

     tcflag_t, Type, Implemented
     cc_t, Type, Implemented
     struct termios, Type, Implemented


File: posix1003_1.info,  Node: Input Modes,  Next: Output Modes,  Prev: termios Structure,  Up: Parameters That Can Be Set

7.1.2.2 Input Modes
...................

     BRKINT, Constant, Implemented
     ICRNL, Constant, Implemented
     IGNBREAK, Constant, Unimplemented
     IGNCR, Constant, Implemented
     IGNPAR, Constant, Implemented
     INLCR, Constant, Implemented
     INPCK, Constant, Implemented
     ISTRIP, Constant, Implemented
     IXOFF, Constant, Implemented
     IXON, Constant, Implemented
     PARMRK, Constant, Implemented


File: posix1003_1.info,  Node: Output Modes,  Next: Control Modes,  Prev: Input Modes,  Up: Parameters That Can Be Set

7.1.2.3 Output Modes
....................

     OPOST, Constant, Implemented


File: posix1003_1.info,  Node: Control Modes,  Next: Local Modes,  Prev: Output Modes,  Up: Parameters That Can Be Set

7.1.2.4 Control Modes
.....................

     CLOCAL, Constant, Implemented
     CREAD, Constant, Implemented
     CSIZE, Constant, Implemented
     CS5, Constant, Implemented
     CS6, Constant, Implemented
     CS7, Constant, Implemented
     CS8, Constant, Implemented
     CSTOPB, Constant, Implemented
     HUPCL, Constant, Implemented
     PARENB, Constant, Implemented
     PARODD, Constant, Implemented


File: posix1003_1.info,  Node: Local Modes,  Next: Special Control Characters,  Prev: Control Modes,  Up: Parameters That Can Be Set

7.1.2.5 Local Modes
...................

     ECHO, Constant, Implemented
     ECHOE, Constant, Implemented
     ECHOK, Constant, Implemented
     ECHONL, Constant, Implemented
     ICANON, Constant, Implemented
     IEXTEN, Constant, Implemented
     ISIG, Constant, Implemented
     NOFLSH, Constant, Implemented
     TOSTOP, Constant, Implemented


File: posix1003_1.info,  Node: Special Control Characters,  Next: Baud Rate Values,  Prev: Local Modes,  Up: Parameters That Can Be Set

7.1.2.6 Special Control Characters
..................................

     VEOF, Constant, Implemented
     VEOL, Constant, Implemented
     VERASE, Constant, Implemented
     VINTR, Constant, Implemented
     VKILL, Constant, Implemented
     VQUIT, Constant, Implemented
     VSUSP, Constant, Implemented
     VSTART, Constant, Implemented
     VSTOP, Constant, Implemented
     VMIN, Constant, Implemented
     VTIME, Constant, Implemented


File: posix1003_1.info,  Node: Baud Rate Values,  Next: Baud Rate Functions,  Prev: Special Control Characters,  Up: General Terminal Interface

7.1.3 Baud Rate Values
----------------------

* Menu:

* Baud Rate Functions::

     B0, Constant, Implemented
     B50, Constant, Implemented
     B75, Constant, Implemented
     B110, Constant, Implemented
     B134, Constant, Implemented
     B150, Constant, Implemented
     B200, Constant, Implemented
     B300, Constant, Implemented
     B600, Constant, Implemented
     B1200, Constant, Implemented
     B1800, Constant, Implemented
     B2400, Constant, Implemented
     B4800, Constant, Implemented
     B9600, Constant, Implemented
     B19200, Constant, Implemented
     B38400, Constant, Implemented


File: posix1003_1.info,  Node: Baud Rate Functions,  Next: General Terminal Interface Control Functions,  Prev: Baud Rate Values,  Up: Baud Rate Values

7.1.3.1 Baud Rate Functions
...........................

     cfgetospeed(), Function, Implemented
     cfsetospeed(), Function, Implemented
     cfgetispeed(), Function, Implemented
     cfsetispeed(), Function, Implemented
     TCIFLUSH, Constant, Implemented
     TCOFLUSH, Constant, Implemented
     TCIOFLUSH, Constant, Implemented
     TCOOFF, Constant, Implemented
     TCOON, Constant, Implemented
     TCIOOFF, Constant, Implemented
     TCIOON, Constant, Implemented


File: posix1003_1.info,  Node: General Terminal Interface Control Functions,  Next: Get and Set State,  Prev: Baud Rate Functions,  Up: Device- and Class-Specific Functions

7.2 General Terminal Interface Control Functions
================================================

* Menu:

* Get and Set State::
* Line Control Functions::
* Get Foreground Process Group ID::
* Set Foreground Process Group ID::


File: posix1003_1.info,  Node: Get and Set State,  Next: Line Control Functions,  Prev: General Terminal Interface Control Functions,  Up: General Terminal Interface Control Functions

7.2.1 Get and Set State
-----------------------

     tcgetattr(), Function, Implemented
     tcsetattr(), Function, Implemented


File: posix1003_1.info,  Node: Line Control Functions,  Next: Get Foreground Process Group ID,  Prev: Get and Set State,  Up: General Terminal Interface Control Functions

7.2.2 Line Control Functions
----------------------------

     tcsendbreak(), Function, Dummy Implementation
     tcdrain(), Function, Implemented
     tcflush(), Function, Dummy Implementation
     tcflow(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Get Foreground Process Group ID,  Next: Set Foreground Process Group ID,  Prev: Line Control Functions,  Up: General Terminal Interface Control Functions

7.2.3 Get Foreground Process Group ID
-------------------------------------

     tcgetprgrp(), Function, Implemented, SUSP


File: posix1003_1.info,  Node: Set Foreground Process Group ID,  Next: Language-Specific Services for the C Programming Language,  Prev: Get Foreground Process Group ID,  Up: General Terminal Interface Control Functions

7.2.4 Set Foreground Process Group ID
-------------------------------------

     tcsetprgrp(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Language-Specific Services for the C Programming Language,  Next: Referenced C Language Routines,  Prev: Set Foreground Process Group ID,  Up: Top

8 Language-Specific Services for the C Programming Language
***********************************************************

* Menu:

* Referenced C Language Routines::
* C Language Input/Output Functions::
* Other C Language Functions::


File: posix1003_1.info,  Node: Referenced C Language Routines,  Next: Extensions to Time Functions,  Prev: Language-Specific Services for the C Programming Language,  Up: Language-Specific Services for the C Programming Language

8.1 Referenced C Language Routines
==================================

* Menu:

* Extensions to Time Functions::
* Extensions to setlocale Function::

ANSI C Section 4.2 -- Diagnostics

     assert(), Function, Implemented

ANSI C Section 4.3 -- Character Handling

     isalnum(), Function, Implemented
     isalpha(), Function, Implemented
     iscntrl(), Function, Implemented
     isdigit(), Function, Implemented
     isgraph(), Function, Implemented
     islower(), Function, Implemented
     isprint(), Function, Implemented
     ispunct(), Function, Implemented
     isspace(), Function, Implemented
     isupper(), Function, Implemented
     isxdigit(), Function, Implemented
     tolower(), Function, Implemented
     toupper(), Function, Implemented

ANSI C Section 4.4 -- Localization

     setlocale(), Function, Implemented

ANSI C Section 4.5 -- Mathematics

     acos(), Function, Implemented
     asin(), Function, Implemented
     atan(), Function, Implemented
     atan2(), Function, Implemented
     cos(), Function, Implemented
     sin(), Function, Implemented
     tan(), Function, Implemented
     cosh(), Function, Implemented
     sinh(), Function, Implemented
     tanh(), Function, Implemented
     exp(), Function, Implemented
     frexp(), Function, Implemented
     ldexp(), Function, Implemented
     log(), Function, Implemented
     log10(), Function, Implemented
     modf(), Function, Implemented
     pow(), Function, Implemented
     sqrt(), Function, Implemented
     ceil(), Function, Implemented
     fabs(), Function, Implemented
     floor(), Function, Implemented
     fmod(), Function, Implemented

ANSI C Section 4.6 -- Non-Local Jumps

     setjmp(), Function, Implemented
     longjmp(), Function, Implemented

ANSI C Section 4.9 -- Input/Output

     FILE, Type, Implemented
     clearerr(), Function, Implemented
     fclose(), Function, Implemented
     feof(), Function, Implemented
     ferror(), Function, Implemented
     fflush(), Function, Implemented
     fgetc(), Function, Implemented
     fgets(), Function, Implemented
     fopen(), Function, Implemented
     fputc(), Function, Implemented
     fputs(), Function, Implemented
     fread(), Function, Implemented
     freopen(), Function, Implemented
     fseek(), Function, Implemented
     ftell(), Function, Implemented
     fwrite(), Function, Implemented
     getc(), Function, Implemented
     getchar(), Function, Implemented
     gets(), Function, Implemented
     perror(), Function, Implemented
     printf(), Function, Implemented
     fprintf(), Function, Implemented
     sprintf(), Function, Implemented
     putc(), Function, Implemented
     putchar(), Function, Implemented
     puts(), Function, Implemented
     remove(), Function, Implemented
     rewind(), Function, Implemented
     scanf(), Function, Implemented
     fscanf(), Function, Implemented
     sscanf(), Function, Implemented
     setbuf(), Function, Implemented
     tmpfile(), Function, Implemented
     tmpnam(), Function, Implemented
     ungetc(), Function, Implemented

NOTE: `rename' is also included in another section.  *note Rename a
File::.

ANSI C Section 4.10 -- General Utilities

     abs(), Function, Implemented
     atof(), Function, Implemented
     atoi(), Function, Implemented
     atol(), Function, Implemented
     rand(), Function, Implemented
     srand(), Function, Implemented
     calloc(), Function, Implemented
     free(), Function, Implemented
     malloc(), Function, Implemented
     realloc(), Function, Implemented
     abort(), Function, Implemented
     exit(), Function, Implemented
     bsearch(), Function, Implemented
     qsort(), Function, Implemented

NOTE: `getenv' is also included in another section.  *note Environment
Access::.

ANSI C Section 4.11 -- String Handling

     strcpy(), Function, Implemented
     strncpy(), Function, Implemented
     strcat(), Function, Implemented
     strncat(), Function, Implemented
     strcmp(), Function, Implemented
     strncmp(), Function, Implemented
     strchr(), Function, Implemented
     strcspn(), Function, Implemented
     strpbrk(), Function, Implemented
     strrchr(), Function, Implemented
     strspn(), Function, Implemented
     strstr(), Function, Implemented
     strtok(), Function, Implemented
     strlen(), Function, Implemented

ANSI C Section 4.12 -- Date and Time Handling

     asctime(), Function, Implemented
     ctime(), Function, Implemented
     gmtime(), Function, Implemented
     localtime(), Function, Implemented
     mktime(), Function, Implemented
     strftime(), Function, Implemented

NOTE: RTEMS has no notion of time zones.

NOTE: `time' is also included in another section.  *note Get System
Time::.

From Surrounding Text

     EXIT_SUCCESS, Constant, Implemented
     EXIT_FAILURE, Constant, Implemented


File: posix1003_1.info,  Node: Extensions to Time Functions,  Next: Extensions to setlocale Function,  Prev: Referenced C Language Routines,  Up: Referenced C Language Routines

8.1.1 Extensions to Time Functions
----------------------------------


File: posix1003_1.info,  Node: Extensions to setlocale Function,  Next: C Language Input/Output Functions,  Prev: Extensions to Time Functions,  Up: Referenced C Language Routines

8.1.2 Extensions to setlocale Function
--------------------------------------

     LC_CTYPE, Constant, Implemented
     LC_COLLATE, Constant, Implemented
     LC_TIME, Constant, Implemented
     LC_NUMERIC, Constant, Implemented
     LC_MONETARY, Constant, Implemented
     LC_ALL, Constant, Implemented


File: posix1003_1.info,  Node: C Language Input/Output Functions,  Next: Map a Stream Pointer to a File Descriptor,  Prev: Extensions to setlocale Function,  Up: Language-Specific Services for the C Programming Language

8.2 C Language Input/Output Functions
=====================================

* Menu:

* Map a Stream Pointer to a File Descriptor::
* Open a Stream on a File Descriptor::
* Interactions of Other FILE-Type C Functions::
* Operations on Files - the remove Function::
* Temporary File Name - the tmpnam Function::
* Stdio Locking Functions::
* Stdio With Explicit Client Locking::


File: posix1003_1.info,  Node: Map a Stream Pointer to a File Descriptor,  Next: Open a Stream on a File Descriptor,  Prev: C Language Input/Output Functions,  Up: C Language Input/Output Functions

8.2.1 Map a Stream Pointer to a File Descriptor
-----------------------------------------------

     fileno(), Function, Implemented
     STDIN_FILENO, Constant, Implemented
     STDOUT_FILENO, Constant, Implemented
     STDERR_FILENO, Constant, Implemented


File: posix1003_1.info,  Node: Open a Stream on a File Descriptor,  Next: Interactions of Other FILE-Type C Functions,  Prev: Map a Stream Pointer to a File Descriptor,  Up: C Language Input/Output Functions

8.2.2 Open a Stream on a File Descriptor
----------------------------------------

     fdopen(), Function, Implemented


File: posix1003_1.info,  Node: Interactions of Other FILE-Type C Functions,  Next: Operations on Files - the remove Function,  Prev: Open a Stream on a File Descriptor,  Up: C Language Input/Output Functions

8.2.3 Interactions of Other FILE-Type C Functions
-------------------------------------------------


File: posix1003_1.info,  Node: Operations on Files - the remove Function,  Next: Temporary File Name - the tmpnam Function,  Prev: Interactions of Other FILE-Type C Functions,  Up: C Language Input/Output Functions

8.2.4 Operations on Files - the remove Function
-----------------------------------------------


File: posix1003_1.info,  Node: Temporary File Name - the tmpnam Function,  Next: Stdio Locking Functions,  Prev: Operations on Files - the remove Function,  Up: C Language Input/Output Functions

8.2.5 Temporary File Name - the tmpnam Function
-----------------------------------------------


File: posix1003_1.info,  Node: Stdio Locking Functions,  Next: Stdio With Explicit Client Locking,  Prev: Temporary File Name - the tmpnam Function,  Up: C Language Input/Output Functions

8.2.6 Stdio Locking Functions
-----------------------------

     flockfile(), Function, Unimplemented
     ftrylockfile(), Function, Unimplemented
     funlockfile(), Function, Unimplemented


File: posix1003_1.info,  Node: Stdio With Explicit Client Locking,  Next: Other C Language Functions,  Prev: Stdio Locking Functions,  Up: C Language Input/Output Functions

8.2.7 Stdio With Explicit Client Locking
----------------------------------------

     getc_unlocked(), Function, Unimplemented
     getchar_unlocked(), Function, Unimplemented
     putc_unlocked(), Function, Unimplemented
     putchar_unlocked(), Function, Unimplemented


File: posix1003_1.info,  Node: Other C Language Functions,  Next: Nonlocal Jumps,  Prev: Stdio With Explicit Client Locking,  Up: Language-Specific Services for the C Programming Language

8.3 Other C Language Functions
==============================

* Menu:

* Nonlocal Jumps::
* Set Time Zone::
* Find String Token::
* ASCII Time Representation::
* Current Time Representation::
* Coordinated Universal Time::
* Local Time::
* Pseudo-Random Sequence Generation Functions::


File: posix1003_1.info,  Node: Nonlocal Jumps,  Next: Set Time Zone,  Prev: Other C Language Functions,  Up: Other C Language Functions

8.3.1 Nonlocal Jumps
--------------------

     sigjmp_buf, Type, Implemented
     sigsetjmp(), Function, Implemented
     siglongjmp(), Function, Implemented


File: posix1003_1.info,  Node: Set Time Zone,  Next: Find String Token,  Prev: Nonlocal Jumps,  Up: Other C Language Functions

8.3.2 Set Time Zone
-------------------

     tzset(), Function, Unimplemented


File: posix1003_1.info,  Node: Find String Token,  Next: ASCII Time Representation,  Prev: Set Time Zone,  Up: Other C Language Functions

8.3.3 Find String Token
-----------------------

     strtok_r(), Function, Implemented


File: posix1003_1.info,  Node: ASCII Time Representation,  Next: Current Time Representation,  Prev: Find String Token,  Up: Other C Language Functions

8.3.4 ASCII Time Representation
-------------------------------

     asctime_r(), Function, Implemented


File: posix1003_1.info,  Node: Current Time Representation,  Next: Coordinated Universal Time,  Prev: ASCII Time Representation,  Up: Other C Language Functions

8.3.5 Current Time Representation
---------------------------------

     ctime_r(), Function, Implemented


File: posix1003_1.info,  Node: Coordinated Universal Time,  Next: Local Time,  Prev: Current Time Representation,  Up: Other C Language Functions

8.3.6 Coordinated Universal Time
--------------------------------

     gmtime_r(), Function, Implemented


File: posix1003_1.info,  Node: Local Time,  Next: Pseudo-Random Sequence Generation Functions,  Prev: Coordinated Universal Time,  Up: Other C Language Functions

8.3.7 Local Time
----------------

     localtime_r(), Function, Implemented


File: posix1003_1.info,  Node: Pseudo-Random Sequence Generation Functions,  Next: System Databases,  Prev: Local Time,  Up: Other C Language Functions

8.3.8 Pseudo-Random Sequence Generation Functions
-------------------------------------------------

     rand_r(), Function, Implemented


File: posix1003_1.info,  Node: System Databases,  Next: System Databases Section,  Prev: Pseudo-Random Sequence Generation Functions,  Up: Top

9 System Databases
******************

* Menu:

* System Databases Section::
* Database Access::


File: posix1003_1.info,  Node: System Databases Section,  Next: Database Access,  Prev: System Databases,  Up: System Databases

9.1 System Databases Section
============================


File: posix1003_1.info,  Node: Database Access,  Next: Group Database Access,  Prev: System Databases Section,  Up: System Databases

9.2 Database Access
===================

* Menu:

* Group Database Access::
* User Database Access::


File: posix1003_1.info,  Node: Group Database Access,  Next: User Database Access,  Prev: Database Access,  Up: Database Access

9.2.1 Group Database Access
---------------------------

     struct group, Type, Implemented
     getgrgid(), Function, Implemented
     getgrgid_r(), Function, Implemented
     getgrname(), Function, Implemented
     getgrnam_r(), Function, Implemented

NOTE: Creates /etc/group if none exists.


File: posix1003_1.info,  Node: User Database Access,  Next: Data Interchange Format,  Prev: Group Database Access,  Up: Database Access

9.2.2 User Database Access
--------------------------

     struct passwd, Type, Implemented
     getpwuid(), Function, Implemented
     getpwuid_r(), Function, Implemented
     getpwnam(), Function, Implemented
     getpwnam_r(), Function, Implemented

NOTE: Creates /etc/passwd if none exists.


File: posix1003_1.info,  Node: Data Interchange Format,  Next: Archive/Interchange File Format,  Prev: User Database Access,  Up: Top

10 Data Interchange Format
**************************

* Menu:

* Archive/Interchange File Format::


File: posix1003_1.info,  Node: Archive/Interchange File Format,  Next: Extended tar Format,  Prev: Data Interchange Format,  Up: Data Interchange Format

10.1 Archive/Interchange File Format
====================================

* Menu:

* Extended tar Format::
* Extended cpio Format::
* Multiple Volumes::


File: posix1003_1.info,  Node: Extended tar Format,  Next: Extended cpio Format,  Prev: Archive/Interchange File Format,  Up: Archive/Interchange File Format

10.1.1 Extended tar Format
--------------------------

     tar format, Type, Unimplemented
     TMAGIC, Constant, Unimplemented
     TMAGLEN, Constant, Unimplemented
     TVERSION, Constant, Unimplemented
     TVERSLEN, Constant, Unimplemented
     REGTYPE, Constant, Unimplemented
     AREGTYPE, Constant, Unimplemented
     LNKTYPE, Constant, Unimplemented
     SYMTYPE, Constant, Unimplemented
     CHRTYPE, Constant, Unimplemented
     BLKTYPE, Constant, Unimplemented
     DIRTYPE, Constant, Unimplemented
     FIFOTYPE, Constant, Unimplemented
     CONTTYPE, Constant, Unimplemented
     TSUID, Constant, Unimplemented
     TSGID, Constant, Unimplemented
     TSVTX, Constant, Unimplemented
     TUREAD, Constant, Unimplemented
     TUWRITE, Constant, Unimplemented
     TUEXEC, Constant, Unimplemented
     TGREAD, Constant, Unimplemented
     TGWRITE, Constant, Unimplemented
     TGEXEC, Constant, Unimplemented
     TOREAD, Constant, Unimplemented
     TOWRITE, Constant, Unimplemented
     TOEXEC, Constant, Unimplemented

NOTE: Requires <tar.h> which is not in newlib.


File: posix1003_1.info,  Node: Extended cpio Format,  Next: Multiple Volumes,  Prev: Extended tar Format,  Up: Archive/Interchange File Format

10.1.2 Extended cpio Format
---------------------------

     cpio format, Type, Unimplemented
     C_IRUSER, Constant, Unimplemented
     C_IWUSER, Constant, Unimplemented
     C_IXUSER, Constant, Unimplemented
     C_IRGRP, Constant, Unimplemented
     C_IWGRP, Constant, Unimplemented
     C_IXGRP, Constant, Unimplemented
     C_IROTH, Constant, Unimplemented
     C_IWOTH, Constant, Unimplemented
     C_IXOTH, Constant, Unimplemented
     C_ISUID, Constant, Unimplemented
     C_ISGID, Constant, Unimplemented
     C_ISVTX, Constant, Unimplemented

NOTE: POSIX does not require a header file or structure.  RedHat Linux
5.0 does not have a <cpio.h> although Solaris 2.6 does.


File: posix1003_1.info,  Node: Multiple Volumes,  Next: Synchronization,  Prev: Extended cpio Format,  Up: Archive/Interchange File Format

10.1.3 Multiple Volumes
-----------------------


File: posix1003_1.info,  Node: Synchronization,  Next: Semaphore Characteristics,  Prev: Multiple Volumes,  Up: Top

11 Synchronization
******************

* Menu:

* Semaphore Characteristics::
* Semaphore Functions::
* Mutexes::
* Condition Variables::


File: posix1003_1.info,  Node: Semaphore Characteristics,  Next: Semaphore Functions,  Prev: Synchronization,  Up: Synchronization

11.1 Semaphore Characteristics
==============================

NOTE: Semaphores are implemented but only unnamed semaphores are
currently tested.

     sem_t, Type, Implemented


File: posix1003_1.info,  Node: Semaphore Functions,  Next: Initialize an Unnamed Semaphore,  Prev: Semaphore Characteristics,  Up: Synchronization

11.2 Semaphore Functions
========================

* Menu:

* Initialize an Unnamed Semaphore::
* Destroy an Unnamed Semaphore::
* Initialize/Open a Named Semaphore::
* Close a Named Semaphore::
* Remove a Named Semaphore::
* Lock a Semaphore::
* Unlock a Semaphore::
* Get the Value of a Semaphore::


File: posix1003_1.info,  Node: Initialize an Unnamed Semaphore,  Next: Destroy an Unnamed Semaphore,  Prev: Semaphore Functions,  Up: Semaphore Functions

11.2.1 Initialize an Unnamed Semaphore
--------------------------------------

     sem_init(), Function, Implemented
     SEM_FAILED, Constant, Implemented


File: posix1003_1.info,  Node: Destroy an Unnamed Semaphore,  Next: Initialize/Open a Named Semaphore,  Prev: Initialize an Unnamed Semaphore,  Up: Semaphore Functions

11.2.2 Destroy an Unnamed Semaphore
-----------------------------------

     sem_destroy(), Function, Implemented


File: posix1003_1.info,  Node: Initialize/Open a Named Semaphore,  Next: Close a Named Semaphore,  Prev: Destroy an Unnamed Semaphore,  Up: Semaphore Functions

11.2.3 Initialize/Open a Named Semaphore
----------------------------------------

     sem_open(), Function, Implemented


File: posix1003_1.info,  Node: Close a Named Semaphore,  Next: Remove a Named Semaphore,  Prev: Initialize/Open a Named Semaphore,  Up: Semaphore Functions

11.2.4 Close a Named Semaphore
------------------------------

     sem_close(), Function, Implemented


File: posix1003_1.info,  Node: Remove a Named Semaphore,  Next: Lock a Semaphore,  Prev: Close a Named Semaphore,  Up: Semaphore Functions

11.2.5 Remove a Named Semaphore
-------------------------------

     sem_unlink(), Function, Implemented


File: posix1003_1.info,  Node: Lock a Semaphore,  Next: Unlock a Semaphore,  Prev: Remove a Named Semaphore,  Up: Semaphore Functions

11.2.6 Lock a Semaphore
-----------------------

     sem_wait(), Function, Implemented
     sem_trywait(), Function, Implemented


File: posix1003_1.info,  Node: Unlock a Semaphore,  Next: Get the Value of a Semaphore,  Prev: Lock a Semaphore,  Up: Semaphore Functions

11.2.7 Unlock a Semaphore
-------------------------

     sem_post(), Function, Implemented


File: posix1003_1.info,  Node: Get the Value of a Semaphore,  Next: Mutexes,  Prev: Unlock a Semaphore,  Up: Semaphore Functions

11.2.8 Get the Value of a Semaphore
-----------------------------------

     sem_getvalue(), Function, Implemented


File: posix1003_1.info,  Node: Mutexes,  Next: Mutex Initialization Attributes,  Prev: Get the Value of a Semaphore,  Up: Synchronization

11.3 Mutexes
============

* Menu:

* Mutex Initialization Attributes::
* Initializing and Destroying a Mutex::
* Locking and Unlocking a Mutex::


File: posix1003_1.info,  Node: Mutex Initialization Attributes,  Next: Initializing and Destroying a Mutex,  Prev: Mutexes,  Up: Mutexes

11.3.1 Mutex Initialization Attributes
--------------------------------------

     pthread_mutexattr_init(), Function, Implemented
     pthread_mutexattr_destroy(), Function, Implemented
     pthread_mutexattr_getpshared(), Function, Implemented
     pthread_mutexattr_setpshared(), Function, Implemented
     PTHREAD_PROCESS_SHARED, Constant, Implemented
     PTHREAD_PROCESS_PRIVATE, Constant, Implemented


File: posix1003_1.info,  Node: Initializing and Destroying a Mutex,  Next: Locking and Unlocking a Mutex,  Prev: Mutex Initialization Attributes,  Up: Mutexes

11.3.2 Initializing and Destroying a Mutex
------------------------------------------

     pthread_mutex_init(), Function, Implemented
     pthread_mutex_destroy(), Function, Implemented
     PTHREAD_MUTEX_INITIALIZER, Constant, Implemented


File: posix1003_1.info,  Node: Locking and Unlocking a Mutex,  Next: Condition Variables,  Prev: Initializing and Destroying a Mutex,  Up: Mutexes

11.3.3 Locking and Unlocking a Mutex
------------------------------------

     pthread_mutex_lock(), Function, Implemented
     pthread_mutex_trylock(), Function, Implemented
     pthread_mutex_unlock(), Function, Implemented


File: posix1003_1.info,  Node: Condition Variables,  Next: Condition Variable Initialization Attributes,  Prev: Locking and Unlocking a Mutex,  Up: Synchronization

11.4 Condition Variables
========================

* Menu:

* Condition Variable Initialization Attributes::
* Initialization and Destroying Condition Variables::
* Broadcasting and Signaling a Condition::
* Waiting on a Condition::


File: posix1003_1.info,  Node: Condition Variable Initialization Attributes,  Next: Initialization and Destroying Condition Variables,  Prev: Condition Variables,  Up: Condition Variables

11.4.1 Condition Variable Initialization Attributes
---------------------------------------------------

     pthread_condattr_init(), Function, Implemented
     pthread_condattr_destroy(), Function, Implemented
     pthread_condattr_getpshared(), Function, Implemented
     pthread_condattr_setpshared(), Function, Implemented


File: posix1003_1.info,  Node: Initialization and Destroying Condition Variables,  Next: Broadcasting and Signaling a Condition,  Prev: Condition Variable Initialization Attributes,  Up: Condition Variables

11.4.2 Initialization and Destroying Condition Variables
--------------------------------------------------------

     pthread_cond_init(), Function, Implemented
     pthread_cond_destroy(), Function, Implemented
     PTHREAD_COND_INITIALIZER, Constant, Implemented


File: posix1003_1.info,  Node: Broadcasting and Signaling a Condition,  Next: Waiting on a Condition,  Prev: Initialization and Destroying Condition Variables,  Up: Condition Variables

11.4.3 Broadcasting and Signaling a Condition
---------------------------------------------

     pthread_cond_signal(), Function, Implemented
     pthread_cond_broadcast(), Function, Implemented


File: posix1003_1.info,  Node: Waiting on a Condition,  Next: Memory Management,  Prev: Broadcasting and Signaling a Condition,  Up: Condition Variables

11.4.4 Waiting on a Condition
-----------------------------

     pthread_cond_wait(), Function, Implemented
     pthread_cond_timedwait(), Function, Implemented


File: posix1003_1.info,  Node: Memory Management,  Next: Memory Locking Functions,  Prev: Waiting on a Condition,  Up: Top

12 Memory Management
********************

* Menu:

* Memory Locking Functions::
* Memory Mapping Functions::
* Shared Memory Functions::


File: posix1003_1.info,  Node: Memory Locking Functions,  Next: Lock/Unlock the Address Space of a Process,  Prev: Memory Management,  Up: Memory Management

12.1 Memory Locking Functions
=============================

* Menu:

* Lock/Unlock the Address Space of a Process::
* Lock/Unlock a Rand of Process Address Space::


File: posix1003_1.info,  Node: Lock/Unlock the Address Space of a Process,  Next: Lock/Unlock a Rand of Process Address Space,  Prev: Memory Locking Functions,  Up: Memory Locking Functions

12.1.1 Lock/Unlock the Address Space of a Process
-------------------------------------------------

     mlockall(), Function, Unimplemented
     munlockall(), Function, Unimplemented
     MCL_CURRENT, Constant, Unimplemented
     MCL_FUTURE, Constant,  Unimplemented


File: posix1003_1.info,  Node: Lock/Unlock a Rand of Process Address Space,  Next: Memory Mapping Functions,  Prev: Lock/Unlock the Address Space of a Process,  Up: Memory Locking Functions

12.1.2 Lock/Unlock a Rand of Process Address Space
--------------------------------------------------

     mlock(), Function, Unimplemented
     munlock(), Function, Unimplemented


File: posix1003_1.info,  Node: Memory Mapping Functions,  Next: Map Process Addresses to a Memory Object,  Prev: Lock/Unlock a Rand of Process Address Space,  Up: Memory Management

12.2 Memory Mapping Functions
=============================

* Menu:

* Map Process Addresses to a Memory Object::
* Unmap Previously Mapped Addresses::
* Change Memory Protection::
* Memory Object Synchronization::


File: posix1003_1.info,  Node: Map Process Addresses to a Memory Object,  Next: Unmap Previously Mapped Addresses,  Prev: Memory Mapping Functions,  Up: Memory Mapping Functions

12.2.1 Map Process Addresses to a Memory Object
-----------------------------------------------

     mmap(), Function, Unimplemented
     PROT_READ, Constant,  Unimplemented
     PROT_WRITE, Constant,  Unimplemented
     PROT_EXEC, Constant,  Unimplemented
     PROT_NONE, Constant,  Unimplemented
     MAP_SHARED, Constant,  Unimplemented
     MAP_PRIVATE, Constant,  Unimplemented
     MAP_FIXED, Constant,  Unimplemented


File: posix1003_1.info,  Node: Unmap Previously Mapped Addresses,  Next: Change Memory Protection,  Prev: Map Process Addresses to a Memory Object,  Up: Memory Mapping Functions

12.2.2 Unmap Previously Mapped Addresses
----------------------------------------

     munmap(), Function, Unimplemented


File: posix1003_1.info,  Node: Change Memory Protection,  Next: Memory Object Synchronization,  Prev: Unmap Previously Mapped Addresses,  Up: Memory Mapping Functions

12.2.3 Change Memory Protection
-------------------------------

     mprotect(), Function, Unimplemented


File: posix1003_1.info,  Node: Memory Object Synchronization,  Next: Shared Memory Functions,  Prev: Change Memory Protection,  Up: Memory Mapping Functions

12.2.4 Memory Object Synchronization
------------------------------------

     msync(), Function, Unimplemented, Unimplemented
     MS_ASYNC, Constant, Unimplemented
     MS_SYNC, Constant,  Unimplemented
     MS_INVALIDATE, Constant,  Unimplemented


File: posix1003_1.info,  Node: Shared Memory Functions,  Next: Open a Shared Memory Object,  Prev: Memory Object Synchronization,  Up: Memory Management

12.3 Shared Memory Functions
============================

* Menu:

* Open a Shared Memory Object::
* Remove a Shared Memory Object::


File: posix1003_1.info,  Node: Open a Shared Memory Object,  Next: Remove a Shared Memory Object,  Prev: Shared Memory Functions,  Up: Shared Memory Functions

12.3.1 Open a Shared Memory Object
----------------------------------

     shm_open(), Function, Unimplemented


File: posix1003_1.info,  Node: Remove a Shared Memory Object,  Next: Execution Scheduling,  Prev: Open a Shared Memory Object,  Up: Shared Memory Functions

12.3.2 Remove a Shared Memory Object
------------------------------------

     shm_unlink(), Function, Unimplemented


File: posix1003_1.info,  Node: Execution Scheduling,  Next: Scheduling Parameters,  Prev: Remove a Shared Memory Object,  Up: Top

13 Execution Scheduling
***********************

* Menu:

* Scheduling Parameters::
* Scheduling Policies::
* Process Scheduling Functions::
* Thread Scheduling::
* Thread Scheduling Functions::
* Synchronization Scheduling::


File: posix1003_1.info,  Node: Scheduling Parameters,  Next: Scheduling Policies,  Prev: Execution Scheduling,  Up: Execution Scheduling

13.1 Scheduling Parameters
==========================

     struct sched_param, Type, Implemented


File: posix1003_1.info,  Node: Scheduling Policies,  Next: SCHED_FIFO,  Prev: Scheduling Parameters,  Up: Execution Scheduling

13.2 Scheduling Policies
========================

* Menu:

* SCHED_FIFO::
* SCHED_RR::
* SCHED_OTHER::

     SCHED_FIFO, Constant, Implemented
     SCHED_RR, Constant, Implemented
     SCHED_OTHER, Constant, Implemented

NOTE: RTEMS adds SCHED_SPORADIC.


File: posix1003_1.info,  Node: SCHED_FIFO,  Next: SCHED_RR,  Prev: Scheduling Policies,  Up: Scheduling Policies

13.2.1 SCHED_FIFO
-----------------


File: posix1003_1.info,  Node: SCHED_RR,  Next: SCHED_OTHER,  Prev: SCHED_FIFO,  Up: Scheduling Policies

13.2.2 SCHED_RR
---------------


File: posix1003_1.info,  Node: SCHED_OTHER,  Next: Process Scheduling Functions,  Prev: SCHED_RR,  Up: Scheduling Policies

13.2.3 SCHED_OTHER
------------------


File: posix1003_1.info,  Node: Process Scheduling Functions,  Next: Set Scheduling Parameters,  Prev: SCHED_OTHER,  Up: Execution Scheduling

13.3 Process Scheduling Functions
=================================

* Menu:

* Set Scheduling Parameters::
* Get Scheduling Parameters::
* Set Scheduling Policy and Scheduling Parameters::
* Get Scheduling Policy::
* Yield Processor::
* Get Scheduling Parameter Limits::


File: posix1003_1.info,  Node: Set Scheduling Parameters,  Next: Get Scheduling Parameters,  Prev: Process Scheduling Functions,  Up: Process Scheduling Functions

13.3.1 Set Scheduling Parameters
--------------------------------

     sched_setparam(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Get Scheduling Parameters,  Next: Set Scheduling Policy and Scheduling Parameters,  Prev: Set Scheduling Parameters,  Up: Process Scheduling Functions

13.3.2 Get Scheduling Parameters
--------------------------------

     sched_getparam(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Set Scheduling Policy and Scheduling Parameters,  Next: Get Scheduling Policy,  Prev: Get Scheduling Parameters,  Up: Process Scheduling Functions

13.3.3 Set Scheduling Policy and Scheduling Parameters
------------------------------------------------------

     sched_setscheduler(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Get Scheduling Policy,  Next: Yield Processor,  Prev: Set Scheduling Policy and Scheduling Parameters,  Up: Process Scheduling Functions

13.3.4 Get Scheduling Policy
----------------------------

     sched_getscheduler(), Function, Dummy Implementation


File: posix1003_1.info,  Node: Yield Processor,  Next: Get Scheduling Parameter Limits,  Prev: Get Scheduling Policy,  Up: Process Scheduling Functions

13.3.5 Yield Processor
----------------------

     sched_yield(), Function, Implemented


File: posix1003_1.info,  Node: Get Scheduling Parameter Limits,  Next: Thread Scheduling,  Prev: Yield Processor,  Up: Process Scheduling Functions

13.3.6 Get Scheduling Parameter Limits
--------------------------------------

     sched_get_priority_max(), Function, Implemented
     sched_get_priority_min(), Function, Implemented
     sched_get_priority_rr_get_interval(), Function, Implemented


File: posix1003_1.info,  Node: Thread Scheduling,  Next: Thread Scheduling Attributes,  Prev: Get Scheduling Parameter Limits,  Up: Execution Scheduling

13.4 Thread Scheduling
======================

* Menu:

* Thread Scheduling Attributes::
* Scheduling Contention Scope::
* Scheduling Allocation Domain::
* Scheduling Documentation::


File: posix1003_1.info,  Node: Thread Scheduling Attributes,  Next: Scheduling Contention Scope,  Prev: Thread Scheduling,  Up: Thread Scheduling

13.4.1 Thread Scheduling Attributes
-----------------------------------

     PTHREAD_SCOPE_PROCESS, Constant, Implemented
     PTHREAD_SCOPE_SYSTEM, Constant, Implemented


File: posix1003_1.info,  Node: Scheduling Contention Scope,  Next: Scheduling Allocation Domain,  Prev: Thread Scheduling Attributes,  Up: Thread Scheduling

13.4.2 Scheduling Contention Scope
----------------------------------


File: posix1003_1.info,  Node: Scheduling Allocation Domain,  Next: Scheduling Documentation,  Prev: Scheduling Contention Scope,  Up: Thread Scheduling

13.4.3 Scheduling Allocation Domain
-----------------------------------


File: posix1003_1.info,  Node: Scheduling Documentation,  Next: Thread Scheduling Functions,  Prev: Scheduling Allocation Domain,  Up: Thread Scheduling

13.4.4 Scheduling Documentation
-------------------------------


File: posix1003_1.info,  Node: Thread Scheduling Functions,  Next: Thread Creation Scheduling Attributes,  Prev: Scheduling Documentation,  Up: Execution Scheduling

13.5 Thread Scheduling Functions
================================

* Menu:

* Thread Creation Scheduling Attributes::
* Dynamic Thread Scheduling Parameters Access::


File: posix1003_1.info,  Node: Thread Creation Scheduling Attributes,  Next: Dynamic Thread Scheduling Parameters Access,  Prev: Thread Scheduling Functions,  Up: Thread Scheduling Functions

13.5.1 Thread Creation Scheduling Attributes
--------------------------------------------

     pthread_attr_setscope(), Function, Implemented
     pthread_attr_getscope(), Function, Implemented
     pthread_attr_setinheritsched(), Function, Implemented
     pthread_attr_getinheritsched(), Function, Implemented
     pthread_attr_setschedpolicy(), Function, Implemented
     pthread_attr_getschedpolicy(), Function, Implemented
     pthread_attr_setschedparam(), Function, Implemented
     pthread_attr_getschedparam(), Function, Implemented
     PTHREAD_INHERIT_SCHED, Constant, Implemented
     PTHREAD_EXPLICIT_SCHED, Constant, Implemented


File: posix1003_1.info,  Node: Dynamic Thread Scheduling Parameters Access,  Next: Synchronization Scheduling,  Prev: Thread Creation Scheduling Attributes,  Up: Thread Scheduling Functions

13.5.2 Dynamic Thread Scheduling Parameters Access
--------------------------------------------------

     pthread_setschedparam(), Function, Implemented
     pthread_getschedparam(), Function, Implemented


File: posix1003_1.info,  Node: Synchronization Scheduling,  Next: Mutex Initialization Scheduling Attributes,  Prev: Dynamic Thread Scheduling Parameters Access,  Up: Execution Scheduling

13.6 Synchronization Scheduling
===============================

* Menu:

* Mutex Initialization Scheduling Attributes::
* Change the Priority Ceiling of a Mutex::


File: posix1003_1.info,  Node: Mutex Initialization Scheduling Attributes,  Next: Change the Priority Ceiling of a Mutex,  Prev: Synchronization Scheduling,  Up: Synchronization Scheduling

13.6.1 Mutex Initialization Scheduling Attributes
-------------------------------------------------

     pthread_mutexattr_setprotocol(), Function, Implemented
     pthread_mutexattr_getprotocol(), Function, Implemented
     pthread_mutexattr_setprioceiling(), Function, Implemented
     pthread_mutexattr_getprioceiling(), Function, Implemented
     PTHREAD_PRIO_NONE, Constant, Implemented
     PTHREAD_PRIO_INHERIT, Constant, Implemented
     PTHREAD_PRIO_PROTECT, Constant, Implemented


File: posix1003_1.info,  Node: Change the Priority Ceiling of a Mutex,  Next: Clocks and Timers,  Prev: Mutex Initialization Scheduling Attributes,  Up: Synchronization Scheduling

13.6.2 Change the Priority Ceiling of a Mutex
---------------------------------------------

     pthread_mutex_setprioceiling(), Function, Implemented
     pthread_mutex_getprioceiling(), Function, Implemented


File: posix1003_1.info,  Node: Clocks and Timers,  Next: Data Definitions for Clocks and Timers,  Prev: Change the Priority Ceiling of a Mutex,  Up: Top

14 Clocks and Timers
********************

* Menu:

* Data Definitions for Clocks and Timers::
* Clock and Timer Functions::


File: posix1003_1.info,  Node: Data Definitions for Clocks and Timers,  Next: Time Value Specification Structures,  Prev: Clocks and Timers,  Up: Clocks and Timers

14.1 Data Definitions for Clocks and Timers
===========================================

* Menu:

* Time Value Specification Structures::
* Timer Event Notification Control Block::
* Type Definitions::
* Timer Event Notification Manifest Constants::


File: posix1003_1.info,  Node: Time Value Specification Structures,  Next: Timer Event Notification Control Block,  Prev: Data Definitions for Clocks and Timers,  Up: Data Definitions for Clocks and Timers

14.1.1 Time Value Specification Structures
------------------------------------------

     struct timespec, Type, Implemented
     struct itimerspec, Type, Implemented


File: posix1003_1.info,  Node: Timer Event Notification Control Block,  Next: Type Definitions,  Prev: Time Value Specification Structures,  Up: Data Definitions for Clocks and Timers

14.1.2 Timer Event Notification Control Block
---------------------------------------------


File: posix1003_1.info,  Node: Type Definitions,  Next: Timer Event Notification Manifest Constants,  Prev: Timer Event Notification Control Block,  Up: Data Definitions for Clocks and Timers

14.1.3 Type Definitions
-----------------------

     clockid_t, Type, Implemented
     timerid_t, Type, Implemented


File: posix1003_1.info,  Node: Timer Event Notification Manifest Constants,  Next: Clock and Timer Functions,  Prev: Type Definitions,  Up: Data Definitions for Clocks and Timers

14.1.4 Timer Event Notification Manifest Constants
--------------------------------------------------

     CLOCK_REALTIME, Constant, Implemented
     TIMER_ABSTIME, Constant, Implemented


File: posix1003_1.info,  Node: Clock and Timer Functions,  Next: Clocks,  Prev: Timer Event Notification Manifest Constants,  Up: Clocks and Timers

14.2 Clock and Timer Functions
==============================

* Menu:

* Clocks::
* Create a Per-Process Timer::
* Delete a Per-Process Timer::
* Per-Process Timers::
* High Resolution Sleep::


File: posix1003_1.info,  Node: Clocks,  Next: Create a Per-Process Timer,  Prev: Clock and Timer Functions,  Up: Clock and Timer Functions

14.2.1 Clocks
-------------

     clock_settime(), Function, Partial Implementation
     clock_gettime(), Function, Partial Implementation
     clock_getres(), Function, Implemented


File: posix1003_1.info,  Node: Create a Per-Process Timer,  Next: Delete a Per-Process Timer,  Prev: Clocks,  Up: Clock and Timer Functions

14.2.2 Create a Per-Process Timer
---------------------------------

     timer_create(), Function, Implemented


File: posix1003_1.info,  Node: Delete a Per-Process Timer,  Next: Per-Process Timers,  Prev: Create a Per-Process Timer,  Up: Clock and Timer Functions

14.2.3 Delete a Per-Process Timer
---------------------------------

     timer_delete(), Function, Implemented


File: posix1003_1.info,  Node: Per-Process Timers,  Next: High Resolution Sleep,  Prev: Delete a Per-Process Timer,  Up: Clock and Timer Functions

14.2.4 Per-Process Timers
-------------------------

     timer_settime(), Function, Implemented
     timer_gettime(), Function, Implemented
     timer_getoverrun(), Function, Implemented


File: posix1003_1.info,  Node: High Resolution Sleep,  Next: Message Passing,  Prev: Per-Process Timers,  Up: Clock and Timer Functions

14.2.5 High Resolution Sleep
----------------------------

     nanosleep(), Function, Implemented


File: posix1003_1.info,  Node: Message Passing,  Next: Data Definitions for Message Queues,  Prev: High Resolution Sleep,  Up: Top

15 Message Passing
******************

* Menu:

* Data Definitions for Message Queues::
* Message Passing Functions::


File: posix1003_1.info,  Node: Data Definitions for Message Queues,  Next: Data Structures,  Prev: Message Passing,  Up: Message Passing

15.1 Data Definitions for Message Queues
========================================

* Menu:

* Data Structures::


File: posix1003_1.info,  Node: Data Structures,  Next: Message Passing Functions,  Prev: Data Definitions for Message Queues,  Up: Data Definitions for Message Queues

15.1.1 Data Structures
----------------------

NOTE: Semaphores are implemented but only unnamed semaphores are
currently tested.

     mqd_t, Type, Implemented
     struct mq_attr, Type, Implemented


File: posix1003_1.info,  Node: Message Passing Functions,  Next: Open a Message Queue,  Prev: Data Structures,  Up: Message Passing

15.2 Message Passing Functions
==============================

* Menu:

* Open a Message Queue::
* Close a Message Queue::
* Remove a Message Queue::
* Send a Message to a Message Queue::
* Receive a Message From a Message Queue::
* Notify Process That a Message is Available on a Queue::
* Set Message Queue Attributes::
* Get Message Queue Attributes::


File: posix1003_1.info,  Node: Open a Message Queue,  Next: Close a Message Queue,  Prev: Message Passing Functions,  Up: Message Passing Functions

15.2.1 Open a Message Queue
---------------------------

     mq_open(), Function, Implemented


File: posix1003_1.info,  Node: Close a Message Queue,  Next: Remove a Message Queue,  Prev: Open a Message Queue,  Up: Message Passing Functions

15.2.2 Close a Message Queue
----------------------------

     mq_close(), Function, Implemented


File: posix1003_1.info,  Node: Remove a Message Queue,  Next: Send a Message to a Message Queue,  Prev: Close a Message Queue,  Up: Message Passing Functions

15.2.3 Remove a Message Queue
-----------------------------

     mq_unlink(), Function, Implemented


File: posix1003_1.info,  Node: Send a Message to a Message Queue,  Next: Receive a Message From a Message Queue,  Prev: Remove a Message Queue,  Up: Message Passing Functions

15.2.4 Send a Message to a Message Queue
----------------------------------------

     mq_send(), Function, Implemented


File: posix1003_1.info,  Node: Receive a Message From a Message Queue,  Next: Notify Process That a Message is Available on a Queue,  Prev: Send a Message to a Message Queue,  Up: Message Passing Functions

15.2.5 Receive a Message From a Message Queue
---------------------------------------------

     mq_receive(), Function, Implemented


File: posix1003_1.info,  Node: Notify Process That a Message is Available on a Queue,  Next: Set Message Queue Attributes,  Prev: Receive a Message From a Message Queue,  Up: Message Passing Functions

15.2.6 Notify Process That a Message is Available on a Queue
------------------------------------------------------------

     mq_notify(), Function, Implemented


File: posix1003_1.info,  Node: Set Message Queue Attributes,  Next: Get Message Queue Attributes,  Prev: Notify Process That a Message is Available on a Queue,  Up: Message Passing Functions

15.2.7 Set Message Queue Attributes
-----------------------------------

     mq_setattr(), Function, Implemented


File: posix1003_1.info,  Node: Get Message Queue Attributes,  Next: Thread Management,  Prev: Set Message Queue Attributes,  Up: Message Passing Functions

15.2.8 Get Message Queue Attributes
-----------------------------------

     mq_getattr(), Function, Implemented


File: posix1003_1.info,  Node: Thread Management,  Next: Threads,  Prev: Get Message Queue Attributes,  Up: Top

16 Thread Management
********************

* Menu:

* Threads::
* Thread Functions::


File: posix1003_1.info,  Node: Threads,  Next: Thread Functions,  Prev: Thread Management,  Up: Thread Management

16.1 Threads
============


File: posix1003_1.info,  Node: Thread Functions,  Next: Thread Creation Attributes,  Prev: Threads,  Up: Thread Management

16.2 Thread Functions
=====================

* Menu:

* Thread Creation Attributes::
* Thread Creation::
* Wait for Thread Termination::
* Detaching a Thread::
* Thread Termination::
* Get Thread ID::
* Compare Thread IDs::
* Dynamic Package Initialization::


File: posix1003_1.info,  Node: Thread Creation Attributes,  Next: Thread Creation,  Prev: Thread Functions,  Up: Thread Functions

16.2.1 Thread Creation Attributes
---------------------------------

     pthread_attr_init(), Function, Implemented
     pthread_attr_destroy(), Function, Implemented
     pthread_attr_setstacksize(), Function, Implemented
     pthread_attr_getstacksize(), Function, Implemented
     pthread_attr_setstackaddr(), Function, Implemented
     pthread_attr_getstackaddr(), Function, Implemented
     pthread_attr_setdetachstate(), Function, Implemented
     pthread_attr_getdetachstate(), Function, Implemented
     PTHREAD_CREATE_JOINABLE, Constant, Implemented
     PTHREAD_CREATE_DETACHED, Constant, Implemented


File: posix1003_1.info,  Node: Thread Creation,  Next: Wait for Thread Termination,  Prev: Thread Creation Attributes,  Up: Thread Functions

16.2.2 Thread Creation
----------------------

     pthread_create(), Function, Implemented


File: posix1003_1.info,  Node: Wait for Thread Termination,  Next: Detaching a Thread,  Prev: Thread Creation,  Up: Thread Functions

16.2.3 Wait for Thread Termination
----------------------------------

     pthread_join(), Function, Implemented


File: posix1003_1.info,  Node: Detaching a Thread,  Next: Thread Termination,  Prev: Wait for Thread Termination,  Up: Thread Functions

16.2.4 Detaching a Thread
-------------------------

     pthread_detach(), Function, Implemented


File: posix1003_1.info,  Node: Thread Termination,  Next: Get Thread ID,  Prev: Detaching a Thread,  Up: Thread Functions

16.2.5 Thread Termination
-------------------------

     pthread_exit(), Function, Implemented


File: posix1003_1.info,  Node: Get Thread ID,  Next: Compare Thread IDs,  Prev: Thread Termination,  Up: Thread Functions

16.2.6 Get Thread ID
--------------------

     pthread_self(), Function, Implemented


File: posix1003_1.info,  Node: Compare Thread IDs,  Next: Dynamic Package Initialization,  Prev: Get Thread ID,  Up: Thread Functions

16.2.7 Compare Thread IDs
-------------------------

     pthread_equal(), Function, Implemented


File: posix1003_1.info,  Node: Dynamic Package Initialization,  Next: Thread-Specific Data,  Prev: Compare Thread IDs,  Up: Thread Functions

16.2.8 Dynamic Package Initialization
-------------------------------------

     pthread_once(), Function, Implemented
     PTHREAD_ONCE_INIT, Constant, Implemented


File: posix1003_1.info,  Node: Thread-Specific Data,  Next: Thread-Specific Data Functions,  Prev: Dynamic Package Initialization,  Up: Top

17 Thread-Specific Data
***********************

* Menu:

* Thread-Specific Data Functions::


File: posix1003_1.info,  Node: Thread-Specific Data Functions,  Next: Thread-Specific Data Key Creation,  Prev: Thread-Specific Data,  Up: Thread-Specific Data

17.1 Thread-Specific Data Functions
===================================

* Menu:

* Thread-Specific Data Key Creation::
* Thread-Specific Data Management::
* Thread-Specific Data Key Deletion::


File: posix1003_1.info,  Node: Thread-Specific Data Key Creation,  Next: Thread-Specific Data Management,  Prev: Thread-Specific Data Functions,  Up: Thread-Specific Data Functions

17.1.1 Thread-Specific Data Key Creation
----------------------------------------

     pthread_key_create(), Function, Implemented


File: posix1003_1.info,  Node: Thread-Specific Data Management,  Next: Thread-Specific Data Key Deletion,  Prev: Thread-Specific Data Key Creation,  Up: Thread-Specific Data Functions

17.1.2 Thread-Specific Data Management
--------------------------------------

     pthread_key_setspecific(), Function, Implemented
     pthread_key_getspecific(), Function, Implemented


File: posix1003_1.info,  Node: Thread-Specific Data Key Deletion,  Next: Thread Cancellation,  Prev: Thread-Specific Data Management,  Up: Thread-Specific Data Functions

17.1.3 Thread-Specific Data Key Deletion
----------------------------------------

     pthread_key_delete(), Function, Implemented


File: posix1003_1.info,  Node: Thread Cancellation,  Next: Thread Cancellation Overview,  Prev: Thread-Specific Data Key Deletion,  Up: Top

18 Thread Cancellation
**********************

* Menu:

* Thread Cancellation Overview::
* Thread Cancellation Functions::
* Language-Independent Cancellation Functionality::


File: posix1003_1.info,  Node: Thread Cancellation Overview,  Next: Cancelability States,  Prev: Thread Cancellation,  Up: Thread Cancellation

18.1 Thread Cancellation Overview
=================================

* Menu:

* Cancelability States::
* Cancellation Points::
* Thread Cancellation Cleanup Handlers::
* Async-Cancel Safety::


File: posix1003_1.info,  Node: Cancelability States,  Next: Cancellation Points,  Prev: Thread Cancellation Overview,  Up: Thread Cancellation Overview

18.1.1 Cancelability States
---------------------------

     PTHREAD_CANCEL_DISABLE, Constant, Implemented
     PTHREAD_CANCEL_ENABLE, Constant, Implemented
     PTHREAD_CANCEL_ASYNCHRONOUS, Constant, Implemented
     PTHREAD_CANCEL_DEFERRED, Constant, Implemented


File: posix1003_1.info,  Node: Cancellation Points,  Next: Thread Cancellation Cleanup Handlers,  Prev: Cancelability States,  Up: Thread Cancellation Overview

18.1.2 Cancellation Points
--------------------------


File: posix1003_1.info,  Node: Thread Cancellation Cleanup Handlers,  Next: Async-Cancel Safety,  Prev: Cancellation Points,  Up: Thread Cancellation Overview

18.1.3 Thread Cancellation Cleanup Handlers
-------------------------------------------

     PTHREAD_CANCELED, Constant, Unimplemented


File: posix1003_1.info,  Node: Async-Cancel Safety,  Next: Thread Cancellation Functions,  Prev: Thread Cancellation Cleanup Handlers,  Up: Thread Cancellation Overview

18.1.4 Async-Cancel Safety
--------------------------


File: posix1003_1.info,  Node: Thread Cancellation Functions,  Next: Canceling Execution of a Thread,  Prev: Async-Cancel Safety,  Up: Thread Cancellation

18.2 Thread Cancellation Functions
==================================

* Menu:

* Canceling Execution of a Thread::
* Setting Cancelability State::
* Establishing Cancellation Handlers::


File: posix1003_1.info,  Node: Canceling Execution of a Thread,  Next: Setting Cancelability State,  Prev: Thread Cancellation Functions,  Up: Thread Cancellation Functions

18.2.1 Canceling Execution of a Thread
--------------------------------------

     pthread_cancel(), Function, Implemented


File: posix1003_1.info,  Node: Setting Cancelability State,  Next: Establishing Cancellation Handlers,  Prev: Canceling Execution of a Thread,  Up: Thread Cancellation Functions

18.2.2 Setting Cancelability State
----------------------------------

     pthread_setcancelstate(), Function, Implemented
     pthread_setcanceltype(), Function, Implemented
     pthread_testcancel(), Function, Implemented


File: posix1003_1.info,  Node: Establishing Cancellation Handlers,  Next: Language-Independent Cancellation Functionality,  Prev: Setting Cancelability State,  Up: Thread Cancellation Functions

18.2.3 Establishing Cancellation Handlers
-----------------------------------------

     pthread_cleanup_push(), Function, Implemented
     pthread_cleanup_pop(), Function, Implemented


File: posix1003_1.info,  Node: Language-Independent Cancellation Functionality,  Next: Requesting Cancellation,  Prev: Establishing Cancellation Handlers,  Up: Thread Cancellation

18.3 Language-Independent Cancellation Functionality
====================================================

* Menu:

* Requesting Cancellation::
* Associating Cleanup Code With Scopes::
* Controlling Cancellation Within Scopes::
* Defined Cancellation Sequence::
* List of Cancellation Points::


File: posix1003_1.info,  Node: Requesting Cancellation,  Next: Associating Cleanup Code With Scopes,  Prev: Language-Independent Cancellation Functionality,  Up: Language-Independent Cancellation Functionality

18.3.1 Requesting Cancellation
------------------------------


File: posix1003_1.info,  Node: Associating Cleanup Code With Scopes,  Next: Controlling Cancellation Within Scopes,  Prev: Requesting Cancellation,  Up: Language-Independent Cancellation Functionality

18.3.2 Associating Cleanup Code With Scopes
-------------------------------------------


File: posix1003_1.info,  Node: Controlling Cancellation Within Scopes,  Next: Defined Cancellation Sequence,  Prev: Associating Cleanup Code With Scopes,  Up: Language-Independent Cancellation Functionality

18.3.3 Controlling Cancellation Within Scopes
---------------------------------------------


File: posix1003_1.info,  Node: Defined Cancellation Sequence,  Next: List of Cancellation Points,  Prev: Controlling Cancellation Within Scopes,  Up: Language-Independent Cancellation Functionality

18.3.4 Defined Cancellation Sequence
------------------------------------


File: posix1003_1.info,  Node: List of Cancellation Points,  Next: Compliance Summary,  Prev: Defined Cancellation Sequence,  Up: Language-Independent Cancellation Functionality

18.3.5 List of Cancellation Points
----------------------------------


File: posix1003_1.info,  Node: Compliance Summary,  Next: General Chapter,  Prev: List of Cancellation Points,  Up: Top

19 Compliance Summary
*********************

* Menu:

* General Chapter::
* Terminology and General Requirements Chapter::
* Process Primitives Chapter::
* Process Environment Chapter::
* Files and Directories Chapter::
* Input and Output Primitives Chapter::
* Device- and Class-Specific Functions Chapter::
* Language-Specific Services for the C Programming Language Chapter::
* System Databases Chapter::
* Data Interchange Format Chapter::
* Synchronization Chapter::
* Memory Management Chapter::
* Execution Scheduling Chapter::
* Clocks and Timers Chapter::
* Message Passing Chapter::
* Thread Management Chapter::
* Thread-Specific Data Chapter::
* Thread Cancellation Chapter::
* Overall Summary::


File: posix1003_1.info,  Node: General Chapter,  Next: Terminology and General Requirements Chapter,  Prev: Compliance Summary,  Up: Compliance Summary

19.1 General Chapter
====================

     Functions:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 21
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


                  FEATURE FLAG COUNTS DO NOT ADD UP!!

     Constants:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Terminology and General Requirements Chapter,  Next: Process Primitives Chapter,  Prev: General Chapter,  Up: Compliance Summary

19.2 Terminology and General Requirements Chapter
=================================================

     Functions:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 19
         Implemented     : 19
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 32
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


                  FEATURE FLAG COUNTS DO NOT ADD UP!!

     Constants:
         Total Number    : 126
         Implemented     : 124
         Unimplemented   : 2
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Process Primitives Chapter,  Next: Process Environment Chapter,  Prev: Terminology and General Requirements Chapter,  Up: Compliance Summary

19.3 Process Primitives Chapter
===============================

     Functions:
         Total Number    : 36
         Implemented     : 20
         Unimplemented   : 0
         Unimplementable : 16
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 5
         Implemented     : 5
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 40
         Implemented     : 32
         Unimplemented   : 6
         Unimplementable : 2
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Process Environment Chapter,  Next: Files and Directories Chapter,  Prev: Process Primitives Chapter,  Up: Compliance Summary

19.4 Process Environment Chapter
================================

     Functions:
         Total Number    : 23
         Implemented     : 21
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 2
         Untested        : 0

     Data Types:
         Total Number    : 2
         Implemented     : 2
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 53
         Implemented     : 51
         Unimplemented   : 2
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Files and Directories Chapter,  Next: Input and Output Primitives Chapter,  Prev: Process Environment Chapter,  Up: Compliance Summary

19.5 Files and Directories Chapter
==================================

     Functions:
         Total Number    : 35
         Implemented     : 30
         Unimplemented   : 3
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 1


                    FUNCTION COUNTS DO NOT ADD UP!!

     Data Types:
         Total Number    : 3
         Implemented     : 3
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 39
         Implemented     : 37
         Unimplemented   : 2
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Input and Output Primitives Chapter,  Next: Device- and Class-Specific Functions Chapter,  Prev: Files and Directories Chapter,  Up: Compliance Summary

19.6 Input and Output Primitives Chapter
========================================

     Functions:
         Total Number    : 19
         Implemented     : 9
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 9
         Untested        : 0


                    FUNCTION COUNTS DO NOT ADD UP!!

     Data Types:
         Total Number    : 2
         Implemented     : 1
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 1

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 24
         Implemented     : 24
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Device- and Class-Specific Functions Chapter,  Next: Language-Specific Services for the C Programming Language Chapter,  Prev: Input and Output Primitives Chapter,  Up: Compliance Summary

19.7 Device- and Class-Specific Functions Chapter
=================================================

     Functions:
         Total Number    : 12
         Implemented     : 8
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 4
         Untested        : 0

     Data Types:
         Total Number    : 3
         Implemented     : 3
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 77
         Implemented     : 76
         Unimplemented   : 1
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Language-Specific Services for the C Programming Language Chapter,  Next: System Databases Chapter,  Prev: Device- and Class-Specific Functions Chapter,  Up: Compliance Summary

19.8 Language-Specific Services for the C Programming Language Chapter
======================================================================

     Functions:
         Total Number    : 125
         Implemented     : 117
         Unimplemented   : 8
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 2
         Implemented     : 2
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 11
         Implemented     : 11
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: System Databases Chapter,  Next: Data Interchange Format Chapter,  Prev: Language-Specific Services for the C Programming Language Chapter,  Up: Compliance Summary

19.9 System Databases Chapter
=============================

     Functions:
         Total Number    : 8
         Implemented     : 8
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 2
         Implemented     : 2
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Data Interchange Format Chapter,  Next: Synchronization Chapter,  Prev: System Databases Chapter,  Up: Compliance Summary

19.10 Data Interchange Format Chapter
=====================================

     Functions:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 2
         Implemented     : 0
         Unimplemented   : 2
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 37
         Implemented     : 0
         Unimplemented   : 37
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Synchronization Chapter,  Next: Memory Management Chapter,  Prev: Data Interchange Format Chapter,  Up: Compliance Summary

19.11 Synchronization Chapter
=============================

     Functions:
         Total Number    : 28
         Implemented     : 28
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 1
         Implemented     : 1
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 5
         Implemented     : 5
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Memory Management Chapter,  Next: Execution Scheduling Chapter,  Prev: Synchronization Chapter,  Up: Compliance Summary

19.12 Memory Management Chapter
===============================

     Functions:
         Total Number    : 10
         Implemented     : 0
         Unimplemented   : 10
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 12
         Implemented     : 0
         Unimplemented   : 12
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Execution Scheduling Chapter,  Next: Clocks and Timers Chapter,  Prev: Memory Management Chapter,  Up: Compliance Summary

19.13 Execution Scheduling Chapter
==================================

     Functions:
         Total Number    : 24
         Implemented     : 20
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 4
         Untested        : 0

     Data Types:
         Total Number    : 1
         Implemented     : 1
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 10
         Implemented     : 10
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Clocks and Timers Chapter,  Next: Message Passing Chapter,  Prev: Execution Scheduling Chapter,  Up: Compliance Summary

19.14 Clocks and Timers Chapter
===============================

     Functions:
         Total Number    : 9
         Implemented     : 7
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 2
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 4
         Implemented     : 4
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 2
         Implemented     : 2
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Message Passing Chapter,  Next: Thread Management Chapter,  Prev: Clocks and Timers Chapter,  Up: Compliance Summary

19.15 Message Passing Chapter
=============================

     Functions:
         Total Number    : 8
         Implemented     : 8
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 2
         Implemented     : 2
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Thread Management Chapter,  Next: Thread-Specific Data Chapter,  Prev: Message Passing Chapter,  Up: Compliance Summary

19.16 Thread Management Chapter
===============================

     Functions:
         Total Number    : 15
         Implemented     : 15
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 3
         Implemented     : 3
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Thread-Specific Data Chapter,  Next: Thread Cancellation Chapter,  Prev: Thread Management Chapter,  Up: Compliance Summary

19.17 Thread-Specific Data Chapter
==================================

     Functions:
         Total Number    : 4
         Implemented     : 4
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Thread Cancellation Chapter,  Next: Overall Summary,  Prev: Thread-Specific Data Chapter,  Up: Compliance Summary

19.18 Thread Cancellation Chapter
=================================

     Functions:
         Total Number    : 6
         Implemented     : 6
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Data Types:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Feature Flags:
         Total Number    : 0
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0

     Constants:
         Total Number    : 5
         Implemented     : 4
         Unimplemented   : 1
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Overall Summary,  Next: Command and Variable Index,  Prev: Thread Cancellation Chapter,  Up: Compliance Summary

19.19 Overall Summary
=====================

     Functions:
         Total Number    : 362
         Implemented     : 301
         Unimplemented   : 21
         Unimplementable : 16
         Partial         : 2
         Dummy           : 19
         Untested        : 1


                    FUNCTION COUNTS DO NOT ADD UP!!

     Data Types:
         Total Number    : 48
         Implemented     : 45
         Unimplemented   : 2
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 1

     Feature Flags:
         Total Number    : 53
         Implemented     : 0
         Unimplemented   : 0
         Unimplementable : 0
         Partial         : 0
         Dummy           : 0
         Untested        : 0


                  FEATURE FLAG COUNTS DO NOT ADD UP!!

     Constants:
         Total Number    : 444
         Implemented     : 379
         Unimplemented   : 63
         Unimplementable : 2
         Partial         : 0
         Dummy           : 0
         Untested        : 0


File: posix1003_1.info,  Node: Top,  Next: Preface,  Prev: (dir),  Up: (dir)

posix1003_1
***********

This is the online version of the RTEMS POSIX 1003.1 Compliance Guide.

* Menu:

* Preface::
* General::
* Terminology and General Requirements::
* Process Primitives::
* Process Environment::
* Files and Directories::
* Input and Output Primitives::
* Device- and Class-Specific Functions::
* Language-Specific Services for the C Programming Language::
* System Databases::
* Data Interchange Format::
* Synchronization::
* Memory Management::
* Execution Scheduling::
* Clocks and Timers::
* Message Passing::
* Thread Management::
* Thread-Specific Data::
* Thread Cancellation::
* Compliance Summary::
* Command and Variable Index::
* Concept Index::


File: posix1003_1.info,  Node: Command and Variable Index,  Next: Concept Index,  Prev: Overall Summary,  Up: Top

Command and Variable Index
**************************

There are currently no Command and Variable Index entries.


File: posix1003_1.info,  Node: Concept Index,  Prev: Command and Variable Index,  Up: Top

Concept Index
*************

There are currently no Concept Index entries.



Tag Table:
Node: Preface217
Node: General1183
Node: Scope1347
Node: Normative References1467
Node: Conformance1621
Node: Terminology and General Requirements2666
Node: Conventions3095
Node: Definitions3282
Node: General Concepts3449
Node: Error Numbers3628
Node: Primitive System Types5331
Node: Environment Description6271
Node: C Language Definitions6491
Node: Symbols From the C Standard6776
Node: POSIX.1 Symbols7025
Node: Numerical Limits7247
Node: C Language Limits7434
Node: Minimum Values8458
Node: Run-Time Increasable Values9960
Node: Run-Time Invariant Values (Possible Indeterminate)10245
Node: Pathname Variable Values11457
Node: Invariant Values11912
Node: Maximum Values12129
Node: Symbolic Constants12346
Node: Symbolic Constants for the access Function12804
Node: Symbolic Constants for the lseek Function13217
Node: Compile-Time Symbolic Constants for Portability Specifications13651
Node: Execution-Time Symbolic Constants for Portability Specifications15105
Node: Process Primitives15695
Node: Process Creation and Execution16015
Node: Process Creation16305
Node: Execute a File16562
Node: Register Fork Handlers17112
Node: Process Termination17386
Node: Wait for Process Termination17649
Node: Terminate a Process18496
Node: Signals18719
Node: Signal Concepts19173
Node: Signal Names19400
Node: Signal Generation and Delivery20640
Node: Signal Actions21049
Node: Send a Signal to a Process21462
Node: Manipulate Signal Sets21694
Node: Examine and Change Signal Action22106
Node: Examine and Change Blocked Signals22495
Node: Examine Pending Signals22941
Node: Wait for a Signal23185
Node: Synchronously Accept a Signal23412
Node: Queue a Signal to a Process23749
Node: Send a Signal to a Thread24006
Node: Timer Operations24252
Node: Schedule Alarm24515
Node: Suspend Process Execution24726
Node: Delay Process Execution24966
Node: Process Environment25207
Node: Process Identification25582
Node: Get Process and Parent Process IDs25840
Node: User Identification26196
Node: Get Real User Effective User Real Group and Effective Group IDs26595
Node: Set User and Group IDs27150
Node: Get Supplementary Group IDs27515
Node: Get User Name27786
Node: Process Groups28081
Node: Get Process Group ID28366
Node: Create Session and Set Process Group ID28627
Node: Set Process Group ID for Job Control28947
Node: System Identification29252
Node: Get System Name29486
Node: Time29728
Node: Get System Time29912
Node: Get Process Times30093
Node: Environment Variables30442
Node: Environment Access30663
Node: Terminal Identification30895
Node: Generate Terminal Pathname31174
Node: Determine Terminal Device Name31442
Node: Configurable System Variables31821
Node: Get Configurable System Variables32109
Node: Files and Directories34868
Node: Directories35222
Node: Format of Directory Entries35462
Node: Directory Operations35660
Node: Working Directory36084
Node: Change Current Working Directory36361
Node: Get Working Directory Pathname36633
Node: General File Creation36906
Node: Open a File37223
Node: Create a New File or Rewrite an Existing One37998
Node: Set File Creation Mask38296
Node: Link to a File38553
Node: Special File Creation38770
Node: Make a Directory39015
Node: Make a FIFO Special File39241
Node: File Removal39552
Node: Remove Directory Entries39808
Node: Remove a Directory40035
Node: Rename a File40250
Node: File Characteristics40452
Node: File Characteristics Header and Data Structure40917
Node: <sys/stat.h> File Types41326
Node: <sys/stat.h> File Modes41912
Node: <sys/stat.h> Time Entries42659
Node: Get File Status42897
Node: Check File Accessibility43158
Node: Change File Modes43395
Node: Change Owner and Group of a File43671
Node: Set File Access and Modification Times43954
Node: Truncate a File to a Specified Length44308
Node: Configurable Pathname Variable44623
Node: Get Configurable Pathname Variables44927
Node: Input and Output Primitives46002
Node: Pipes46391
Node: Create an Inter-Process Channel46608
Node: File Descriptor Manipulation46889
Node: Duplicate an Open File Descriptor47183
Node: File Descriptor Deassignment47511
Node: Close a File47765
Node: Input and Output47985
Node: Read from a File48210
Node: Write to a File48416
Node: Control Operations on Files48632
Node: Data Definitions for File Control Operations48984
Node: File Control49257
Node: Reposition Read/Write File Offset50285
Node: File Synchronization50666
Node: Synchronize the State of a File50969
Node: Synchronize the Data of a File51244
Node: Asynchronous Input and Output51530
Node: Data Definitions for Asynchronous Input and Output52152
Node: Asynchronous I/O Control Block52550
Node: Asynchronous I/O Manifest Constants52904
Node: Asynchronous Read53498
Node: Asynchronous Write53755
Node: List Directed I/O53997
Node: Retrieve Error Status of Asynchronous I/O Operation54272
Node: Retrieve Return Status of Asynchronous I/O Operation54648
Node: Cancel Asynchronous I/O Request55041
Node: Wait for Asynchronous I/O Request55374
Node: Asynchronous File Synchronization55693
Node: Device- and Class-Specific Functions56015
Node: General Terminal Interface56342
Node: Interface Characteristics56680
Node: Opening a Terminal Device File57270
Node: Process Groups (TTY)57509
Node: The Controlling Terminal57727
Node: Terminal Access Control57946
Node: Input Processing and Reading Data58176
Node: Canonical Mode Input Processing58433
Node: Noncanonical Mode Input Processing58697
Node: Writing Data and Output Processing59113
Node: Special Characters59371
Node: Modem Disconnect59939
Node: Closing a Terminal Device File60141
Node: Parameters That Can Be Set60379
Node: termios Structure60735
Node: Input Modes61030
Node: Output Modes61580
Node: Control Modes61780
Node: Local Modes62318
Node: Special Control Characters62805
Node: Baud Rate Values63389
Node: Baud Rate Functions64151
Node: General Terminal Interface Control Functions64784
Node: Get and Set State65190
Node: Line Control Functions65507
Node: Get Foreground Process Group ID65923
Node: Set Foreground Process Group ID66236
Node: Language-Specific Services for the C Programming Language66587
Node: Referenced C Language Routines67003
Node: Extensions to Time Functions72076
Node: Extensions to setlocale Function72327
Node: C Language Input/Output Functions72816
Node: Map a Stream Pointer to a File Descriptor73418
Node: Open a Stream on a File Descriptor73879
Node: Interactions of Other FILE-Type C Functions74211
Node: Operations on Files - the remove Function74523
Node: Temporary File Name - the tmpnam Function74838
Node: Stdio Locking Functions75133
Node: Stdio With Explicit Client Locking75517
Node: Other C Language Functions75967
Node: Nonlocal Jumps76446
Node: Set Time Zone76745
Node: Find String Token76955
Node: ASCII Time Representation77185
Node: Current Time Representation77446
Node: Coordinated Universal Time77718
Node: Local Time77974
Node: Pseudo-Random Sequence Generation Functions78217
Node: System Databases78511
Node: System Databases Section78755
Node: Database Access78945
Node: Group Database Access79183
Node: User Database Access79612
Node: Data Interchange Format80048
Node: Archive/Interchange File Format80286
Node: Extended tar Format80597
Node: Extended cpio Format81841
Node: Multiple Volumes82670
Node: Synchronization82861
Node: Semaphore Characteristics83119
Node: Semaphore Functions83431
Node: Initialize an Unnamed Semaphore83883
Node: Destroy an Unnamed Semaphore84198
Node: Initialize/Open a Named Semaphore84485
Node: Close a Named Semaphore84771
Node: Remove a Named Semaphore85034
Node: Lock a Semaphore85283
Node: Unlock a Semaphore85551
Node: Get the Value of a Semaphore85785
Node: Mutexes86034
Node: Mutex Initialization Attributes86322
Node: Initializing and Destroying a Mutex86872
Node: Locking and Unlocking a Mutex87277
Node: Condition Variables87655
Node: Condition Variable Initialization Attributes88056
Node: Initialization and Destroying Condition Variables88576
Node: Broadcasting and Signaling a Condition89054
Node: Waiting on a Condition89439
Node: Memory Management89758
Node: Memory Locking Functions90023
Node: Lock/Unlock the Address Space of a Process90349
Node: Lock/Unlock a Rand of Process Address Space90812
Node: Memory Mapping Functions91187
Node: Map Process Addresses to a Memory Object91588
Node: Unmap Previously Mapped Addresses92195
Node: Change Memory Protection92499
Node: Memory Object Synchronization92776
Node: Shared Memory Functions93188
Node: Open a Shared Memory Object93479
Node: Remove a Shared Memory Object93754
Node: Execution Scheduling94032
Node: Scheduling Parameters94392
Node: Scheduling Policies94631
Node: SCHED_FIFO95017
Node: SCHED_RR95170
Node: SCHED_OTHER95311
Node: Process Scheduling Functions95476
Node: Set Scheduling Parameters95893
Node: Get Scheduling Parameters96181
Node: Set Scheduling Policy and Scheduling Parameters96488
Node: Get Scheduling Policy96839
Node: Yield Processor97128
Node: Get Scheduling Parameter Limits97373
Node: Thread Scheduling97775
Node: Thread Scheduling Attributes98115
Node: Scheduling Contention Scope98437
Node: Scheduling Allocation Domain98668
Node: Scheduling Documentation98897
Node: Thread Scheduling Functions99118
Node: Thread Creation Scheduling Attributes99453
Node: Dynamic Thread Scheduling Parameters Access100292
Node: Synchronization Scheduling100693
Node: Mutex Initialization Scheduling Attributes101049
Node: Change the Priority Ceiling of a Mutex101733
Node: Clocks and Timers102128
Node: Data Definitions for Clocks and Timers102410
Node: Time Value Specification Structures102828
Node: Timer Event Notification Control Block103207
Node: Type Definitions103487
Node: Timer Event Notification Manifest Constants103800
Node: Clock and Timer Functions104171
Node: Clocks104517
Node: Create a Per-Process Timer104842
Node: Delete a Per-Process Timer105098
Node: Per-Process Timers105366
Node: High Resolution Sleep105705
Node: Message Passing105944
Node: Data Definitions for Message Queues106197
Node: Data Structures106450
Node: Message Passing Functions106821
Node: Open a Message Queue107312
Node: Close a Message Queue107559
Node: Remove a Message Queue107806
Node: Send a Message to a Message Queue108069
Node: Receive a Message From a Message Queue108369
Node: Notify Process That a Message is Available on a Queue108713
Node: Set Message Queue Attributes109081
Node: Get Message Queue Attributes109390
Node: Thread Management109663
Node: Threads109864
Node: Thread Functions110008
Node: Thread Creation Attributes110394
Node: Thread Creation111140
Node: Wait for Thread Termination111377
Node: Detaching a Thread111628
Node: Thread Termination111866
Node: Get Thread ID112088
Node: Compare Thread IDs112300
Node: Dynamic Package Initialization112535
Node: Thread-Specific Data112846
Node: Thread-Specific Data Functions113083
Node: Thread-Specific Data Key Creation113441
Node: Thread-Specific Data Management113758
Node: Thread-Specific Data Key Deletion114133
Node: Thread Cancellation114439
Node: Thread Cancellation Overview114758
Node: Cancelability States115097
Node: Cancellation Points115519
Node: Thread Cancellation Cleanup Handlers115737
Node: Async-Cancel Safety116036
Node: Thread Cancellation Functions116263
Node: Canceling Execution of a Thread116609
Node: Setting Cancelability State116910
Node: Establishing Cancellation Handlers117317
Node: Language-Independent Cancellation Functionality117701
Node: Requesting Cancellation118179
Node: Associating Cleanup Code With Scopes118455
Node: Controlling Cancellation Within Scopes118748
Node: Defined Cancellation Sequence119051
Node: List of Cancellation Points119327
Node: Compliance Summary119579
Node: General Chapter120411
Node: Terminology and General Requirements Chapter121551
Node: Process Primitives Chapter122763
Node: Process Environment Chapter123893
Node: Files and Directories Chapter125009
Node: Input and Output Primitives Chapter126192
Node: Device- and Class-Specific Functions Chapter127403
Node: Language-Specific Services for the C Programming Language Chapter128614
Node: System Databases Chapter129859
Node: Data Interchange Format Chapter131003
Node: Synchronization Chapter132123
Node: Memory Management Chapter133228
Node: Execution Scheduling Chapter134336
Node: Clocks and Timers Chapter135452
Node: Message Passing Chapter136556
Node: Thread Management Chapter137653
Node: Thread-Specific Data Chapter138759
Node: Thread Cancellation Chapter139873
Node: Overall Summary140975
Node: Top142176
Node: Command and Variable Index142937
Node: Concept Index143169

End Tag Table
