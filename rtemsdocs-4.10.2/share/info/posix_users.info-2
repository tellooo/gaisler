This is posix_users.info, produced by makeinfo version 4.13 from
posix_users.texi.

INFO-DIR-SECTION RTEMS On-Line Manual
START-INFO-DIR-ENTRY
* RTEMS Posix API User's Guide: (posix_users).
                                       Posix API User's Guide Plan
END-INFO-DIR-ENTRY


File: posix_users.info,  Node: Message Passing Manager mq_open - Open a Message Queue,  Next: Message Passing Manager mq_close - Close a Message Queue,  Prev: Message Passing Manager Directives,  Up: Message Passing Manager Directives

16.4.1 mq_open - Open a Message Queue
-------------------------------------

CALLING SEQUENCE:
-----------------

     #include <mqueue.h>

     mqd_t mq_open(
       const char     *name,
       int             oflag,
       mode_t          mode,
       struct mq_attr *attr
     );

STATUS CODES:
-------------

`EACCES' - Either the message queue exists and the permissions
requested in oflags were denied, or the message does not exist and
permission to create one is denied.

`EEXIST' - You tried to create a message queue that already exists.

`EINVAL' - An inappropriate name was given for the message queue, or
the values of mq-maxmsg or mq_msgsize were less than 0.

`ENOENT' - The message queue does not exist, and you did not specify to
create it.

`EINTR' - The call to mq_open was interrupted by a signal.

`EMFILE' - The process has too many files or message queues open.  This
is a process limit error.

`ENFILE' - The system has run out of resources to support more open
message queues. This is a system error.

`ENAMETOOLONG' - mq_name is too long.

DESCRIPTION:
------------

The mq_open () function establishes the connection between a process
and a message queue with a message queue descriptor. If the message
queue already exists, mq_open opens it, if the message queue does not
exist, mq_open creates it. Message queues can have multiple senders and
receivers. If mq_open is successful, the function returns a message
queue descriptor. Otherwise, the function returns a -1 and sets 'errno'
to indicate the error.

The name of the message queue is used as an argument. For the best of
portability, the name of the message queue should begin with a "/" and
no other "/" should be in the name. Different systems interpret the
name in different ways.

The oflags contain information on how the message is opened if the queue
already exists. This may be O_RDONLY for read only, O_WRONLY for write
only, of O_RDWR, for read and write.

In addition, the oflags contain information needed in the creation of a
message queue. `O_NONBLOCK' - If the non-block flag is set then the
message queue is non-blocking, and requests to send and receive messages
do not block waiting for resources. If the flag is not set then the
message queue is blocking, and a request to send might have to wait for
an empty message queue. Similarly, a request to receive might have to
wait for a message to arrive on the queue. `O_CREAT' - This call
specifies that the call the mq_open is to create a new message queue.
In this case the mode and attribute arguments of the function call are
utilized. The message queue is created with a mode similar to the
creation of a file, read and write permission creator, group, and
others.

The geometry of the message queue is contained in the attribute
structure.  This includes mq_msgsize that dictates the maximum size of
a single message, and the mq_maxmsg that dictates the maximum number of
messages the queue can hold at one time. If a NULL is used in the
mq_attr argument, then the message queue is created with implementation
defined defaults. `O_EXCL' - is always set if O_CREAT flag is set. If
the message queue already exists, O_EXCL causes an error message to be
returned, otherwise, the new message queue fails and appends to the
existing one.

NOTES:
------

The mq_open () function does not add or remove messages from the queue.
When a new message queue is being created, the mq_flag field of the
attribute structure is not used.


File: posix_users.info,  Node: Message Passing Manager mq_close - Close a Message Queue,  Next: Message Passing Manager mq_unlink - Remove a Message Queue,  Prev: Message Passing Manager mq_open - Open a Message Queue,  Up: Message Passing Manager Directives

16.4.2 mq_close - Close a Message Queue
---------------------------------------

CALLING SEQUENCE:
-----------------

     #include <mqueue.h>

     int mq_close(
       mqd_t mqdes
     );

STATUS CODES:
-------------

`EINVAL' - The descriptor does not represent a valid open message queue

DESCRIPTION:
------------

The mq_close function removes the association between the message queue
descriptor, mqdes, and its message queue. If mq_close() is successfully
completed, the function returns a value of zero; otherwise, the function
returns a value of -1 and sets errno to indicate the error.

NOTES:
------

If the process had successfully attached a notification request to the
message queue via mq_notify, this attachment is removed, and the message
queue is available for another process to attach for notification.
mq_close has no effect on the contents of the message queue, all the
messages that were in the queue remain in the queue.


File: posix_users.info,  Node: Message Passing Manager mq_unlink - Remove a Message Queue,  Next: Message Passing Manager mq_send - Send a Message to a Message Queue,  Prev: Message Passing Manager mq_close - Close a Message Queue,  Up: Message Passing Manager Directives

16.4.3 mq_unlink - Remove a Message Queue
-----------------------------------------

CALLING SEQUENCE:
-----------------

     #include <mqueue.h>

     int mq_unlink(
       const char *name
     );

STATUS CODES:
-------------

`EINVAL' - The descriptor does not represent a valid message queue

DESCRIPTION:
------------

The mq_unlink() function removes the named message queue. If the message
queue is not open when mq_unlink is called, then the queue is
immediately eliminated. Any messages that were on the queue are lost,
and the queue can not be opened again. If processes have the queue open
when mq_unlink is called, the removal of the queue is delayed until the
last process using the queue has finished. However, the name of the
message queue is removed so that no other process can open it. Upon
successful completion, the function returns a value of zero. Otherwise,
the named message queue is not changed by this function call, and the
function returns a value of -1 and sets errno to indicate the error.

NOTES:
------

Calls to mq_open() to re-create the message queue may fail until the
message queue is actually removed. However, the mq_unlink() call need
not block until all references have been closed; it may return
immediately.


File: posix_users.info,  Node: Message Passing Manager mq_send - Send a Message to a Message Queue,  Next: Message Passing Manager mq_receive - Receive a Message from a Message Queue,  Prev: Message Passing Manager mq_unlink - Remove a Message Queue,  Up: Message Passing Manager Directives

16.4.4 mq_send - Send a Message to a Message Queue
--------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include<mqueue.h>
     int mq_send(
       mqd_t        mqdes,
       const char  *msg_ptr,
       size_t       msg_len,
       unsigned int msg_prio
     );

STATUS CODES:
-------------

`EBADF' - The descriptor does not represent a valid message queue, or
the queue was opened for read only O_RDONLY `EINVAL' - The value of
msg_prio was greater than the MQ_PRIO_MAX.  `EMSGSIZE' - The msg_len is
greater than the mq_msgsize attribute of the message queue `EAGAIN' -
The message queue is non-blocking, and there is no room on the queue
for another message as specified by the mq_maxmsg.  `EINTR' - The
message queue is blocking. While the process was waiting for free space
on the queue, a signal arrived that interrupted the wait.

DESCRIPTION:
------------

The mq_send() function adds the message pointed to by the argument
msg_ptr to the message queue specified by mqdes. Each message is
assigned a priority , from 0 to MQ_PRIO_MAX. MQ_PRIO_MAX is defined in
<limits.h> and must be at least 32. Messages are added to the queue in
order of their priority. The highest priority message is at the front
of the queue.

The maximum number of messages that a message queue may accept is
specified at creation by the mq_maxmsg field of the attribute structure.
If this amount is exceeded, the behavior of the process is determined
according to what oflag was used when the message queue was opened. If
the queue was opened with O_NONBLOCK flag set, then the EAGAIN error is
returned. If the O_NONBLOCK flag was not set, the process blocks and
waits for space on the queue, unless it is interrupted by a signal.

Upon successful completion, the mq_send () function returns a value of
zero. Otherwise, no message is enqueued, the function returns -1, and
errno is set to indicate the error.

NOTES:
------

If the specified message queue is not full, mq_send inserts the message
at the position indicated by the msg_prio argument.


File: posix_users.info,  Node: Message Passing Manager mq_receive - Receive a Message from a Message Queue,  Next: Message Passing Manager mq_notify - Notify Process that a Message is Available,  Prev: Message Passing Manager mq_send - Send a Message to a Message Queue,  Up: Message Passing Manager Directives

16.4.5 mq_receive - Receive a Message from a Message Queue
----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <mqueue.h>

     size_t mq_receive(
       mqd_t         mqdes,
       char         *msg_ptr,
       size_t        msg_len,
       unsigned int *msg_prio
     );

STATUS CODES:
-------------

`EBADF' - The descriptor does not represent a valid message queue, or
the queue was opened for write only O_WRONLY `EMSGSIZE' - The msg_len
is less than the mq_msgsize attribute of the message queue `EAGAIN' -
The message queue is non-blocking, and the queue is empty `EINTR' - The
message queue is blocking. While the process was waiting for a message
to arrive on the queue, a signal arrived that interrupted the wait.

DESCRIPTION:
------------

The mq_receive function is used to receive the oldest of the highest
priority message(s) from the message queue specified by mqdes. The
messages are received in FIFO order within the priorities. The received
message's priority is stored in the location referenced by the msg_prio.
If the msg_prio is a NULL, the priority is discarded. The message is
removed and stored in an area pointed to by msg_ptr whose length is of
msg_len. The msg_len must be at least equal to the mq_msgsize attribute
of the message queue.

The blocking behavior of the message queue is set by O_NONBLOCK at
mq_open or by setting O_NONBLOCK in mq_flags in a call to mq_setattr.
If this is a blocking queue, the process blocks and waits on an empty
queue. If this a non-blocking queue, the process does not block.

Upon successful completion, mq_receive returns the length of the
selected message in bytes and the message is removed from the queue.
Otherwise, no message is removed from the queue, the function returns a
value of -1, and sets errno to indicate the error.

NOTES:
------

If the size of the buffer in bytes, specified by the msg_len argument,
is less than the mq_msgsize attribute of the message queue, the function
fails and returns an error


File: posix_users.info,  Node: Message Passing Manager mq_notify - Notify Process that a Message is Available,  Next: Message Passing Manager mq_setattr - Set Message Queue Attributes,  Prev: Message Passing Manager mq_receive - Receive a Message from a Message Queue,  Up: Message Passing Manager Directives

16.4.6 mq_notify - Notify Process that a Message is Available
-------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <mqueue.h>

     int mq_notify(
       mqd_t                  mqdes,
       const struct sigevent *notification
     );

STATUS CODES:
-------------

`EBADF' - The descriptor does not refer to a valid message queue
`EBUSY' - A notification request is already attached to the queue

DESCRIPTION:
------------

If the argument notification is not NULL, this function registers the
calling process to be notified of message arrival at an empty message
queue associated with the specified message queue descriptor, mqdes.

Every message queue has the ability to notify one (and only one) process
whenever the queue's state changes from empty (0 messages) to nonempty.
This means that the process does not have to block or constantly poll
while it waits for a message. By calling mq_notify, a notification
request is attached to a message queue. When a message is received by an
empty queue, if there are no processes blocked and waiting for the
message, then the queue notifies the requesting process of a message
arrival. There is only one signal sent by the message queue, after that
the notification request is de-registered and another process can attach
its notification request. After receipt of a notification, a process
must re-register if it wishes to be notified again.

If there is a process blocked and waiting for the message, that process
gets the message, and notification is not be sent. Only one process can
have a notification request attached to a message queue at any one time.
If another process attempts to register a notification request, it
fails.  You can de-register for a message queue by passing a NULL to
mq_notify; this removes any notification request attached to the queue.
Whenever the message queue is closed, all notification attachments are
removed.

Upon successful completion, mq_notify returns a value of zero;
otherwise, the function returns a value of -1 and sets errno to
indicate the error.

NOTES:
------

It is possible for another process to receive the message after the
notification is sent but before the notified process has sent its
receive request.


File: posix_users.info,  Node: Message Passing Manager mq_setattr - Set Message Queue Attributes,  Next: Message Passing Manager mq_getattr - Get Message Queue Attributes,  Prev: Message Passing Manager mq_notify - Notify Process that a Message is Available,  Up: Message Passing Manager Directives

16.4.7 mq_setattr - Set Message Queue Attributes
------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <mqueue.h>

     int mq_setattr(
       mqd_t                 mqdes,
       const struct mq_attr *mqstat,
       struct mq_attr       *omqstat
     );

STATUS CODES:
-------------

`EBADF' - The message queue descriptor does not refer to a valid, open
queue.  `EINVAL' - The mq_flag value is invalid.

DESCRIPTION:
------------

The mq_setattr function is used to set attributes associated with the
open message queue description referenced by the message queue
descriptor specified by mqdes. The *omqstat represents the old or
previous attributes. If omqstat is non-NULL, the function mq_setattr()
stores, in the location referenced by omqstat, the previous message
queue attributes and the current queue status. These values are the
same as would be returned by a call to mq_getattr() at that point.

There is only one mq_attr.mq_flag which can be altered by this call.
This is the flag that deals with the blocking and non-blocking behavior
of the message queue. If the flag is set then the message queue is
non-blocking, and requests to send or receive do not block while waiting
for resources. If the flag is not set, then message send and receive may
involve waiting for an empty queue or waiting for a message to arrive.

Upon successful completion, the function returns a value of zero and the
attributes of the message queue have been changed as specified.
Otherwise, the message queue attributes is unchanged, and the function
returns a value of -1 and sets errno to indicate the error.

NOTES:
------

All other fields in the mq_attr are ignored by this call.


File: posix_users.info,  Node: Message Passing Manager mq_getattr - Get Message Queue Attributes,  Prev: Message Passing Manager mq_setattr - Set Message Queue Attributes,  Up: Message Passing Manager Directives

16.4.8 mq_getattr - Get Message Queue Attributes
------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <mqueue.h>
     int mq_getattr(
       mqd_t mqdes,
       struct mq_attr *mqstat
     );

STATUS CODES:
-------------

`EBADF' - The message queue descriptor does not refer to a valid, open
message queue.

DESCRIPTION:
------------

The mqdes argument specifies a message queue descriptor. The mq_getattr
function is used to get status information and attributes of the message
queue associated with the message queue descriptor. The results are
returned in the mq_attr structure referenced by the mqstat argument. All
of these attributes are set at create time, except the
blocking/non-blocking behavior of the message queue which can be
dynamically set by using mq_setattr. The attribute mq_curmsg is set to
reflect the number of messages on the queue at the time that mq_getattr
was called.

Upon successful completion, the mq_getattr function returns zero.
Otherwise, the function returns -1 and sets errno to indicate the error.

NOTES:
------


File: posix_users.info,  Node: Thread Manager,  Next: Thread Manager Introduction,  Up: Top

17 Thread Manager
*****************

* Menu:

* Thread Manager Introduction::
* Thread Manager Background::
* Thread Manager Operations::
* Thread Manager Services::


File: posix_users.info,  Node: Thread Manager Introduction,  Next: Thread Manager Background,  Prev: Thread Manager,  Up: Thread Manager

17.1 Introduction
=================

The thread manager implements the functionality required of the thread
manager as defined by POSIX 1003.1b-1996. This standard requires that a
compliant operating system provide the facilties to manage multiple
threads of control and defines the API that must be provided.

The services provided by the thread manager are:

   * `pthread_attr_init' - Initialize a Thread Attribute Set

   * `pthread_attr_destroy' - Destroy a Thread Attribute Set

   * `pthread_attr_setdetachstate' - Set Detach State

   * `pthread_attr_getdetachstate' - Get Detach State

   * `pthread_attr_setstacksize' - Set Thread Stack Size

   * `pthread_attr_getstacksize' - Get Thread Stack Size

   * `pthread_attr_setstackaddr' - Set Thread Stack Address

   * `pthread_attr_getstackaddr' - Get Thread Stack Address

   * `pthread_attr_setscope' - Set Thread Scheduling Scope

   * `pthread_attr_getscope' - Get Thread Scheduling Scope

   * `pthread_attr_setinheritsched' - Set Inherit Scheduler Flag

   * `pthread_attr_getinheritsched' - Get Inherit Scheduler Flag

   * `pthread_attr_setschedpolicy' - Set Scheduling Policy

   * `pthread_attr_getschedpolicy' - Get Scheduling Policy

   * `pthread_attr_setschedparam' - Set Scheduling Parameters

   * `pthread_attr_getschedparam' - Get Scheduling Parameters

   * `pthread_create' - Create a Thread

   * `pthread_exit' - Terminate the Current Thread

   * `pthread_detach' - Detach a Thread

   * `pthread_join' - Wait for Thread Termination

   * `pthread_self' - Get Thread ID

   * `pthread_equal' - Compare Thread IDs

   * `pthread_once' - Dynamic Package Initialization

   * `pthread_setschedparam' - Set Thread Scheduling Parameters

   * `pthread_getschedparam' - Get Thread Scheduling Parameters


File: posix_users.info,  Node: Thread Manager Background,  Next: Thread Manager Thread Attributes,  Prev: Thread Manager Introduction,  Up: Thread Manager

17.2 Background
===============

* Menu:

* Thread Manager Thread Attributes::


File: posix_users.info,  Node: Thread Manager Thread Attributes,  Next: Thread Manager Operations,  Prev: Thread Manager Background,  Up: Thread Manager Background

17.2.1 Thread Attributes
------------------------

Thread attributes are utilized only at thread creation time. A thread
attribute structure may be initialized and passed as an argument to the
`pthread_create' routine.

stack address
     is the address of the optionally user specified stack area for
     this thread.  If this value is NULL, then RTEMS allocates the
     memory for the thread stack from the RTEMS Workspace Area.
     Otherwise, this is the user specified address for the memory to be
     used for the thread's stack. Each thread must have a distinct
     stack area. Each processor family has different alignment rules
     which should be followed.

stack size
     is the minimum desired size for this thread's stack area.  If the
     size of this area as specified by the stack size attribute is
     smaller than the minimum for this processor family and the stack
     is not user specified, then RTEMS will automatically allocate a
     stack of the minimum size for this processor family.

contention scope
     specifies the scheduling contention scope. RTEMS only supports the
     PTHREAD_SCOPE_PROCESS scheduling contention scope.

scheduling inheritance
     specifies whether a user specified or the scheduling policy and
     parameters of the currently executing thread are to be used. When
     this is PTHREAD_INHERIT_SCHED, then the scheduling policy and
     parameters of the currently executing thread are inherited by the
     newly created thread.

scheduling policy and parameters
     specify the manner in which the thread will contend for the
     processor.  The scheduling parameters are interpreted based on the
     specified policy.  All policies utilize the thread priority
     parameter.



File: posix_users.info,  Node: Thread Manager Operations,  Next: Thread Manager Services,  Prev: Thread Manager Thread Attributes,  Up: Thread Manager

17.3 Operations
===============

There is currently no text in this section.


File: posix_users.info,  Node: Thread Manager Services,  Next: Thread Manager pthread_attr_init - Initialize a Thread Attribute Set,  Prev: Thread Manager Operations,  Up: Thread Manager

17.4 Services
=============

* Menu:

* Thread Manager pthread_attr_init - Initialize a Thread Attribute Set::
* Thread Manager pthread_attr_destroy - Destroy a Thread Attribute Set::
* Thread Manager pthread_attr_setdetachstate - Set Detach State::
* Thread Manager pthread_attr_getdetachstate - Get Detach State::
* Thread Manager pthread_attr_setstacksize - Set Thread Stack Size::
* Thread Manager pthread_attr_getstacksize - Get Thread Stack Size::
* Thread Manager pthread_attr_setstackaddr - Set Thread Stack Address::
* Thread Manager pthread_attr_getstackaddr - Get Thread Stack Address::
* Thread Manager pthread_attr_setscope - Set Thread Scheduling Scope::
* Thread Manager pthread_attr_getscope - Get Thread Scheduling Scope::
* Thread Manager pthread_attr_setinheritsched - Set Inherit Scheduler Flag::
* Thread Manager pthread_attr_getinheritsched - Get Inherit Scheduler Flag::
* Thread Manager pthread_attr_setschedpolicy - Set Scheduling Policy::
* Thread Manager pthread_attr_getschedpolicy - Get Scheduling Policy::
* Thread Manager pthread_attr_setschedparam - Set Scheduling Parameters::
* Thread Manager pthread_attr_getschedparam - Get Scheduling Parameters::
* Thread Manager pthread_create - Create a Thread::
* Thread Manager pthread_exit - Terminate the Current Thread::
* Thread Manager pthread_detach - Detach a Thread::
* Thread Manager pthread_join - Wait for Thread Termination::
* Thread Manager pthread_self - Get Thread ID::
* Thread Manager pthread_equal - Compare Thread IDs::
* Thread Manager pthread_once - Dynamic Package Initialization::
* Thread Manager pthread_setschedparam - Set Thread Scheduling Parameters::
* Thread Manager pthread_getschedparam - Get Thread Scheduling Parameters::

This section details the thread manager's services.  A subsection is
dedicated to each of this manager's services and describes the calling
sequence, related constants, usage, and status codes.


File: posix_users.info,  Node: Thread Manager pthread_attr_init - Initialize a Thread Attribute Set,  Next: Thread Manager pthread_attr_destroy - Destroy a Thread Attribute Set,  Prev: Thread Manager Services,  Up: Thread Manager Services

17.4.1 pthread_attr_init - Initialize a Thread Attribute Set
------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_init(
       pthread_attr_t *attr
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_init' routine initializes the thread attributes
object specified by `attr' with the default value for all of the
individual attributes.

NOTES:
------

The settings in the default attributes are implementation defined. For
RTEMS, the default attributes are as follows:

   * stackadr is not set to indicate that RTEMS is to allocate the
     stack memory.

   * stacksize is set to `PTHREAD_MINIMUM_STACK_SIZE'.

   * contentionscope is set to `PTHREAD_SCOPE_PROCESS'.

   * inheritsched is set to `PTHREAD_INHERIT_SCHED' to indicate that
     the created thread inherits its scheduling attributes from its
     parent.

   * detachstate is set to `PTHREAD_CREATE_JOINABLE'.



File: posix_users.info,  Node: Thread Manager pthread_attr_destroy - Destroy a Thread Attribute Set,  Next: Thread Manager pthread_attr_setdetachstate - Set Detach State,  Prev: Thread Manager pthread_attr_init - Initialize a Thread Attribute Set,  Up: Thread Manager Services

17.4.2 pthread_attr_destroy - Destroy a Thread Attribute Set
------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_destroy(
       pthread_attr_t *attr
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.


DESCRIPTION:
------------

The `pthread_attr_destroy' routine is used to destroy a thread
attributes object. The behavior of using an attributes object after it
is destroyed is implementation dependent.

NOTES:
------

NONE


File: posix_users.info,  Node: Thread Manager pthread_attr_setdetachstate - Set Detach State,  Next: Thread Manager pthread_attr_getdetachstate - Get Detach State,  Prev: Thread Manager pthread_attr_destroy - Destroy a Thread Attribute Set,  Up: Thread Manager Services

17.4.3 pthread_attr_setdetachstate - Set Detach State
-----------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_setdetachstate(
       pthread_attr_t *attr,
       int             detachstate
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The detachstate argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_setdetachstate' routine is used to value of the
`detachstate' attribute. This attribute controls whether the thread is
created in a detached state.

The `detachstate' can be either `PTHREAD_CREATE_DETACHED' or
`PTHREAD_CREATE_JOINABLE'. The default value for all threads is
`PTHREAD_CREATE_JOINABLE'.

NOTES:
------

If a thread is in a detached state, then the use of the ID with the
`pthread_detach' or `pthread_join' routines is an error.


File: posix_users.info,  Node: Thread Manager pthread_attr_getdetachstate - Get Detach State,  Next: Thread Manager pthread_attr_setstacksize - Set Thread Stack Size,  Prev: Thread Manager pthread_attr_setdetachstate - Set Detach State,  Up: Thread Manager Services

17.4.4 pthread_attr_getdetachstate - Get Detach State
-----------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_getdetachstate(
       const pthread_attr_t *attr,
       int                  *detachstate
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The detatchstate pointer argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_getdetachstate' routine is used to obtain the current
value of the `detachstate' attribute as specified by the `attr' thread
attribute object.

NOTES:
------

NONE


File: posix_users.info,  Node: Thread Manager pthread_attr_setstacksize - Set Thread Stack Size,  Next: Thread Manager pthread_attr_getstacksize - Get Thread Stack Size,  Prev: Thread Manager pthread_attr_getdetachstate - Get Detach State,  Up: Thread Manager Services

17.4.5 pthread_attr_setstacksize - Set Thread Stack Size
--------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_setstacksize(
       pthread_attr_t *attr,
       size_t          stacksize
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.


DESCRIPTION:
------------

The `pthread_attr_setstacksize' routine is used to set the `stacksize'
attribute in the `attr' thread attribute object.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_ATTR_STACKSIZE' to indicate that this routine is
supported.

If the specified stacksize is below the minimum required for this CPU
(`PTHREAD_STACK_MIN', then the stacksize will be set to the minimum for
this CPU.


File: posix_users.info,  Node: Thread Manager pthread_attr_getstacksize - Get Thread Stack Size,  Next: Thread Manager pthread_attr_setstackaddr - Set Thread Stack Address,  Prev: Thread Manager pthread_attr_setstacksize - Set Thread Stack Size,  Up: Thread Manager Services

17.4.6 pthread_attr_getstacksize - Get Thread Stack Size
--------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_getstacksize(
       const pthread_attr_t *attr,
       size_t               *stacksize
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The stacksize pointer argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_getstacksize' routine is used to obtain the
`stacksize' attribute in the `attr' thread attribute object.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_ATTR_STACKSIZE' to indicate that this routine is
supported.


File: posix_users.info,  Node: Thread Manager pthread_attr_setstackaddr - Set Thread Stack Address,  Next: Thread Manager pthread_attr_getstackaddr - Get Thread Stack Address,  Prev: Thread Manager pthread_attr_getstacksize - Get Thread Stack Size,  Up: Thread Manager Services

17.4.7 pthread_attr_setstackaddr - Set Thread Stack Address
-----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_setstackaddr(
       pthread_attr_t *attr,
       void           *stackaddr
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.


DESCRIPTION:
------------

The `pthread_attr_setstackaddr' routine is used to set the `stackaddr'
attribute in the `attr' thread attribute object.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_ATTR_STACKADDR' to indicate that this routine is
supported.

It is imperative to the proper operation of the system that each thread
have sufficient stack space.


File: posix_users.info,  Node: Thread Manager pthread_attr_getstackaddr - Get Thread Stack Address,  Next: Thread Manager pthread_attr_setscope - Set Thread Scheduling Scope,  Prev: Thread Manager pthread_attr_setstackaddr - Set Thread Stack Address,  Up: Thread Manager Services

17.4.8 pthread_attr_getstackaddr - Get Thread Stack Address
-----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_getstackaddr(
       const pthread_attr_t  *attr,
       void                 **stackaddr
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The stackaddr pointer argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_getstackaddr' routine is used to obtain the
`stackaddr' attribute in the `attr' thread attribute object.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_ATTR_STACKADDR' to indicate that this routine is
supported.


File: posix_users.info,  Node: Thread Manager pthread_attr_setscope - Set Thread Scheduling Scope,  Next: Thread Manager pthread_attr_getscope - Get Thread Scheduling Scope,  Prev: Thread Manager pthread_attr_getstackaddr - Get Thread Stack Address,  Up: Thread Manager Services

17.4.9 pthread_attr_setscope - Set Thread Scheduling Scope
----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_setscope(
       pthread_attr_t *attr,
       int             contentionscope
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The contention scope specified is not valid.

ENOTSUP
     The contention scope specified (PTHREAD_SCOPE_SYSTEM) is not
     supported.


DESCRIPTION:
------------

The `pthread_attr_setscope' routine is used to set the contention scope
field in the thread attribute object `attr' to the value specified by
`contentionscope'.

The `contentionscope' must be either `PTHREAD_SCOPE_SYSTEM' to indicate
that the thread is to be within system scheduling contention or
`PTHREAD_SCOPE_PROCESS' indicating that the thread is to be within the
process scheduling contention scope.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Thread Manager pthread_attr_getscope - Get Thread Scheduling Scope,  Next: Thread Manager pthread_attr_setinheritsched - Set Inherit Scheduler Flag,  Prev: Thread Manager pthread_attr_setscope - Set Thread Scheduling Scope,  Up: Thread Manager Services

17.4.10 pthread_attr_getscope - Get Thread Scheduling Scope
-----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_getscope(
       const pthread_attr_t *attr,
       int                  *contentionscope
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The contentionscope pointer argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_getscope' routine is used to obtain the value of the
contention scope field in the thread attributes object `attr'. The
current value is returned in `contentionscope'.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Thread Manager pthread_attr_setinheritsched - Set Inherit Scheduler Flag,  Next: Thread Manager pthread_attr_getinheritsched - Get Inherit Scheduler Flag,  Prev: Thread Manager pthread_attr_getscope - Get Thread Scheduling Scope,  Up: Thread Manager Services

17.4.11 pthread_attr_setinheritsched - Set Inherit Scheduler Flag
-----------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_setinheritsched(
       pthread_attr_t *attr,
       int             inheritsched
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The specified scheduler inheritance argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_setinheritsched' routine is used to set the inherit
scheduler field in the thread attribute object `attr' to the value
specified by `inheritsched'.

The `contentionscope' must be either `PTHREAD_INHERIT_SCHED' to
indicate that the thread is to inherit the scheduling policy and
parameters fromthe creating thread, or `PTHREAD_EXPLICIT_SCHED' to
indicate that the scheduling policy and parameters for this thread are
to be set from the corresponding values in the attributes object.  If
`contentionscope' is `PTHREAD_INHERIT_SCHED', then the scheduling
attributes in the `attr' structure will be ignored at thread creation
time.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Thread Manager pthread_attr_getinheritsched - Get Inherit Scheduler Flag,  Next: Thread Manager pthread_attr_setschedpolicy - Set Scheduling Policy,  Prev: Thread Manager pthread_attr_setinheritsched - Set Inherit Scheduler Flag,  Up: Thread Manager Services

17.4.12 pthread_attr_getinheritsched - Get Inherit Scheduler Flag
-----------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_getinheritsched(
       const pthread_attr_t *attr,
       int                  *inheritsched
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The inheritsched pointer argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_getinheritsched' routine is used to object the
current value of the inherit scheduler field in the thread attribute
object `attr'.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Thread Manager pthread_attr_setschedpolicy - Set Scheduling Policy,  Next: Thread Manager pthread_attr_getschedpolicy - Get Scheduling Policy,  Prev: Thread Manager pthread_attr_getinheritsched - Get Inherit Scheduler Flag,  Up: Thread Manager Services

17.4.13 pthread_attr_setschedpolicy - Set Scheduling Policy
-----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_setschedpolicy(
       pthread_attr_t *attr,
       int             policy
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

ENOTSUP
     The specified scheduler policy argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_setschedpolicy' routine is used to set the scheduler
policy field in the thread attribute object `attr' to the value
specified by `policy'.

Scheduling policies may be one of the following:

   * `SCHED_DEFAULT'

   * `SCHED_FIFO'

   * `SCHED_RR'

   * `SCHED_SPORADIC'

   * `SCHED_OTHER'


The precise meaning of each of these is discussed elsewhere in this
manual.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Thread Manager pthread_attr_getschedpolicy - Get Scheduling Policy,  Next: Thread Manager pthread_attr_setschedparam - Set Scheduling Parameters,  Prev: Thread Manager pthread_attr_setschedpolicy - Set Scheduling Policy,  Up: Thread Manager Services

17.4.14 pthread_attr_getschedpolicy - Get Scheduling Policy
-----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_getschedpolicy(
       const pthread_attr_t *attr,
       int                  *policy
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The specified scheduler policy argument pointer is invalid.


DESCRIPTION:
------------

The `pthread_attr_getschedpolicy' routine is used to obtain the
scheduler policy field from the thread attribute object `attr'.  The
value of this field is returned in `policy'.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Thread Manager pthread_attr_setschedparam - Set Scheduling Parameters,  Next: Thread Manager pthread_attr_getschedparam - Get Scheduling Parameters,  Prev: Thread Manager pthread_attr_getschedpolicy - Get Scheduling Policy,  Up: Thread Manager Services

17.4.15 pthread_attr_setschedparam - Set Scheduling Parameters
--------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_setschedparam(
       pthread_attr_t           *attr,
       const struct sched_param  param
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The specified scheduler parameter argument is invalid.


DESCRIPTION:
------------

The `pthread_attr_setschedparam' routine is used to set the scheduler
parameters field in the thread attribute object `attr' to the value
specified by `param'.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Thread Manager pthread_attr_getschedparam - Get Scheduling Parameters,  Next: Thread Manager pthread_create - Create a Thread,  Prev: Thread Manager pthread_attr_setschedparam - Set Scheduling Parameters,  Up: Thread Manager Services

17.4.16 pthread_attr_getschedparam - Get Scheduling Parameters
--------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_attr_getschedparam(
       const pthread_attr_t *attr,
       struct sched_param   *param
     );

STATUS CODES:
-------------

EINVAL
     The attribute pointer argument is invalid.

EINVAL
     The attribute set is not initialized.

EINVAL
     The specified scheduler parameter argument pointer is invalid.


DESCRIPTION:
------------

The `pthread_attr_getschedparam' routine is used to obtain the
scheduler parameters field from the thread attribute object `attr'.
The value of this field is returned in `param'.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Thread Manager pthread_create - Create a Thread,  Next: Thread Manager pthread_exit - Terminate the Current Thread,  Prev: Thread Manager pthread_attr_getschedparam - Get Scheduling Parameters,  Up: Thread Manager Services

17.4.17 pthread_create - Create a Thread
----------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_create(
       pthread_t             *thread,
       const pthread_attr_t  *attr,
       void                 (*start_routine)( void *),
       void                  *arg
     );

STATUS CODES:
-------------

EINVAL
     The attribute set is not initialized.

EINVAL
     The user specified a stack address and the size of the area was not
     large enough to meet this processor's minimum stack requirements.

EINVAL
     The specified scheduler inheritance policy was invalid.

ENOTSUP
     The specified contention scope was PTHREAD_SCOPE_PROCESS.

EINVAL
     The specified thread priority was invalid.

EINVAL
     The specified scheduling policy was invalid.

EINVAL
     The scheduling policy was SCHED_SPORADIC and the specified
     replenishment period is less than the initial budget.

EINVAL
     The scheduling policy was SCHED_SPORADIC and the specified low
     priority is invalid.

EAGAIN
     The system lacked the necessary resources to create another
     thread, or the self imposed limit on the total number of threads
     in a process PTHREAD_THREAD_MAX would be exceeded.

EINVAL
     Invalid argument passed.


DESCRIPTION:
------------

The `pthread_create' routine is used to create a new thread with the
attributes specified by `attr'. If the `attr' argument is `NULL', then
the default attribute set will be used. Modification of the contents of
`attr' after this thread is created does not have an impact on this
thread.

The thread begins execution at the address specified by `start_routine'
with `arg' as its only argument. If `start_routine' returns, then it is
functionally equivalent to the thread executing the `pthread_exit'
service.

Upon successful completion, the ID of the created thread is returned in
the `thread' argument.

NOTES:
------

There is no concept of a single main thread in RTEMS as there is in a
tradition UNIX system. POSIX requires that the implicit return of the
main thread results in the same effects as if there were a call to
`exit'. This does not occur in RTEMS.

The signal mask of the newly created thread is inherited from its
creator and the set of pending signals for this thread is empty.


File: posix_users.info,  Node: Thread Manager pthread_exit - Terminate the Current Thread,  Next: Thread Manager pthread_detach - Detach a Thread,  Prev: Thread Manager pthread_create - Create a Thread,  Up: Thread Manager Services

17.4.18 pthread_exit - Terminate the Current Thread
---------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     void pthread_exit(
       void *status
     );

STATUS CODES:
-------------

NONE

DESCRIPTION:
------------

The `pthread_exit' routine is used to terminate the calling thread.
The `status' is made available to any successful join with the
terminating thread.

When a thread returns from its start routine, it results in an implicit
call to the `pthread_exit' routine with the return value of the
function serving as the argument to `pthread_exit'.

NOTES:
------

Any cancellation cleanup handlers that hace been pushed and not yet
popped shall be popped in reverse of the order that they were pushed.
After all cancellation cleanup handlers have been executed, if the
thread has any thread-specific data, destructors for that data will be
invoked.

Thread termination does not release or free any application visible
resources including byt not limited to mutexes, file descriptors,
allocated memory, etc.. Similarly, exitting a thread does not result in
any process-oriented cleanup activity.

There is no concept of a single main thread in RTEMS as there is in a
tradition UNIX system. POSIX requires that the implicit return of the
main thread results in the same effects as if there were a call to
`exit'. This does not occur in RTEMS.

All access to any automatic variables allocated by the threads is lost
when the thread exits. Thus references (i.e. pointers) to local
variables of a thread should not be used in a global manner without
care. As a specific example, a pointer to a local variable should NOT
be used as the return value.


File: posix_users.info,  Node: Thread Manager pthread_detach - Detach a Thread,  Next: Thread Manager pthread_join - Wait for Thread Termination,  Prev: Thread Manager pthread_exit - Terminate the Current Thread,  Up: Thread Manager Services

17.4.19 pthread_detach - Detach a Thread
----------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_detach(
       pthread_t thread
     );

STATUS CODES:
-------------

ESRCH
     The thread specified is invalid.

EINVAL
     The thread specified is not a joinable thread.


DESCRIPTION:
------------

The `pthread_detach' routine is used to to indicate that storage for
`thread' can be reclaimed when the thread terminates without another
thread joinging with it.

NOTES:
------

If any threads have previously joined with the specified thread, then
they will remain joined with that thread. Any subsequent calls to
`pthread_join' on the specified thread will fail.


File: posix_users.info,  Node: Thread Manager pthread_join - Wait for Thread Termination,  Next: Thread Manager pthread_self - Get Thread ID,  Prev: Thread Manager pthread_detach - Detach a Thread,  Up: Thread Manager Services

17.4.20 pthread_join - Wait for Thread Termination
--------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_join(
       pthread_t    thread,
       void       **value_ptr
     );

STATUS CODES:
-------------

ESRCH
     The thread specified is invalid.

EINVAL
     The thread specified is not a joinable thread.

EDEADLK
     A deadlock was detected or thread is the calling thread.


DESCRIPTION:
------------

The `pthread_join' routine suspends execution of the calling thread
until `thread' terminates. If `thread' has already terminated, then
this routine returns immediately. The value returned by `thread' (i.e.
passed to `pthread_exit' is returned in `value_ptr'.

When this routine returns, then `thread' has been terminated.

NOTES:
------

The results of multiple simultaneous joins on the same thread is
undefined.

If any threads have previously joined with the specified thread, then
they will remain joined with that thread. Any subsequent calls to
`pthread_join' on the specified thread will fail.

If value_ptr is NULL, then no value is returned.


File: posix_users.info,  Node: Thread Manager pthread_self - Get Thread ID,  Next: Thread Manager pthread_equal - Compare Thread IDs,  Prev: Thread Manager pthread_join - Wait for Thread Termination,  Up: Thread Manager Services

17.4.21 pthread_self - Get Thread ID
------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     pthread_t pthread_self( void );

STATUS CODES:
-------------

The value returned is the ID of the calling thread.

DESCRIPTION:
------------

This routine returns the ID of the calling thread.

NOTES:
------

NONE


File: posix_users.info,  Node: Thread Manager pthread_equal - Compare Thread IDs,  Next: Thread Manager pthread_once - Dynamic Package Initialization,  Prev: Thread Manager pthread_self - Get Thread ID,  Up: Thread Manager Services

17.4.22 pthread_equal - Compare Thread IDs
------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_equal(
        pthread_t t1,
        pthread_t t2
     );

STATUS CODES:
-------------

zero
     The thread ids are not equal.

non-zero
     The thread ids are equal.


DESCRIPTION:
------------

The `pthread_equal' routine is used to compare two thread IDs and
determine if they are equal.

NOTES:
------

The behavior is undefined if the thread IDs are not valid.


File: posix_users.info,  Node: Thread Manager pthread_once - Dynamic Package Initialization,  Next: Thread Manager pthread_setschedparam - Set Thread Scheduling Parameters,  Prev: Thread Manager pthread_equal - Compare Thread IDs,  Up: Thread Manager Services

17.4.23 pthread_once - Dynamic Package Initialization
-----------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     pthread_once_t once_control = PTHREAD_ONCE_INIT;

     int pthread_once(
        pthread_once_t   *once_control,
        void            (*init_routine)(void)
     );

STATUS CODES:
-------------

NONE

DESCRIPTION:
------------

The `pthread_once' routine is used to provide controlled initialization
of variables. The first call to `pthread_once' by any thread with the
same `once_control' will result in the `init_routine' being invoked
with no arguments. Subsequent calls to `pthread_once' with the same
`once_control' will have no effect.

The `init_routine' is guaranteed to have run to completion when this
routine returns to the caller.

NOTES:
------

The behavior of `pthread_once' is undefined if `once_control' is
automatic storage (i.e. on a task stack) or is not initialized using
`PTHREAD_ONCE_INIT'.


File: posix_users.info,  Node: Thread Manager pthread_setschedparam - Set Thread Scheduling Parameters,  Next: Thread Manager pthread_getschedparam - Get Thread Scheduling Parameters,  Prev: Thread Manager pthread_once - Dynamic Package Initialization,  Up: Thread Manager Services

17.4.24 pthread_setschedparam - Set Thread Scheduling Parameters
----------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_setschedparam(
       pthread_t           thread,
       int                 policy,
       struct sched_param *param
     );

STATUS CODES:
-------------

EINVAL
     The scheduling parameters indicated by the parameter param is
     invalid.

EINVAL
     The value specified by policy is invalid.

EINVAL
     The scheduling policy was SCHED_SPORADIC and the specified
     replenishment period is less than the initial budget.

EINVAL
     The scheduling policy was SCHED_SPORADIC and the specified low
     priority is invalid.

ESRCH
     The thread indicated was invalid.


DESCRIPTION:
------------

The `pthread_setschedparam' routine is used to set the scheduler
parameters currently associated with the thread specified by `thread'
to the policy specified by `policy'. The contents of `param' are
interpreted based upon the `policy' argument.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Thread Manager pthread_getschedparam - Get Thread Scheduling Parameters,  Prev: Thread Manager pthread_setschedparam - Set Thread Scheduling Parameters,  Up: Thread Manager Services

17.4.25 pthread_getschedparam - Get Thread Scheduling Parameters
----------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_getschedparam(
       pthread_t           thread,
       int                *policy,
       struct sched_param *param
     );

STATUS CODES:
-------------

EINVAL
     The policy pointer argument is invalid.

EINVAL
     The scheduling parameters pointer argument is invalid.

ESRCH
     The thread indicated by the parameter thread is invalid.


DESCRIPTION:
------------

The `pthread_getschedparam' routine is used to obtain the scheduler
policy and parameters associated with `thread'.  The current policy and
associated parameters values returned in `policy' and `param',
respectively.

NOTES:
------

As required by POSIX, RTEMS defines the feature symbol
`_POSIX_THREAD_PRIORITY_SCHEDULING' to indicate that the family of
routines to which this routine belongs is supported.


File: posix_users.info,  Node: Key Manager,  Next: Key Manager Introduction,  Up: Top

18 Key Manager
**************

* Menu:

* Key Manager Introduction::
* Key Manager Background::
* Key Manager Operations::
* Key Manager Directives::


File: posix_users.info,  Node: Key Manager Introduction,  Next: Key Manager Background,  Prev: Key Manager,  Up: Key Manager

18.1 Introduction
=================

The key manager ...

The directives provided by the key manager are:

   * `pthread_key_create' - Create Thread Specific Data Key

   * `pthread_key_delete' - Delete Thread Specific Data Key

   * `pthread_setspecific' - Set Thread Specific Key Value

   * `pthread_getspecific' - Get Thread Specific Key Value


File: posix_users.info,  Node: Key Manager Background,  Next: Key Manager Operations,  Prev: Key Manager Introduction,  Up: Key Manager

18.2 Background
===============

There is currently no text in this section.


File: posix_users.info,  Node: Key Manager Operations,  Next: Key Manager Directives,  Prev: Key Manager Background,  Up: Key Manager

18.3 Operations
===============

There is currently no text in this section.


File: posix_users.info,  Node: Key Manager Directives,  Next: Key Manager pthread_key_create - Create Thread Specific Data Key,  Prev: Key Manager Operations,  Up: Key Manager

18.4 Directives
===============

* Menu:

* Key Manager pthread_key_create - Create Thread Specific Data Key::
* Key Manager pthread_key_delete - Delete Thread Specific Data Key::
* Key Manager pthread_setspecific - Set Thread Specific Key Value::
* Key Manager pthread_getspecific - Get Thread Specific Key Value::

This section details the key manager's directives.  A subsection is
dedicated to each of this manager's directives and describes the
calling sequence, related constants, usage, and status codes.


File: posix_users.info,  Node: Key Manager pthread_key_create - Create Thread Specific Data Key,  Next: Key Manager pthread_key_delete - Delete Thread Specific Data Key,  Prev: Key Manager Directives,  Up: Key Manager Directives

18.4.1 pthread_key_create - Create Thread Specific Data Key
-----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_key_create(
       pthread_key_t *key,
       void (*destructor)( void )
     );

STATUS CODES:
-------------

EAGAIN
     There were not enough resources available to create another key.

ENOMEM
     Insufficient memory exists to create the key.



File: posix_users.info,  Node: Key Manager pthread_key_delete - Delete Thread Specific Data Key,  Next: Key Manager pthread_setspecific - Set Thread Specific Key Value,  Prev: Key Manager pthread_key_create - Create Thread Specific Data Key,  Up: Key Manager Directives

18.4.2 pthread_key_delete - Delete Thread Specific Data Key
-----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_key_delete(
     pthread_key_t key,
     );

STATUS CODES:
-------------

EINVAL
     The key was invalid


DESCRIPTION:
------------

NOTES:
------


File: posix_users.info,  Node: Key Manager pthread_setspecific - Set Thread Specific Key Value,  Next: Key Manager pthread_getspecific - Get Thread Specific Key Value,  Prev: Key Manager pthread_key_delete - Delete Thread Specific Data Key,  Up: Key Manager Directives

18.4.3 pthread_setspecific - Set Thread Specific Key Value
----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     int pthread_setspecific(
     pthread_key_t key,
     const void *value
     );

STATUS CODES:
-------------

EINVAL
     The specified key is invalid.


DESCRIPTION:
------------

NOTES:
------


File: posix_users.info,  Node: Key Manager pthread_getspecific - Get Thread Specific Key Value,  Prev: Key Manager pthread_setspecific - Set Thread Specific Key Value,  Up: Key Manager Directives

18.4.4 pthread_getspecific - Get Thread Specific Key Value
----------------------------------------------------------

CALLING SEQUENCE:
-----------------

     #include <pthread.h>

     void *pthread_getspecific(
     pthread_key_t key
     );

STATUS CODES:
-------------

NULL
     There is no thread-specific data associated with the specified key.

non-NULL
     The data associated with the specified key.


DESCRIPTION:
------------

NOTES:
------


File: posix_users.info,  Node: Thread Cancellation Manager,  Next: Thread Cancellation Manager Introduction,  Up: Top

19 Thread Cancellation Manager
******************************

* Menu:

* Thread Cancellation Manager Introduction::
* Thread Cancellation Manager Background::
* Thread Cancellation Manager Operations::
* Thread Cancellation Manager Directives::


File: posix_users.info,  Node: Thread Cancellation Manager Introduction,  Next: Thread Cancellation Manager Background,  Prev: Thread Cancellation Manager,  Up: Thread Cancellation Manager

19.1 Introduction
=================

The thread cancellation manager is ...

The directives provided by the thread cancellation manager are:

   * `pthread_cancel' - Cancel Execution of a Thread

   * `pthread_setcancelstate' - Set Cancelability State

   * `pthread_setcanceltype' - Set Cancelability Type

   * `pthread_testcancel' - Create Cancellation Point

   * `pthread_cleanup_push' - Establish Cancellation Handler

   * `pthread_cleanup_pop' - Remove Cancellation Handler


File: posix_users.info,  Node: Thread Cancellation Manager Background,  Next: Thread Cancellation Manager Operations,  Prev: Thread Cancellation Manager Introduction,  Up: Thread Cancellation Manager

19.2 Background
===============

There is currently no text in this section.


File: posix_users.info,  Node: Thread Cancellation Manager Operations,  Next: Thread Cancellation Manager Directives,  Prev: Thread Cancellation Manager Background,  Up: Thread Cancellation Manager

19.3 Operations
===============

There is currently no text in this section.


File: posix_users.info,  Node: Thread Cancellation Manager Directives,  Next: Thread Cancellation Manager pthread_cancel - Cancel Execution of a Thread,  Prev: Thread Cancellation Manager Operations,  Up: Thread Cancellation Manager

19.4 Directives
===============

* Menu:

* Thread Cancellation Manager pthread_cancel - Cancel Execution of a Thread::
* Thread Cancellation Manager pthread_setcancelstate - Set Cancelability State::
* Thread Cancellation Manager pthread_setcanceltype - Set Cancelability Type::
* Thread Cancellation Manager pthread_testcancel - Create Cancellation Point::
* Thread Cancellation Manager pthread_cleanup_push - Establish Cancellation Handler::
* Thread Cancellation Manager pthread_cleanup_pop - Remove Cancellation Handler::

This section details the thread cancellation manager's directives.  A
subsection is dedicated to each of this manager's directives and
describes the calling sequence, related constants, usage, and status
codes.


File: posix_users.info,  Node: Thread Cancellation Manager pthread_cancel - Cancel Execution of a Thread,  Next: Thread Cancellation Manager pthread_setcancelstate - Set Cancelability State,  Prev: Thread Cancellation Manager Directives,  Up: Thread Cancellation Manager Directives

19.4.1 pthread_cancel - Cancel Execution of a Thread
----------------------------------------------------

CALLING SEQUENCE:
-----------------

     int pthread_cancel(
     );

STATUS CODES:
-------------

E
     The


DESCRIPTION:
------------

NOTES:
------


File: posix_users.info,  Node: Thread Cancellation Manager pthread_setcancelstate - Set Cancelability State,  Next: Thread Cancellation Manager pthread_setcanceltype - Set Cancelability Type,  Prev: Thread Cancellation Manager pthread_cancel - Cancel Execution of a Thread,  Up: Thread Cancellation Manager Directives

19.4.2 pthread_setcancelstate - Set Cancelability State
-------------------------------------------------------

CALLING SEQUENCE:
-----------------

     int pthread_setcancelstate(
     );

STATUS CODES:
-------------

E
     The


DESCRIPTION:
------------

NOTES:
------


File: posix_users.info,  Node: Thread Cancellation Manager pthread_setcanceltype - Set Cancelability Type,  Next: Thread Cancellation Manager pthread_testcancel - Create Cancellation Point,  Prev: Thread Cancellation Manager pthread_setcancelstate - Set Cancelability State,  Up: Thread Cancellation Manager Directives

19.4.3 pthread_setcanceltype - Set Cancelability Type
-----------------------------------------------------

CALLING SEQUENCE:
-----------------

     int pthread_setcanceltype(
     );

STATUS CODES:
-------------

E
     The


DESCRIPTION:
------------

NOTES:
------


File: posix_users.info,  Node: Thread Cancellation Manager pthread_testcancel - Create Cancellation Point,  Next: Thread Cancellation Manager pthread_cleanup_push - Establish Cancellation Handler,  Prev: Thread Cancellation Manager pthread_setcanceltype - Set Cancelability Type,  Up: Thread Cancellation Manager Directives

19.4.4 pthread_testcancel - Create Cancellation Point
-----------------------------------------------------

CALLING SEQUENCE:
-----------------

     int pthread_testcancel(
     );

STATUS CODES:
-------------

E
     The


DESCRIPTION:
------------

NOTES:
------


File: posix_users.info,  Node: Thread Cancellation Manager pthread_cleanup_push - Establish Cancellation Handler,  Next: Thread Cancellation Manager pthread_cleanup_pop - Remove Cancellation Handler,  Prev: Thread Cancellation Manager pthread_testcancel - Create Cancellation Point,  Up: Thread Cancellation Manager Directives

19.4.5 pthread_cleanup_push - Establish Cancellation Handler
------------------------------------------------------------

CALLING SEQUENCE:
-----------------

     int pthread_cleanup_push(
     );

STATUS CODES:
-------------

E
     The


DESCRIPTION:
------------

NOTES:
------


File: posix_users.info,  Node: Thread Cancellation Manager pthread_cleanup_pop - Remove Cancellation Handler,  Prev: Thread Cancellation Manager pthread_cleanup_push - Establish Cancellation Handler,  Up: Thread Cancellation Manager Directives

19.4.6 pthread_cleanup_pop - Remove Cancellation Handler
--------------------------------------------------------

CALLING SEQUENCE:
-----------------

     int pthread_cleanup_push(
     );

STATUS CODES:
-------------

E
     The


DESCRIPTION:
------------

NOTES:
------


File: posix_users.info,  Node: Services Provided by C Library (libc),  Next: Services Provided by C Library (libc) Introduction,  Up: Top

20 Services Provided by C Library (libc)
****************************************

* Menu:

* Services Provided by C Library (libc) Introduction::
* Services Provided by C Library (libc) Standard Utility Functions (stdlib.h)::
* Services Provided by C Library (libc) Character Type Macros and Functions (ctype.h)::
* Services Provided by C Library (libc) Input and Output (stdio.h)::
* Services Provided by C Library (libc) Strings and Memory (string.h)::
* Services Provided by C Library (libc) Signal Handling (signal.h)::
* Services Provided by C Library (libc) Time Functions (time.h)::
* Services Provided by C Library (libc) Locale (locale.h)::
* Services Provided by C Library (libc) Reentrant Versions of Functions::
* Services Provided by C Library (libc) Miscellaneous Macros and Functions::
* Services Provided by C Library (libc) Variable Argument Lists::
* Services Provided by C Library (libc) Reentrant System Calls::


File: posix_users.info,  Node: Services Provided by C Library (libc) Introduction,  Next: Services Provided by C Library (libc) Standard Utility Functions (stdlib.h),  Prev: Services Provided by C Library (libc),  Up: Services Provided by C Library (libc)

20.1 Introduction
=================

This section lists the routines that provided by the Newlib C Library.


File: posix_users.info,  Node: Services Provided by C Library (libc) Standard Utility Functions (stdlib.h),  Next: Services Provided by C Library (libc) Character Type Macros and Functions (ctype.h),  Prev: Services Provided by C Library (libc) Introduction,  Up: Services Provided by C Library (libc)

20.2 Standard Utility Functions (stdlib.h)
==========================================

   * `abort' - Abnormal termination of a program

   * `abs' - Integer absolute value (magnitude)

   * `assert' - Macro for Debugging Diagnostics

   * `atexit' - Request execution of functions at program exit

   * `atof' - String to double or float

   * `atoi' - String to integer

   * `bsearch' - Binary search

   * `calloc' - Allocate space for arrays

   * `div' - Divide two integers

   * `ecvtbuf' - Double or float to string of digits

   * `ecvt' - Double or float to string of digits (malloc result)

   * `__env_lock' - Lock environment list for getenv and setenv

   * `gvcvt' - Format double or float as string

   * `exit' - End program execution

   * `getenv' - Look up environment variable

   * `labs' - Long integer absolute value (magnitude)

   * `ldiv' - Divide two long integers

   * `malloc' - Allocate memory

   * `realloc' - Reallocate memory

   * `free' - Free previously allocated memory

   * `mallinfo' - Get information about allocated memory

   * `__malloc_lock' - Lock memory pool for malloc and free

   * `mbstowcs' - Minimal multibyte string to wide string converter

   * `mblen' - Minimal multibyte length

   * `mbtowc' - Minimal multibyte to wide character converter

   * `qsort' - Sort an array

   * `rand' - Pseudo-random numbers

   * `strtod' - String to double or float

   * `strtol' - String to long

   * `strtoul' - String to unsigned long

   * `system' - Execute command string

   * `wcstombs' - Minimal wide string to multibyte string converter

   * `wctomb' - Minimal wide character to multibyte converter


File: posix_users.info,  Node: Services Provided by C Library (libc) Character Type Macros and Functions (ctype.h),  Next: Services Provided by C Library (libc) Input and Output (stdio.h),  Prev: Services Provided by C Library (libc) Standard Utility Functions (stdlib.h),  Up: Services Provided by C Library (libc)

20.3 Character Type Macros and Functions (ctype.h)
==================================================

   * `isalnum' - Alphanumeric character predicate

   * `isalpha' - Alphabetic character predicate

   * `isascii' - ASCII character predicate

   * `iscntrl' - Control character predicate

   * `isdigit' - Decimal digit predicate

   * `islower' - Lower-case character predicate

   * `isprint' - Printable character predicates (isprint, isgraph)

   * `ispunct' - Punctuation character predicate

   * `isspace' - Whitespace character predicate

   * `isupper' - Uppercase character predicate

   * `isxdigit' - Hexadecimal digit predicate

   * `toascii' - Force integers to ASCII range

   * `tolower' - Translate characters to lower case

   * `toupper' - Translate characters to upper case


File: posix_users.info,  Node: Services Provided by C Library (libc) Input and Output (stdio.h),  Next: Services Provided by C Library (libc) Strings and Memory (string.h),  Prev: Services Provided by C Library (libc) Character Type Macros and Functions (ctype.h),  Up: Services Provided by C Library (libc)

20.4 Input and Output (stdio.h)
===============================

   * `clearerr' - Clear file or stream error indicator

   * `fclose' - Close a file

   * `feof' - Test for end of file

   * `ferror' - Test whether read/write error has occurred

   * `fflush' - Flush buffered file output

   * `fgetc' - Get a character from a file or stream

   * `fgetpos' - Record position in a stream or file

   * `fgets' - Get character string from a file or stream

   * `fiprintf' - Write formatted output to file (integer only)

   * `fopen' - Open a file

   * `fdopen' - Turn an open file into a stream

   * `fputc' - Write a character on a stream or file

   * `fputs' - Write a character string in a file or stream

   * `fread' - Read array elements from a file

   * `freopen' - Open a file using an existing file descriptor

   * `fseek' - Set file position

   * `fsetpos' - Restore position of a stream or file

   * `ftell' - Return position in a stream or file

   * `fwrite' - Write array elements from memory to a file or stream

   * `getc' - Get a character from a file or stream (macro)

   * `getchar' - Get a character from standard input (macro)

   * `gets' - Get character string from standard input (obsolete)

   * `iprintf' - Write formatted output (integer only)

   * `mktemp' - Generate unused file name

   * `perror' - Print an error message on standard error

   * `putc' - Write a character on a stream or file (macro)

   * `putchar' - Write a character on standard output (macro)

   * `puts' - Write a character string on standard output

   * `remove' - Delete a file's name

   * `rename' - Rename a file

   * `rewind' - Reinitialize a file or stream

   * `setbuf' - Specify full buffering for a file or stream

   * `setvbuf' - Specify buffering for a file or stream

   * `siprintf' - Write formatted output (integer only)

   * `printf' - Write formatted output

   * `scanf' - Scan and format input

   * `tmpfile' - Create a temporary file

   * `tmpnam' - Generate name for a temporary file

   * `vprintf' - Format variable argument list


File: posix_users.info,  Node: Services Provided by C Library (libc) Strings and Memory (string.h),  Next: Services Provided by C Library (libc) Signal Handling (signal.h),  Prev: Services Provided by C Library (libc) Input and Output (stdio.h),  Up: Services Provided by C Library (libc)

20.5 Strings and Memory (string.h)
==================================

   * `bcmp' - Compare two memory areas

   * `bcopy' - Copy memory regions

   * `bzero' - Initialize memory to zero

   * `index' - Search for character in string

   * `memchr' - Find character in memory

   * `memcmp' - Compare two memory areas

   * `memcpy' - Copy memory regions

   * `memmove' - Move possibly overlapping memory

   * `memset' - Set an area of memory

   * `rindex' - Reverse search for character in string

   * `strcasecmp' - Compare strings ignoring case

   * `strcat' - Concatenate strings

   * `strchr' - Search for character in string

   * `strcmp' - Character string compare

   * `strcoll' - Locale specific character string compare

   * `strcpy' - Copy string

   * `strcspn' - Count chars not in string

   * `strerror' - Convert error number to string

   * `strlen' - Character string length

   * `strlwr' - Convert string to lower case

   * `strncasecmp' - Compare strings ignoring case

   * `strncat' - Concatenate strings

   * `strncmp' - Character string compare

   * `strncpy' - Counted copy string

   * `strpbrk' - Find chars in string

   * `strrchr' - Reverse search for character in string

   * `strspn' - Find initial match

   * `strstr' - Find string segment

   * `strtok' - Get next token from a string

   * `strupr' - Convert string to upper case

   * `strxfrm' - Transform string


File: posix_users.info,  Node: Services Provided by C Library (libc) Signal Handling (signal.h),  Next: Services Provided by C Library (libc) Time Functions (time.h),  Prev: Services Provided by C Library (libc) Strings and Memory (string.h),  Up: Services Provided by C Library (libc)

20.6 Signal Handling (signal.h)
===============================

   * `raise' - Send a signal

   * `signal' - Specify handler subroutine for a signal


File: posix_users.info,  Node: Services Provided by C Library (libc) Time Functions (time.h),  Next: Services Provided by C Library (libc) Locale (locale.h),  Prev: Services Provided by C Library (libc) Signal Handling (signal.h),  Up: Services Provided by C Library (libc)

20.7 Time Functions (time.h)
============================

   * `asctime' - Format time as string

   * `clock' - Cumulative processor time

   * `ctime' - Convert time to local and format as string

   * `difftime' - Subtract two times

   * `gmtime' - Convert time to UTC (GMT) traditional representation

   * `localtime' - Convert time to local representation

   * `mktime' - Convert time to arithmetic representation

   * `strftime' - Flexible calendar time formatter

   * `time' - Get current calendar time (as single number)


File: posix_users.info,  Node: Services Provided by C Library (libc) Locale (locale.h),  Next: Services Provided by C Library (libc) Reentrant Versions of Functions,  Prev: Services Provided by C Library (libc) Time Functions (time.h),  Up: Services Provided by C Library (libc)

20.8 Locale (locale.h)
======================

   * `setlocale' - Select or query locale


File: posix_users.info,  Node: Services Provided by C Library (libc) Reentrant Versions of Functions,  Next: Services Provided by C Library (libc) Miscellaneous Macros and Functions,  Prev: Services Provided by C Library (libc) Locale (locale.h),  Up: Services Provided by C Library (libc)

20.9 Reentrant Versions of Functions
====================================

   * Equivalent for errno variable:

        * `errno_r' - XXX

   * Locale functions:

        * `localeconv_r' - XXX

        * `setlocale_r' - XXX

   * Equivalents for stdio variables:

        * `stdin_r' - XXX

        * `stdout_r' - XXX

        * `stderr_r' - XXX

   * Stdio functions:

        * `fdopen_r' - XXX

        * `perror_r' - XXX

        * `tempnam_r' - XXX

        * `fopen_r' - XXX

        * `putchar_r' - XXX

        * `tmpnam_r' - XXX

        * `getchar_r' - XXX

        * `puts_r' - XXX

        * `tmpfile_r' - XXX

        * `gets_r' - XXX

        * `remove_r' - XXX

        * `vfprintf_r' - XXX

        * `iprintf_r' - XXX

        * `rename_r' - XXX

        * `vsnprintf_r' - XXX

        * `mkstemp_r' - XXX

        * `snprintf_r' - XXX

        * `vsprintf_r' - XXX

        * `mktemp_t' - XXX

        * `sprintf_r' - XXX

   * Signal functions:

        * `init_signal_r' - XXX

        * `signal_r' - XXX

        * `kill_r' - XXX

        * `_sigtramp_r' - XXX

        * `raise_r' - XXX

   * Stdlib functions:

        * `calloc_r' - XXX

        * `mblen_r' - XXX

        * `srand_r' - XXX

        * `dtoa_r' - XXX

        * `mbstowcs_r' - XXX

        * `strtod_r' - XXX

        * `free_r' - XXX

        * `mbtowc_r' - XXX

        * `strtol_r' - XXX

        * `getenv_r' - XXX

        * `memalign_r' - XXX

        * `strtoul_r' - XXX

        * `mallinfo_r' - XXX

        * `mstats_r' - XXX

        * `system_r' - XXX

        * `malloc_r' - XXX

        * `rand_r' - XXX

        * `wcstombs_r' - XXX

        * `malloc_r' - XXX

        * `realloc_r' - XXX

        * `wctomb_r' - XXX

        * `malloc_stats_r' - XXX

        * `setenv_r' - XXX

   * String functions:

        * `strtok_r' - XXX

   * System functions:

        * `close_r' - XXX

        * `link_r' - XXX

        * `unlink_r' - XXX

        * `execve_r' - XXX

        * `lseek_r' - XXX

        * `wait_r' - XXX

        * `fcntl_r' - XXX

        * `open_r' - XXX

        * `write_r' - XXX

        * `fork_r' - XXX

        * `read_r' - XXX

        * `fstat_r' - XXX

        * `sbrk_r' - XXX

        * `gettimeofday_r' - XXX

        * `stat_r' - XXX

        * `getpid_r' - XXX

        * `times_r' - XXX

   * Time function:

        * `asctime_r' - XXX



File: posix_users.info,  Node: Services Provided by C Library (libc) Miscellaneous Macros and Functions,  Next: Services Provided by C Library (libc) Variable Argument Lists,  Prev: Services Provided by C Library (libc) Reentrant Versions of Functions,  Up: Services Provided by C Library (libc)

20.10 Miscellaneous Macros and Functions
========================================

   * `unctrl' - Return printable representation of a character


File: posix_users.info,  Node: Services Provided by C Library (libc) Variable Argument Lists,  Next: Services Provided by C Library (libc) Reentrant System Calls,  Prev: Services Provided by C Library (libc) Miscellaneous Macros and Functions,  Up: Services Provided by C Library (libc)

20.11 Variable Argument Lists
=============================

   * Stdarg (stdarg.h):
        * `va_start' - XXX

        * `va_arg' - XXX

        * `va_end' - XXX

   * Vararg (varargs.h):
        * `va_alist' - XXX

        * `va_start-trad' - XXX

        * `va_arg-trad' - XXX

        * `va_end-trad' - XXX


File: posix_users.info,  Node: Services Provided by C Library (libc) Reentrant System Calls,  Prev: Services Provided by C Library (libc) Variable Argument Lists,  Up: Services Provided by C Library (libc)

20.12 Reentrant System Calls
============================

   * `open_r' - XXX

   * `close_r' - XXX

   * `lseek_r' - XXX

   * `read_r' - XXX

   * `write_r' - XXX

   * `fork_r' - XXX

   * `wait_r' - XXX

   * `stat_r' - XXX

   * `fstat_r' - XXX

   * `link_r' - XXX

   * `unlink_r' - XXX

   * `sbrk_r' - XXX


File: posix_users.info,  Node: Services Provided by the Math Library (libm),  Next: Services Provided by the Math Library (libm) Introduction,  Up: Top

21 Services Provided by the Math Library (libm)
***********************************************

* Menu:

* Services Provided by the Math Library (libm) Introduction::
* Services Provided by the Math Library (libm) Standard Math Functions (math.h)::


File: posix_users.info,  Node: Services Provided by the Math Library (libm) Introduction,  Next: Services Provided by the Math Library (libm) Standard Math Functions (math.h),  Prev: Services Provided by the Math Library (libm),  Up: Services Provided by the Math Library (libm)

21.1 Introduction
=================

This section lists the routines that provided by the Newlib Math Library
(libm).


File: posix_users.info,  Node: Services Provided by the Math Library (libm) Standard Math Functions (math.h),  Prev: Services Provided by the Math Library (libm) Introduction,  Up: Services Provided by the Math Library (libm)

21.2 Standard Math Functions (math.h)
=====================================

   * `acos' - Arccosine

   * `acosh' - Inverse hyperbolic cosine

   * `asin' - Arcsine

   * `asinh' - Inverse hyperbolic sine

   * `atan' - Arctangent

   * `atan2' - Arctangent of y/x

   * `atanh' - Inverse hyperbolic tangent

   * `jN' - Bessel functions (jN and yN)

   * `cbrt' - Cube root

   * `copysign' - Sign of Y and magnitude of X

   * `cosh' - Hyperbolic cosine

   * `erf' - Error function (erf and erfc)

   * `exp' - Exponential

   * `expm1' - Exponential of x and - 1

   * `fabs' - Absolute value (magnitude)

   * `floor' - Floor and ceiling (floor and ceil)

   * `fmod' - Floating-point remainder (modulo)

   * `frexp' - Split floating-point number

   * `gamma' - Logarithmic gamma function

   * `hypot' - Distance from origin

   * `ilogb' - Get exponent

   * `infinity' - Floating infinity

   * `isnan' - Check type of number

   * `ldexp' - Load exponent

   * `log' - Natural logarithms

   * `log10' - Base 10 logarithms

   * `log1p' - Log of 1 + X

   * `matherr' - Modifiable math error handler

   * `modf' - Split fractional and integer parts

   * `nan' - Floating Not a Number

   * `nextafter' - Get next representable number

   * `pow' - X to the power Y

   * `remainder' - remainder of X divided by Y

   * `scalbn' - scalbn

   * `sin' - Sine or cosine (sin and cos)

   * `sinh' - Hyperbolic sine

   * `sqrt' - Positive square root

   * `tan' - Tangent

   * `tanh' - Hyperbolic tangent


File: posix_users.info,  Node: Status of Implementation,  Up: Top

22 Status of Implementation
***************************

This chapter provides an overview of the status of the implementation
of the POSIX API for RTEMS.  The POSIX 1003.1b Compliance Guide
provides more detailed information regarding the implementation of each
of the numerous functions, constants, and macros specified by the POSIX
1003.1b standard.

RTEMS supports many of the process and user/group oriented services in
a "single user/single process" manner.  This means that although these
services may be of limited usefulness or functionality, they are
provided and do work in a coherent manner.  This is significant when
porting existing code from UNIX to RTEMS.

   * Implementation
        * The current implementation of `dup()' is insufficient.

        * FIFOs `mkfifo()' are not currently implemented.

        * Asynchronous IO is not implemented.

        * The `flockfile()' family is not implemented

        * getc/putc unlocked family is not implemented

        * Shared Memory is not implemented

        * Mapped Memory is not implemented

        * NOTES:
             * For Shared Memory and Mapped Memory services, it is
               unclear what level of support is appropriate and
               possible for RTEMS.

   * Functional Testing
        * Tests for unimplemented services

   * Performance Testing
        * There are no POSIX Performance Tests.

   * Documentation
        * Many of the service description pages are not complete in this
          manual.  These need to be completed and information added to
          the background and operations sections.

        * Example programs (not just tests) would be very nice.



File: posix_users.info,  Node: Top,  Next: Preface,  Prev: (dir),  Up: (dir)

posix_users
***********

This is the online version of the RTEMS POSIX API User's Guide

* Menu:

* Preface::
* Process Creation and Execution Manager::
* Signal Manager::
* Process Environment Manager::
* Files and Directories Manager::
* Input and Output Primitives Manager::
* Device- and Class- Specific Functions Manager::
* Language-Specific Services for the C Programming Language Manager::
* System Databases Manager::
* Semaphore Manager::
* Mutex Manager::
* Condition Variable Manager::
* Memory Management Manager::
* Scheduler Manager::
* Clock Manager::
* Timer Manager::
* Message Passing Manager::
* Thread Manager::
* Key Manager::
* Thread Cancellation Manager::
* Services Provided by C Library (libc)::
* Services Provided by the Math Library (libm)::
* Status of Implementation::
* Command and Variable Index::
* Concept Index::


File: posix_users.info,  Node: Command and Variable Index,  Next: Concept Index,  Up: Top

Command and Variable Index
**************************

 [index ]
* Menu:

* _exit:                                 Process Creation and Execution Manager _exit - Terminate a Process.
                                                               (line  6)
* access:                                Files and Directories Manager access - Check permissions for a file.
                                                               (line  6)
* aio_cancel:                            Input and Output Primitives Manager aio_cancel - Cancel Asynchronous I/O Request.
                                                               (line  6)
* aio_error:                             Input and Output Primitives Manager aio_error - Retrieve Error Status of Asynchronous I/O Operation.
                                                               (line  6)
* aio_fsync:                             Input and Output Primitives Manager aio_fsync - Asynchronous File Synchronization.
                                                               (line  6)
* aio_read:                              Input and Output Primitives Manager aio_read - Asynchronous Read.
                                                               (line  6)
* aio_return:                            Input and Output Primitives Manager aio_return - Retrieve Return Status Asynchronous I/O Operation.
                                                               (line  6)
* aio_suspend:                           Input and Output Primitives Manager aio_suspend - Wait for Asynchronous I/O Request.
                                                               (line  6)
* aio_write:                             Input and Output Primitives Manager aio_write - Asynchronous Write.
                                                               (line  6)
* alarm <1>:                             Signal Manager ualarm - Schedule Alarm in Microseconds.
                                                               (line  6)
* alarm:                                 Signal Manager alarm - Schedule Alarm.
                                                               (line  6)
* asctime_r:                             Language-Specific Services for the C Programming Language Manager asctime_r - Reentrant struct tm to ASCII Time Conversion.
                                                               (line  6)
* cfgetispeed:                           Device- and Class- Specific Functions Manager cfgetispeed - Reads terminal input baud rate.
                                                               (line  6)
* cfgetospeed:                           Device- and Class- Specific Functions Manager cfgetospeed - Reads terminal output baud rate.
                                                               (line  6)
* cfsetispeed:                           Device- and Class- Specific Functions Manager cfsetispeed - Sets terminal input baud rate.
                                                               (line  6)
* cfsetospeed:                           Device- and Class- Specific Functions Manager cfsetospeed - Sets terminal output baud rate.
                                                               (line  6)
* chdir:                                 Files and Directories Manager chdir - Changes the current working directory.
                                                               (line  6)
* chmod:                                 Files and Directories Manager chmod - Changes file mode..
                                                               (line  6)
* chown:                                 Files and Directories Manager chown - Changes the owner and/or group of a file..
                                                               (line  6)
* clock_getres:                          Clock Manager clock_getres - Get Clock Resolution.
                                                               (line  6)
* clock_gettime:                         Clock Manager clock_gettime - Obtain Time of Day.
                                                               (line  6)
* clock_settime:                         Clock Manager clock_settime - Set Time of Day.
                                                               (line  6)
* close:                                 Input and Output Primitives Manager close - Closes a file.
                                                               (line  6)
* closedir:                              Files and Directories Manager closedir - Ends directory read operation.
                                                               (line  6)
* creat:                                 Files and Directories Manager creat - Create a new file or rewrite an existing one.
                                                               (line  6)
* ctermid:                               Process Environment Manager ctermid - Generate Terminal Pathname.
                                                               (line  6)
* ctime_r:                               Language-Specific Services for the C Programming Language Manager ctime_r - Reentrant time_t to ASCII Time Conversion.
                                                               (line  6)
* dup:                                   Input and Output Primitives Manager dup - Duplicates an open file descriptor.
                                                               (line  6)
* dup2:                                  Input and Output Primitives Manager dup2 - Duplicates an open file descriptor.
                                                               (line  6)
* execl:                                 Process Creation and Execution Manager execl - Execute a File.
                                                               (line  6)
* execle:                                Process Creation and Execution Manager execle - Execute a File.
                                                               (line  6)
* execlp:                                Process Creation and Execution Manager execlp - Execute a File.
                                                               (line  6)
* execv:                                 Process Creation and Execution Manager execv - Execute a File.
                                                               (line  6)
* execve:                                Process Creation and Execution Manager execve - Execute a File.
                                                               (line  6)
* execvp:                                Process Creation and Execution Manager execvp - Execute a File.
                                                               (line  6)
* fchdir:                                Files and Directories Manager fchdir - Changes the current working directory.
                                                               (line  6)
* fchmod:                                Files and Directories Manager fchmod - Changes permissions of a file.
                                                               (line  6)
* fcntl:                                 Input and Output Primitives Manager fcntl - Manipulates an open file descriptor.
                                                               (line  6)
* fdatasync:                             Input and Output Primitives Manager fdatasync - Synchronize file in-core data with that on disk.
                                                               (line  6)
* fdopen:                                Language-Specific Services for the C Programming Language Manager fdopen - Associate Stream with File Descriptor.
                                                               (line  6)
* fileno:                                Language-Specific Services for the C Programming Language Manager fileno - Obtain File Descriptor Number for this File.
                                                               (line  6)
* flockfile:                             Language-Specific Services for the C Programming Language Manager flockfile - Acquire Ownership of File Stream.
                                                               (line  6)
* fork:                                  Process Creation and Execution Manager fork - Create a Process.
                                                               (line  6)
* fpathconf:                             Files and Directories Manager fpathconf - Gets configuration values for files.
                                                               (line  6)
* fstat:                                 Files and Directories Manager fstat - Gets file status.
                                                               (line  6)
* fsync:                                 Input and Output Primitives Manager fsync - Synchronize file complete in-core state with that on disk.
                                                               (line  6)
* ftruncate:                             Files and Directories Manager ftruncate - truncate a file to a specified length.
                                                               (line  6)
* ftrylockfile:                          Language-Specific Services for the C Programming Language Manager ftrylockfile - Poll to Acquire Ownership of File Stream.
                                                               (line  6)
* funlockfile:                           Language-Specific Services for the C Programming Language Manager funlockfile - Release Ownership of File Stream.
                                                               (line  6)
* getc_unlocked:                         Language-Specific Services for the C Programming Language Manager getc_unlocked - Get Character without Locking.
                                                               (line  6)
* getchar_unlocked:                      Language-Specific Services for the C Programming Language Manager getchar_unlocked - Get Character from stdin without Locking.
                                                               (line  6)
* getcwd:                                Files and Directories Manager getcwd - Gets current working directory.
                                                               (line  6)
* getdents:                              Files and Directories Manager getdents - Get directory entries.
                                                               (line  6)
* getegid:                               Process Environment Manager getegid - Get Effective Group ID.
                                                               (line  6)
* getenv:                                Process Environment Manager getenv - Get Environment Variables.
                                                               (line  6)
* geteuid:                               Process Environment Manager geteuid - Get Effective User ID.
                                                               (line  6)
* getgid:                                Process Environment Manager getgid - Get Real Group ID.
                                                               (line  6)
* getgrgid:                              System Databases Manager getgrgid - Get Group File Entry for ID.
                                                               (line  6)
* getgrgid_r:                            System Databases Manager getgrgid_r - Reentrant Get Group File Entry.
                                                               (line  6)
* getgrnam:                              System Databases Manager getgrnam - Get Group File Entry for Name.
                                                               (line  6)
* getgrnam_r:                            System Databases Manager getgrnam_r - Reentrant Get Group File Entry for Name.
                                                               (line  6)
* getgroups:                             Process Environment Manager getgroups - Get Supplementary Group IDs.
                                                               (line  6)
* getlogin:                              Process Environment Manager getlogin - Get User Name.
                                                               (line  6)
* getlogin_r:                            Process Environment Manager getlogin_r - Reentrant Get User Name.
                                                               (line  6)
* getpgrp:                               Process Environment Manager getpgrp - Get Process Group ID.
                                                               (line  6)
* getpid:                                Process Environment Manager getpid - Get Process ID.
                                                               (line  6)
* getppid:                               Process Environment Manager getppid - Get Parent Process ID.
                                                               (line  6)
* getpwnam:                              System Databases Manager getpwnam - Password File Entry for Name.
                                                               (line  6)
* getpwnam_r:                            System Databases Manager getpwnam_r - Reentrant Get Password File Entry for Name.
                                                               (line  6)
* getpwuid:                              System Databases Manager getpwuid - Get Password File Entry for UID.
                                                               (line  6)
* getpwuid_r:                            System Databases Manager getpwuid_r - Reentrant Get Password File Entry for UID.
                                                               (line  6)
* gettimeofday:                          Clock Manager gettimeofday - Get the Time of Day.
                                                               (line  6)
* getuid:                                Process Environment Manager getuid - Get User ID.
                                                               (line  6)
* gmtime_r:                              Language-Specific Services for the C Programming Language Manager gmtime_r - Reentrant UTC Time Conversion.
                                                               (line  6)
* isatty:                                Process Environment Manager isatty - Determine if File Descriptor is Terminal.
                                                               (line  6)
* kill:                                  Signal Manager kill - Send a Signal to a Process.
                                                               (line  6)
* link:                                  Files and Directories Manager link - Creates a link to a file.
                                                               (line  6)
* lio_listio:                            Input and Output Primitives Manager lio_listio - List Directed I/O.
                                                               (line  6)
* localtime_r:                           Language-Specific Services for the C Programming Language Manager localtime_r - Reentrant Local Time Conversion.
                                                               (line  6)
* longjmp:                               Language-Specific Services for the C Programming Language Manager longjmp - Non-Local Jump to a Saved Context.
                                                               (line  6)
* lseek:                                 Input and Output Primitives Manager lseek - Reposition read/write file offset.
                                                               (line  6)
* lstat:                                 Files and Directories Manager lstat - Gets file status.
                                                               (line  6)
* microseonds alarm:                     Signal Manager ualarm - Schedule Alarm in Microseconds.
                                                               (line  6)
* mkdir:                                 Files and Directories Manager mkdir - Makes a directory.
                                                               (line  6)
* mkfifo:                                Files and Directories Manager mkfifo - Makes a FIFO special file.
                                                               (line  6)
* mknod:                                 Files and Directories Manager mknod - create a directory.
                                                               (line  6)
* mlock:                                 Memory Management Manager mlock - Lock a Range of the Process Address Space.
                                                               (line  6)
* mlockall:                              Memory Management Manager mlockall - Lock the Address Space of a Process.
                                                               (line  6)
* mmap:                                  Memory Management Manager mmap - Map Process Addresses to a Memory Object.
                                                               (line  6)
* mount:                                 Input and Output Primitives Manager mount - Mount a file system.
                                                               (line  6)
* mprotect:                              Memory Management Manager mprotect - Change Memory Protection.
                                                               (line  6)
* mq_attr:                               Message Passing Manager Building a Message Queue Attribute Set.
                                                               (line  9)
* mq_close:                              Message Passing Manager mq_close - Close a Message Queue.
                                                               (line  6)
* mq_getattr:                            Message Passing Manager mq_getattr - Get Message Queue Attributes.
                                                               (line  6)
* mq_notify:                             Message Passing Manager mq_notify - Notify Process that a Message is Available.
                                                               (line  6)
* mq_open:                               Message Passing Manager mq_open - Open a Message Queue.
                                                               (line  6)
* mq_receive:                            Message Passing Manager mq_receive - Receive a Message from a Message Queue.
                                                               (line  6)
* mq_send:                               Message Passing Manager mq_send - Send a Message to a Message Queue.
                                                               (line  6)
* mq_setattr:                            Message Passing Manager mq_setattr - Set Message Queue Attributes.
                                                               (line  6)
* mq_unlink:                             Message Passing Manager mq_unlink - Remove a Message Queue.
                                                               (line  6)
* mqd_t:                                 Message Passing Manager Message Queues.
                                                               (line 17)
* msync:                                 Memory Management Manager msync - Memory Object Synchronization.
                                                               (line  6)
* munlock:                               Memory Management Manager munlock - Unlock a Range of the Process Address Space.
                                                               (line  6)
* munlockall:                            Memory Management Manager munlockall - Unlock the Address Space of a Process.
                                                               (line  6)
* munmap:                                Memory Management Manager munmap - Unmap Previously Mapped Addresses.
                                                               (line  6)
* nanosleep:                             Clock Manager nanosleep - Delay with High Resolution.
                                                               (line  6)
* open:                                  Files and Directories Manager open - Opens a file.
                                                               (line  6)
* opendir:                               Files and Directories Manager opendir - Open a Directory.
                                                               (line  6)
* pathconf:                              Files and Directories Manager pathconf - Gets configuration values for files.
                                                               (line  6)
* pause:                                 Signal Manager pause - Suspend Process Execution.
                                                               (line  6)
* pipe:                                  Input and Output Primitives Manager pipe - Create an Inter-Process Channel.
                                                               (line  6)
* pthread_atfork:                        Process Creation and Execution Manager pthread_atfork - Register Fork Handlers.
                                                               (line  6)
* pthread_attr_destroy:                  Thread Manager pthread_attr_destroy - Destroy a Thread Attribute Set.
                                                               (line  6)
* pthread_attr_getdetachstate:           Thread Manager pthread_attr_getdetachstate - Get Detach State.
                                                               (line  6)
* pthread_attr_getinheritsched:          Thread Manager pthread_attr_getinheritsched - Get Inherit Scheduler Flag.
                                                               (line  6)
* pthread_attr_getschedparam:            Thread Manager pthread_attr_getschedparam - Get Scheduling Parameters.
                                                               (line  6)
* pthread_attr_getschedpolicy:           Thread Manager pthread_attr_getschedpolicy - Get Scheduling Policy.
                                                               (line  6)
* pthread_attr_getscope:                 Thread Manager pthread_attr_getscope - Get Thread Scheduling Scope.
                                                               (line  6)
* pthread_attr_getstackaddr:             Thread Manager pthread_attr_getstackaddr - Get Thread Stack Address.
                                                               (line  6)
* pthread_attr_getstacksize:             Thread Manager pthread_attr_getstacksize - Get Thread Stack Size.
                                                               (line  6)
* pthread_attr_init:                     Thread Manager pthread_attr_init - Initialize a Thread Attribute Set.
                                                               (line  6)
* pthread_attr_setdetachstate:           Thread Manager pthread_attr_setdetachstate - Set Detach State.
                                                               (line  6)
* pthread_attr_setinheritsched:          Thread Manager pthread_attr_setinheritsched - Set Inherit Scheduler Flag.
                                                               (line  6)
* pthread_attr_setschedparam:            Thread Manager pthread_attr_setschedparam - Set Scheduling Parameters.
                                                               (line  6)
* pthread_attr_setschedpolicy:           Thread Manager pthread_attr_setschedpolicy - Set Scheduling Policy.
                                                               (line  6)
* pthread_attr_setscope:                 Thread Manager pthread_attr_setscope - Set Thread Scheduling Scope.
                                                               (line  6)
* pthread_attr_setstackaddr:             Thread Manager pthread_attr_setstackaddr - Set Thread Stack Address.
                                                               (line  6)
* pthread_attr_setstacksize:             Thread Manager pthread_attr_setstacksize - Set Thread Stack Size.
                                                               (line  6)
* pthread_cancel:                        Thread Cancellation Manager pthread_cancel - Cancel Execution of a Thread.
                                                               (line  6)
* pthread_cleanup_pop:                   Thread Cancellation Manager pthread_cleanup_pop - Remove Cancellation Handler.
                                                               (line  6)
* pthread_cleanup_push:                  Thread Cancellation Manager pthread_cleanup_push - Establish Cancellation Handler.
                                                               (line  6)
* pthread_cond_broadcast:                Condition Variable Manager pthread_cond_broadcast - Broadcast a Condition Variable.
                                                               (line  6)
* pthread_cond_destroy:                  Condition Variable Manager pthread_cond_destroy - Destroy a Condition Variable.
                                                               (line  6)
* pthread_cond_init:                     Condition Variable Manager pthread_cond_init - Initialize a Condition Variable.
                                                               (line  6)
* pthread_cond_signal:                   Condition Variable Manager pthread_cond_signal - Signal a Condition Variable.
                                                               (line  6)
* pthread_cond_timedwait:                Condition Variable Manager pthread_cond_timedwait - Wait with Timeout a Condition Variable.
                                                               (line  6)
* pthread_cond_wait:                     Condition Variable Manager pthread_cond_wait - Wait on a Condition Variable.
                                                               (line  6)
* pthread_condattr_destroy:              Condition Variable Manager pthread_condattr_destroy - Destroy a Condition Variable Attribute Set.
                                                               (line  6)
* pthread_condattr_getpshared:           Condition Variable Manager pthread_condattr_getpshared - Get Process Shared Attribute.
                                                               (line  6)
* pthread_condattr_init:                 Condition Variable Manager pthread_condattr_init - Initialize a Condition Variable Attribute Set.
                                                               (line  6)
* pthread_condattr_setpshared:           Condition Variable Manager pthread_condattr_setpshared - Set Process Shared Attribute.
                                                               (line  6)
* pthread_create:                        Thread Manager pthread_create - Create a Thread.
                                                               (line  6)
* pthread_detach:                        Thread Manager pthread_detach - Detach a Thread.
                                                               (line  6)
* pthread_equal:                         Thread Manager pthread_equal - Compare Thread IDs.
                                                               (line  6)
* pthread_exit:                          Thread Manager pthread_exit - Terminate the Current Thread.
                                                               (line  6)
* pthread_getschedparam:                 Thread Manager pthread_getschedparam - Get Thread Scheduling Parameters.
                                                               (line  6)
* pthread_join:                          Thread Manager pthread_join - Wait for Thread Termination.
                                                               (line  6)
* pthread_kill:                          Signal Manager pthread_kill - Send a Signal to a Thread.
                                                               (line  6)
* pthread_mutex_destroy:                 Mutex Manager pthread_mutex_destroy - Destroy a Mutex.
                                                               (line  6)
* pthread_mutex_getprioceiling:          Mutex Manager pthread_mutex_getprioceiling - Get the Current Priority Ceiling.
                                                               (line  6)
* pthread_mutex_init:                    Mutex Manager pthread_mutex_init - Initialize a Mutex.
                                                               (line  6)
* pthread_mutex_lock:                    Mutex Manager pthread_mutex_lock - Lock a Mutex.
                                                               (line  6)
* pthread_mutex_setprioceiling:          Mutex Manager pthread_mutex_setprioceiling - Dynamically Set the Priority Ceiling.
                                                               (line  6)
* pthread_mutex_timedlock:               Mutex Manager pthread_mutex_timedlock - Lock a Mutex with Timeout.
                                                               (line  6)
* pthread_mutex_trylock:                 Mutex Manager pthread_mutex_trylock - Poll to Lock a Mutex.
                                                               (line  6)
* pthread_mutex_unlock:                  Mutex Manager pthread_mutex_unlock - Unlock a Mutex.
                                                               (line  6)
* pthread_mutexattr_destroy:             Mutex Manager pthread_mutexattr_destroy - Destroy a Mutex Attribute Set.
                                                               (line  6)
* pthread_mutexattr_getprioceiling:      Mutex Manager pthread_mutexattr_getprioceiling - Get the Priority Ceiling.
                                                               (line  6)
* pthread_mutexattr_getprotocol:         Mutex Manager pthread_mutexattr_getprotocol - Get the Blocking Protocol.
                                                               (line  6)
* pthread_mutexattr_getpshared:          Mutex Manager pthread_mutexattr_getpshared - Get the Visibility.
                                                               (line  6)
* pthread_mutexattr_init:                Mutex Manager pthread_mutexattr_init - Initialize a Mutex Attribute Set.
                                                               (line  6)
* pthread_mutexattr_setprioceiling:      Mutex Manager pthread_mutexattr_setprioceiling - Set the Priority Ceiling.
                                                               (line  6)
* pthread_mutexattr_setprotocol:         Mutex Manager pthread_mutexattr_setprotocol - Set the Blocking Protocol.
                                                               (line  6)
* pthread_mutexattr_setpshared:          Mutex Manager pthread_mutexattr_setpshared - Set the Visibility.
                                                               (line  6)
* pthread_once:                          Thread Manager pthread_once - Dynamic Package Initialization.
                                                               (line  6)
* pthread_self:                          Thread Manager pthread_self - Get Thread ID.
                                                               (line  6)
* pthread_setcancelstate:                Thread Cancellation Manager pthread_setcancelstate - Set Cancelability State.
                                                               (line  6)
* pthread_setcanceltype:                 Thread Cancellation Manager pthread_setcanceltype - Set Cancelability Type.
                                                               (line  6)
* pthread_setschedparam:                 Thread Manager pthread_setschedparam - Set Thread Scheduling Parameters.
                                                               (line  6)
* pthread_sigmask:                       Signal Manager pthread_sigmask - Examine and Change Thread Blocked Signals.
                                                               (line  6)
* pthread_testcancel:                    Thread Cancellation Manager pthread_testcancel - Create Cancellation Point.
                                                               (line  6)
* putc_unlocked:                         Language-Specific Services for the C Programming Language Manager putc_unlocked - Put Character without Locking.
                                                               (line  6)
* putchar_unlocked:                      Language-Specific Services for the C Programming Language Manager putchar_unlocked - Put Character to stdin without Locking.
                                                               (line  6)
* rand_r:                                Language-Specific Services for the C Programming Language Manager rand_r - Reentrant Random Number Generation.
                                                               (line  6)
* read:                                  Input and Output Primitives Manager read - Reads from a file.
                                                               (line  6)
* readdir:                               Files and Directories Manager readdir - Reads a directory.
                                                               (line  6)
* readlink:                              Files and Directories Manager readlink - Obtain the name of a symbolic link destination.
                                                               (line  6)
* readv:                                 Input and Output Primitives Manager readv - Vectored read from a file.
                                                               (line  6)
* rename:                                Files and Directories Manager rename - Renames a file.
                                                               (line  6)
* rewinddir:                             Files and Directories Manager rewinddir - Resets the readdir() pointer.
                                                               (line  6)
* rmdir:                                 Files and Directories Manager rmdir - Delete a directory.
                                                               (line  6)
* scandir:                               Files and Directories Manager scandir - Scan a directory for matching entries.
                                                               (line  6)
* sched_get_priority_max:                Scheduler Manager sched_get_priority_max - Get Maximum Priority Value.
                                                               (line  6)
* sched_get_priority_min:                Scheduler Manager sched_get_priority_min - Get Minimum Priority Value.
                                                               (line  6)
* sched_rr_get_interval:                 Scheduler Manager sched_rr_get_interval - Get Timeslicing Quantum.
                                                               (line  6)
* sched_yield:                           Scheduler Manager sched_yield - Yield the Processor.
                                                               (line  6)
* sem_close:                             Semaphore Manager sem_close - Close a named semaphore.
                                                               (line  6)
* sem_destroy:                           Semaphore Manager sem_destroy - Destroy an unnamed semaphore.
                                                               (line  6)
* sem_getvalue:                          Semaphore Manager sem_getvalue - Get the value of a semaphore.
                                                               (line  6)
* sem_init:                              Semaphore Manager sem_init - Initialize an unnamed semaphore.
                                                               (line  6)
* sem_open:                              Semaphore Manager sem_open - Open a named semaphore.
                                                               (line  6)
* sem_post:                              Semaphore Manager sem_post - Unlock a Semaphore.
                                                               (line  6)
* sem_t:                                 Semaphore Manager "sem_t" Structure.
                                                               (line  6)
* sem_timedwait:                         Semaphore Manager sem_timedwait - Wait on a Semaphore for a Specified Time.
                                                               (line  6)
* sem_trywait:                           Semaphore Manager sem_trywait - Non-blocking Wait on a Semaphore.
                                                               (line  6)
* sem_unlink:                            Semaphore Manager sem_unlink - Unlink a semaphore.
                                                               (line  6)
* sem_wait:                              Semaphore Manager sem_wait - Wait on a Semaphore.
                                                               (line  6)
* setenv:                                Process Environment Manager setenv - Set Environment Variables.
                                                               (line  6)
* setgid:                                Process Environment Manager setgid - Set Group ID.
                                                               (line  6)
* setjmp:                                Language-Specific Services for the C Programming Language Manager setjmp - Save Context for Non-Local Goto.
                                                               (line  6)
* setlocale:                             Language-Specific Services for the C Programming Language Manager setlocale - Set the Current Locale.
                                                               (line  6)
* setpgid:                               Process Environment Manager setpgid - Set Process Group ID for Job Control.
                                                               (line  6)
* setsid:                                Process Environment Manager setsid - Create Session and Set Process Group ID.
                                                               (line  6)
* setuid:                                Process Environment Manager setuid - Set User ID.
                                                               (line  6)
* shm_open:                              Memory Management Manager shm_open - Open a Shared Memory Object.
                                                               (line  6)
* shm_unlink:                            Memory Management Manager shm_unlink - Remove a Shared Memory Object.
                                                               (line  6)
* sigaction:                             Signal Manager sigaction - Examine and Change Signal Action.
                                                               (line  6)
* sigaddset:                             Signal Manager sigaddset - Add a Signal to a Signal Set.
                                                               (line  6)
* sigdelset:                             Signal Manager sigdelset - Delete a Signal from a Signal Set.
                                                               (line  6)
* sigemptyset:                           Signal Manager sigemptyset - Empty a Signal Set.
                                                               (line  6)
* sigfillset:                            Signal Manager sigfillset - Fill a Signal Set.
                                                               (line  6)
* sigismember:                           Signal Manager sigismember - Is Signal a Member of a Signal Set.
                                                               (line  6)
* siglongjmp:                            Language-Specific Services for the C Programming Language Manager siglongjmp - Non-Local Jump with Signal Status to a Saved Context.
                                                               (line  6)
* sigpending:                            Signal Manager sigpending - Examine Pending Signals.
                                                               (line  6)
* sigprocmask:                           Signal Manager sigprocmask - Examine and Change Process Blocked Signals.
                                                               (line  6)
* sigqueue:                              Signal Manager sigqueue - Queue a Signal to a Process.
                                                               (line  6)
* sigsetjmp:                             Language-Specific Services for the C Programming Language Manager sigsetjmp - Save Context with Signal Status for Non-Local Goto.
                                                               (line  6)
* sigsuspend:                            Signal Manager sigsuspend - Wait for a Signal.
                                                               (line  6)
* sigtimedwait:                          Signal Manager sigtimedwait - Synchronously Accept a Signal with Timeout.
                                                               (line  6)
* sigwait:                               Signal Manager sigwait - Synchronously Accept a Signal.
                                                               (line  6)
* sigwaitinfo:                           Signal Manager sigwaitinfo - Synchronously Accept a Signal.
                                                               (line  6)
* sleep:                                 Clock Manager sleep - Delay Process Execution.
                                                               (line  6)
* stat:                                  Files and Directories Manager stat - Gets information about a file.
                                                               (line  6)
* strtok_r:                              Language-Specific Services for the C Programming Language Manager strtok_r - Reentrant Extract Token from String.
                                                               (line  6)
* symlink:                               Files and Directories Manager symlink - Creates a symbolic link to a file.
                                                               (line  6)
* sync:                                  Input and Output Primitives Manager sync - Schedule file system updates.
                                                               (line  6)
* sysconf:                               Process Environment Manager sysconf - Get Configurable System Variables.
                                                               (line  6)
* tcdrain:                               Device- and Class- Specific Functions Manager tcdrain - Waits for all output to be transmitted to the terminal..
                                                               (line  6)
* tcflow:                                Device- and Class- Specific Functions Manager tcflow - Suspends/restarts terminal output..
                                                               (line  6)
* tcflush:                               Device- and Class- Specific Functions Manager tcflush - Discards terminal data.
                                                               (line  6)
* tcgetattr:                             Device- and Class- Specific Functions Manager tcgetattr - Gets terminal attributes.
                                                               (line  6)
* tcgetpgrp:                             Device- and Class- Specific Functions Manager tcgetpgrp - Gets foreground process group ID.
                                                               (line  6)
* tcsendbreak:                           Device- and Class- Specific Functions Manager tcsendbreak - Sends a break to a terminal.
                                                               (line  6)
* tcsetattr:                             Device- and Class- Specific Functions Manager tcsetattr - Set terminal attributes.
                                                               (line  6)
* tcsetpgrp:                             Device- and Class- Specific Functions Manager tcsetpgrp - Sets foreground process group ID.
                                                               (line  6)
* telldir:                               Files and Directories Manager telldir - Return current location in directory stream.
                                                               (line  6)
* time:                                  Clock Manager time - Get time in seconds.
                                                               (line  6)
* times:                                 Process Environment Manager times - Get process times.
                                                               (line  6)
* truncate:                              Files and Directories Manager truncate - truncate a file to a specified length.
                                                               (line  6)
* ttyname:                               Process Environment Manager ttyname - Determine Terminal Device Name.
                                                               (line  6)
* ttyname_r:                             Process Environment Manager ttyname_r - Reentrant Determine Terminal Device Name.
                                                               (line  6)
* tzset:                                 Language-Specific Services for the C Programming Language Manager tzset - Initialize Time Conversion Information.
                                                               (line  6)
* umask:                                 Files and Directories Manager umask - Sets a file creation mask..
                                                               (line  6)
* uname:                                 Process Environment Manager uname - Get System Name.
                                                               (line  6)
* unlink:                                Files and Directories Manager unlink - Removes a directory entry.
                                                               (line  6)
* unmount:                               Input and Output Primitives Manager unmount - Unmount file systems.
                                                               (line  6)
* usecs alarm:                           Signal Manager ualarm - Schedule Alarm in Microseconds.
                                                               (line  6)
* usleep:                                Clock Manager usleep - Delay Process Execution in Microseconds.
                                                               (line  6)
* utime:                                 Files and Directories Manager utime - Change access and/or modification times of an inode.
                                                               (line  6)
* wait:                                  Process Creation and Execution Manager wait - Wait for Process Termination.
                                                               (line  6)
* waitpid:                               Process Creation and Execution Manager waitpid - Wait for Process Termination.
                                                               (line  6)
* write:                                 Input and Output Primitives Manager write - Writes to a file.
                                                               (line  6)
* writev:                                Input and Output Primitives Manager writev - Vectored write to a file.
                                                               (line  6)


File: posix_users.info,  Node: Concept Index,  Prev: Command and Variable Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* acquire ownership of file stream:      Language-Specific Services for the C Programming Language Manager flockfile - Acquire Ownership of File Stream.
                                                                (line 6)
* add a signal to a signal set:          Signal Manager sigaddset - Add a Signal to a Signal Set.
                                                                (line 6)
* associate stream with file descriptor: Language-Specific Services for the C Programming Language Manager fdopen - Associate Stream with File Descriptor.
                                                                (line 6)
* asynchronous file synchronization:     Input and Output Primitives Manager aio_fsync - Asynchronous File Synchronization.
                                                                (line 6)
* asynchronous read:                     Input and Output Primitives Manager aio_read - Asynchronous Read.
                                                                (line 6)
* asynchronous write:                    Input and Output Primitives Manager aio_write - Asynchronous Write.
                                                                (line 6)
* broadcast a condition variable:        Condition Variable Manager pthread_cond_broadcast - Broadcast a Condition Variable.
                                                                (line 6)
* cancel asynchronous i/o request:       Input and Output Primitives Manager aio_cancel - Cancel Asynchronous I/O Request.
                                                                (line 6)
* cancel execution of a thread:          Thread Cancellation Manager pthread_cancel - Cancel Execution of a Thread.
                                                                (line 6)
* change access and/or modification times of an inode: Files and Directories Manager utime - Change access and/or modification times of an inode.
                                                                (line 6)
* change memory protection:              Memory Management Manager mprotect - Change Memory Protection.
                                                                (line 6)
* changes file mode.:                    Files and Directories Manager chmod - Changes file mode..
                                                                (line 6)
* changes permissions of a file:         Files and Directories Manager fchmod - Changes permissions of a file.
                                                                (line 6)
* changes the current working directory <1>: Files and Directories Manager fchdir - Changes the current working directory.
                                                                (line 6)
* changes the current working directory: Files and Directories Manager chdir - Changes the current working directory.
                                                                (line 6)
* changes the owner and/or group of a file.: Files and Directories Manager chown - Changes the owner and/or group of a file..
                                                                (line 6)
* check permissions for a file:          Files and Directories Manager access - Check permissions for a file.
                                                                (line 6)
* close a message queue:                 Message Passing Manager mq_close - Close a Message Queue.
                                                                (line 6)
* close a named semaphore:               Semaphore Manager sem_close - Close a named semaphore.
                                                                (line 6)
* closes a file.:                        Input and Output Primitives Manager close - Closes a file.
                                                                (line 6)
* compare thread ids:                    Thread Manager pthread_equal - Compare Thread IDs.
                                                                (line 6)
* create a directory:                    Files and Directories Manager mknod - create a directory.
                                                                (line 6)
* create a new file or rewrite an existing one: Files and Directories Manager creat - Create a new file or rewrite an existing one.
                                                                (line 6)
* create a process:                      Process Creation and Execution Manager fork - Create a Process.
                                                                (line 6)
* create a thread:                       Thread Manager pthread_create - Create a Thread.
                                                                (line 6)
* create an inter:                       Input and Output Primitives Manager pipe - Create an Inter-Process Channel.
                                                                (line 6)
* create cancellation point:             Thread Cancellation Manager pthread_testcancel - Create Cancellation Point.
                                                                (line 6)
* create session and set process group id: Process Environment Manager setsid - Create Session and Set Process Group ID.
                                                                (line 6)
* creates a link to a file:              Files and Directories Manager link - Creates a link to a file.
                                                                (line 6)
* creates a symbolic link to a file:     Files and Directories Manager symlink - Creates a symbolic link to a file.
                                                                (line 6)
* delay process execution <1>:           Clock Manager usleep - Delay Process Execution in Microseconds.
                                                                (line 6)
* delay process execution:               Clock Manager sleep - Delay Process Execution.
                                                                (line 6)
* delay with high resolution:            Clock Manager nanosleep - Delay with High Resolution.
                                                                (line 6)
* delete a directory:                    Files and Directories Manager rmdir - Delete a directory.
                                                                (line 6)
* delete a signal from a signal set:     Signal Manager sigdelset - Delete a Signal from a Signal Set.
                                                                (line 6)
* destroy a condition variable:          Condition Variable Manager pthread_cond_destroy - Destroy a Condition Variable.
                                                                (line 6)
* destroy a condition variable attribute set: Condition Variable Manager pthread_condattr_destroy - Destroy a Condition Variable Attribute Set.
                                                                (line 6)
* destroy a mutex:                       Mutex Manager pthread_mutex_destroy - Destroy a Mutex.
                                                                (line 6)
* destroy a mutex attribute set:         Mutex Manager pthread_mutexattr_destroy - Destroy a Mutex Attribute Set.
                                                                (line 6)
* destroy a thread attribute set:        Thread Manager pthread_attr_destroy - Destroy a Thread Attribute Set.
                                                                (line 6)
* destroy an unnamed semaphore:          Semaphore Manager sem_destroy - Destroy an unnamed semaphore.
                                                                (line 6)
* detach a thread:                       Thread Manager pthread_detach - Detach a Thread.
                                                                (line 6)
* determine if file descriptor is terminal: Process Environment Manager isatty - Determine if File Descriptor is Terminal.
                                                                (line 6)
* determine terminal device name:        Process Environment Manager ttyname - Determine Terminal Device Name.
                                                                (line 6)
* discards terminal data:                Device- and Class- Specific Functions Manager tcflush - Discards terminal data.
                                                                (line 6)
* duplicates an open file descriptor <1>: Input and Output Primitives Manager dup2 - Duplicates an open file descriptor.
                                                                (line 6)
* duplicates an open file descriptor:    Input and Output Primitives Manager dup - Duplicates an open file descriptor.
                                                                (line 6)
* dynamic package initialization:        Thread Manager pthread_once - Dynamic Package Initialization.
                                                                (line 6)
* dynamically set the priority ceiling:  Mutex Manager pthread_mutex_setprioceiling - Dynamically Set the Priority Ceiling.
                                                                (line 6)
* empty a signal set:                    Signal Manager sigemptyset - Empty a Signal Set.
                                                                (line 6)
* ends directory read operation:         Files and Directories Manager closedir - Ends directory read operation.
                                                                (line 6)
* establish cancellation handler:        Thread Cancellation Manager pthread_cleanup_push - Establish Cancellation Handler.
                                                                (line 6)
* examine and change process blocked signals: Signal Manager sigprocmask - Examine and Change Process Blocked Signals.
                                                                (line 6)
* examine and change signal action:      Signal Manager sigaction - Examine and Change Signal Action.
                                                                (line 6)
* examine and change thread blocked signals: Signal Manager pthread_sigmask - Examine and Change Thread Blocked Signals.
                                                                (line 6)
* examine pending signals:               Signal Manager sigpending - Examine Pending Signals.
                                                                (line 6)
* execute a file <1>:                    Process Creation and Execution Manager execvp - Execute a File.
                                                                (line 6)
* execute a file <2>:                    Process Creation and Execution Manager execlp - Execute a File.
                                                                (line 6)
* execute a file <3>:                    Process Creation and Execution Manager execve - Execute a File.
                                                                (line 6)
* execute a file <4>:                    Process Creation and Execution Manager execle - Execute a File.
                                                                (line 6)
* execute a file <5>:                    Process Creation and Execution Manager execv - Execute a File.
                                                                (line 6)
* execute a file:                        Process Creation and Execution Manager execl - Execute a File.
                                                                (line 6)
* fill a signal set:                     Signal Manager sigfillset - Fill a Signal Set.
                                                                (line 6)
* generate terminal pathname:            Process Environment Manager ctermid - Generate Terminal Pathname.
                                                                (line 6)
* get character from stdin without locking: Language-Specific Services for the C Programming Language Manager getchar_unlocked - Get Character from stdin without Locking.
                                                                (line 6)
* get character without locking:         Language-Specific Services for the C Programming Language Manager getc_unlocked - Get Character without Locking.
                                                                (line 6)
* get clock resolution:                  Clock Manager clock_getres - Get Clock Resolution.
                                                                (line 6)
* get configurable system variables:     Process Environment Manager sysconf - Get Configurable System Variables.
                                                                (line 6)
* get detach state:                      Thread Manager pthread_attr_getdetachstate - Get Detach State.
                                                                (line 6)
* get directory entries:                 Files and Directories Manager getdents - Get directory entries.
                                                                (line 6)
* get effective group id:                Process Environment Manager getegid - Get Effective Group ID.
                                                                (line 6)
* get effective user id:                 Process Environment Manager geteuid - Get Effective User ID.
                                                                (line 6)
* get environment variables:             Process Environment Manager getenv - Get Environment Variables.
                                                                (line 6)
* get group file entry for id:           System Databases Manager getgrgid - Get Group File Entry for ID.
                                                                (line 6)
* get group file entry for name:         System Databases Manager getgrnam - Get Group File Entry for Name.
                                                                (line 6)
* get inherit scheduler flag:            Thread Manager pthread_attr_getinheritsched - Get Inherit Scheduler Flag.
                                                                (line 6)
* get maximum priority value:            Scheduler Manager sched_get_priority_max - Get Maximum Priority Value.
                                                                (line 6)
* get message queue attributes:          Message Passing Manager mq_getattr - Get Message Queue Attributes.
                                                                (line 6)
* get minimum priority value:            Scheduler Manager sched_get_priority_min - Get Minimum Priority Value.
                                                                (line 6)
* get parent process id:                 Process Environment Manager getppid - Get Parent Process ID.
                                                                (line 6)
* get password file entry for uid:       System Databases Manager getpwuid - Get Password File Entry for UID.
                                                                (line 6)
* get process group id:                  Process Environment Manager getpgrp - Get Process Group ID.
                                                                (line 6)
* get process id:                        Process Environment Manager getpid - Get Process ID.
                                                                (line 6)
* get process shared attribute:          Condition Variable Manager pthread_condattr_getpshared - Get Process Shared Attribute.
                                                                (line 6)
* get process times:                     Process Environment Manager times - Get process times.
                                                                (line 6)
* get real group id:                     Process Environment Manager getgid - Get Real Group ID.
                                                                (line 6)
* get scheduling parameters:             Thread Manager pthread_attr_getschedparam - Get Scheduling Parameters.
                                                                (line 6)
* get scheduling policy:                 Thread Manager pthread_attr_getschedpolicy - Get Scheduling Policy.
                                                                (line 6)
* get supplementary group ids:           Process Environment Manager getgroups - Get Supplementary Group IDs.
                                                                (line 6)
* get system name:                       Process Environment Manager uname - Get System Name.
                                                                (line 6)
* get the blocking protocol:             Mutex Manager pthread_mutexattr_getprotocol - Get the Blocking Protocol.
                                                                (line 6)
* get the current priority ceiling:      Mutex Manager pthread_mutex_getprioceiling - Get the Current Priority Ceiling.
                                                                (line 6)
* get the priority ceiling:              Mutex Manager pthread_mutexattr_getprioceiling - Get the Priority Ceiling.
                                                                (line 6)
* get the time of day:                   Clock Manager gettimeofday - Get the Time of Day.
                                                                (line 6)
* get the value of a semaphore:          Semaphore Manager sem_getvalue - Get the value of a semaphore.
                                                                (line 6)
* get the visibility:                    Mutex Manager pthread_mutexattr_getpshared - Get the Visibility.
                                                                (line 6)
* get thread id:                         Thread Manager pthread_self - Get Thread ID.
                                                                (line 6)
* get thread scheduling parameters:      Thread Manager pthread_getschedparam - Get Thread Scheduling Parameters.
                                                                (line 6)
* get thread scheduling scope:           Thread Manager pthread_attr_getscope - Get Thread Scheduling Scope.
                                                                (line 6)
* get thread stack address:              Thread Manager pthread_attr_getstackaddr - Get Thread Stack Address.
                                                                (line 6)
* get thread stack size:                 Thread Manager pthread_attr_getstacksize - Get Thread Stack Size.
                                                                (line 6)
* get time in seconds:                   Clock Manager time - Get time in seconds.
                                                                (line 6)
* get timeslicing quantum:               Scheduler Manager sched_rr_get_interval - Get Timeslicing Quantum.
                                                                (line 6)
* get user id:                           Process Environment Manager getuid - Get User ID.
                                                                (line 6)
* get user name:                         Process Environment Manager getlogin - Get User Name.
                                                                (line 6)
* get user name, reentrant:              Process Environment Manager getlogin_r - Reentrant Get User Name.
                                                                (line 6)
* gets configuration values for files <1>: Files and Directories Manager fpathconf - Gets configuration values for files.
                                                                (line 6)
* gets configuration values for files:   Files and Directories Manager pathconf - Gets configuration values for files.
                                                                (line 6)
* gets current working directory:        Files and Directories Manager getcwd - Gets current working directory.
                                                                (line 6)
* gets file status <1>:                  Files and Directories Manager lstat - Gets file status.
                                                                (line 6)
* gets file status:                      Files and Directories Manager fstat - Gets file status.
                                                                (line 6)
* gets foreground process group id:      Device- and Class- Specific Functions Manager tcgetpgrp - Gets foreground process group ID.
                                                                (line 6)
* gets information about a file:         Files and Directories Manager stat - Gets information about a file.
                                                                (line 6)
* gets terminal attributes:              Device- and Class- Specific Functions Manager tcgetattr - Gets terminal attributes.
                                                                (line 6)
* initialize a condition variable:       Condition Variable Manager pthread_cond_init - Initialize a Condition Variable.
                                                                (line 6)
* initialize a condition variable attribute set: Condition Variable Manager pthread_condattr_init - Initialize a Condition Variable Attribute Set.
                                                                (line 6)
* initialize a mutex:                    Mutex Manager pthread_mutex_init - Initialize a Mutex.
                                                                (line 6)
* initialize a mutex attribute set:      Mutex Manager pthread_mutexattr_init - Initialize a Mutex Attribute Set.
                                                                (line 6)
* initialize a thread attribute set:     Thread Manager pthread_attr_init - Initialize a Thread Attribute Set.
                                                                (line 6)
* initialize an unnamed semaphore:       Semaphore Manager sem_init - Initialize an unnamed semaphore.
                                                                (line 6)
* initialize time conversion information: Language-Specific Services for the C Programming Language Manager tzset - Initialize Time Conversion Information.
                                                                (line 6)
* is signal a member of a signal set:    Signal Manager sigismember - Is Signal a Member of a Signal Set.
                                                                (line 6)
* list directed i/o:                     Input and Output Primitives Manager lio_listio - List Directed I/O.
                                                                (line 6)
* lock a mutex:                          Mutex Manager pthread_mutex_lock - Lock a Mutex.
                                                                (line 6)
* lock a mutex with timeout:             Mutex Manager pthread_mutex_timedlock - Lock a Mutex with Timeout.
                                                                (line 6)
* lock a range of the process address space: Memory Management Manager mlock - Lock a Range of the Process Address Space.
                                                                (line 6)
* lock the address space of a process:   Memory Management Manager mlockall - Lock the Address Space of a Process.
                                                                (line 6)
* makes a directory:                     Files and Directories Manager mkdir - Makes a directory.
                                                                (line 6)
* makes a fifo special file:             Files and Directories Manager mkfifo - Makes a FIFO special file.
                                                                (line 6)
* manipulates an open file descriptor:   Input and Output Primitives Manager fcntl - Manipulates an open file descriptor.
                                                                (line 6)
* map process addresses to a memory object: Memory Management Manager mmap - Map Process Addresses to a Memory Object.
                                                                (line 6)
* memory object synchronization:         Memory Management Manager msync - Memory Object Synchronization.
                                                                (line 6)
* microsecond delay process execution:   Clock Manager usleep - Delay Process Execution in Microseconds.
                                                                (line 6)
* mount a file system:                   Input and Output Primitives Manager mount - Mount a file system.
                                                                (line 6)
* non <1>:                               Semaphore Manager sem_trywait - Non-blocking Wait on a Semaphore.
                                                                (line 6)
* non <2>:                               Language-Specific Services for the C Programming Language Manager siglongjmp - Non-Local Jump with Signal Status to a Saved Context.
                                                                (line 6)
* non:                                   Language-Specific Services for the C Programming Language Manager longjmp - Non-Local Jump to a Saved Context.
                                                                (line 6)
* notify process that a message is available: Message Passing Manager mq_notify - Notify Process that a Message is Available.
                                                                (line 6)
* obtain file descriptor number for this file: Language-Specific Services for the C Programming Language Manager fileno - Obtain File Descriptor Number for this File.
                                                                (line 6)
* obtain the name of a symbolic link destination: Files and Directories Manager readlink - Obtain the name of a symbolic link destination.
                                                                (line 6)
* obtain time of day:                    Clock Manager clock_gettime - Obtain Time of Day.
                                                                (line 6)
* open a directory:                      Files and Directories Manager opendir - Open a Directory.
                                                                (line 6)
* open a message queue:                  Message Passing Manager mq_open - Open a Message Queue.
                                                                (line 6)
* open a named semaphore:                Semaphore Manager sem_open - Open a named semaphore.
                                                                (line 6)
* open a shared memory object:           Memory Management Manager shm_open - Open a Shared Memory Object.
                                                                (line 6)
* opens a file:                          Files and Directories Manager open - Opens a file.
                                                                (line 6)
* password file entry for name:          System Databases Manager getpwnam - Password File Entry for Name.
                                                                (line 6)
* poll to acquire ownership of file stream: Language-Specific Services for the C Programming Language Manager ftrylockfile - Poll to Acquire Ownership of File Stream.
                                                                (line 6)
* poll to lock a mutex:                  Mutex Manager pthread_mutex_trylock - Poll to Lock a Mutex.
                                                                (line 6)
* put character to stdin without locking: Language-Specific Services for the C Programming Language Manager putchar_unlocked - Put Character to stdin without Locking.
                                                                (line 6)
* put character without locking:         Language-Specific Services for the C Programming Language Manager putc_unlocked - Put Character without Locking.
                                                                (line 6)
* queue a signal to a process:           Signal Manager sigqueue - Queue a Signal to a Process.
                                                                (line 6)
* reads a directory:                     Files and Directories Manager readdir - Reads a directory.
                                                                (line 6)
* reads from a file:                     Input and Output Primitives Manager read - Reads from a file.
                                                                (line 6)
* reads terminal input baud rate:        Device- and Class- Specific Functions Manager cfgetispeed - Reads terminal input baud rate.
                                                                (line 6)
* reads terminal output baud rate:       Device- and Class- Specific Functions Manager cfgetospeed - Reads terminal output baud rate.
                                                                (line 6)
* receive a message from a message queue: Message Passing Manager mq_receive - Receive a Message from a Message Queue.
                                                                (line 6)
* reentrant determine terminal device name: Process Environment Manager ttyname_r - Reentrant Determine Terminal Device Name.
                                                                (line 6)
* reentrant extract token from string:   Language-Specific Services for the C Programming Language Manager strtok_r - Reentrant Extract Token from String.
                                                                (line 6)
* reentrant get group file entry:        System Databases Manager getgrgid_r - Reentrant Get Group File Entry.
                                                                (line 6)
* reentrant get group file entry for name: System Databases Manager getgrnam_r - Reentrant Get Group File Entry for Name.
                                                                (line 6)
* reentrant get password file entry for name: System Databases Manager getpwnam_r - Reentrant Get Password File Entry for Name.
                                                                (line 6)
* reentrant get password file entry for uid: System Databases Manager getpwuid_r - Reentrant Get Password File Entry for UID.
                                                                (line 6)
* reentrant get user name:               Process Environment Manager getlogin_r - Reentrant Get User Name.
                                                                (line 6)
* reentrant local time conversion:       Language-Specific Services for the C Programming Language Manager localtime_r - Reentrant Local Time Conversion.
                                                                (line 6)
* reentrant random number generation:    Language-Specific Services for the C Programming Language Manager rand_r - Reentrant Random Number Generation.
                                                                (line 6)
* reentrant struct tm to ascii time conversion: Language-Specific Services for the C Programming Language Manager asctime_r - Reentrant struct tm to ASCII Time Conversion.
                                                                (line 6)
* reentrant time_t to ascii time conversion: Language-Specific Services for the C Programming Language Manager ctime_r - Reentrant time_t to ASCII Time Conversion.
                                                                (line 6)
* reentrant utc time conversion:         Language-Specific Services for the C Programming Language Manager gmtime_r - Reentrant UTC Time Conversion.
                                                                (line 6)
* register fork handlers:                Process Creation and Execution Manager pthread_atfork - Register Fork Handlers.
                                                                (line 6)
* release ownership of file stream:      Language-Specific Services for the C Programming Language Manager funlockfile - Release Ownership of File Stream.
                                                                (line 6)
* remove a message queue:                Message Passing Manager mq_unlink - Remove a Message Queue.
                                                                (line 6)
* remove a shared memory object:         Memory Management Manager shm_unlink - Remove a Shared Memory Object.
                                                                (line 6)
* remove cancellation handler:           Thread Cancellation Manager pthread_cleanup_pop - Remove Cancellation Handler.
                                                                (line 6)
* removes a directory entry:             Files and Directories Manager unlink - Removes a directory entry.
                                                                (line 6)
* renames a file:                        Files and Directories Manager rename - Renames a file.
                                                                (line 6)
* reposition read/write file offset:     Input and Output Primitives Manager lseek - Reposition read/write file offset.
                                                                (line 6)
* resets the readdir() pointer:          Files and Directories Manager rewinddir - Resets the readdir() pointer.
                                                                (line 6)
* retrieve error status of asynchronous i/o operation: Input and Output Primitives Manager aio_error - Retrieve Error Status of Asynchronous I/O Operation.
                                                                (line 6)
* retrieve return status asynchronous i/o operation: Input and Output Primitives Manager aio_return - Retrieve Return Status Asynchronous I/O Operation.
                                                                (line 6)
* return current location in directory stream: Files and Directories Manager telldir - Return current location in directory stream.
                                                                (line 6)
* save context for non:                  Language-Specific Services for the C Programming Language Manager setjmp - Save Context for Non-Local Goto.
                                                                (line 6)
* save context with signal status for non: Language-Specific Services for the C Programming Language Manager sigsetjmp - Save Context with Signal Status for Non-Local Goto.
                                                                (line 6)
* scan a directory for matching entries: Files and Directories Manager scandir - Scan a directory for matching entries.
                                                                (line 6)
* schedule alarm:                        Signal Manager alarm - Schedule Alarm.
                                                                (line 6)
* schedule alarm in microseonds:         Signal Manager ualarm - Schedule Alarm in Microseconds.
                                                                (line 6)
* send a message to a message queue:     Message Passing Manager mq_send - Send a Message to a Message Queue.
                                                                (line 6)
* send a signal to a process:            Signal Manager kill - Send a Signal to a Process.
                                                                (line 6)
* send a signal to a thread:             Signal Manager pthread_kill - Send a Signal to a Thread.
                                                                (line 6)
* sends a break to a terminal:           Device- and Class- Specific Functions Manager tcsendbreak - Sends a break to a terminal.
                                                                (line 6)
* set cancelability state:               Thread Cancellation Manager pthread_setcancelstate - Set Cancelability State.
                                                                (line 6)
* set cancelability type:                Thread Cancellation Manager pthread_setcanceltype - Set Cancelability Type.
                                                                (line 6)
* set detach state:                      Thread Manager pthread_attr_setdetachstate - Set Detach State.
                                                                (line 6)
* set environment variables:             Process Environment Manager setenv - Set Environment Variables.
                                                                (line 6)
* set group id:                          Process Environment Manager setgid - Set Group ID.
                                                                (line 6)
* set inherit scheduler flag:            Thread Manager pthread_attr_setinheritsched - Set Inherit Scheduler Flag.
                                                                (line 6)
* set message queue attributes:          Message Passing Manager mq_setattr - Set Message Queue Attributes.
                                                                (line 6)
* set process group id for job control:  Process Environment Manager setpgid - Set Process Group ID for Job Control.
                                                                (line 6)
* set process shared attribute:          Condition Variable Manager pthread_condattr_setpshared - Set Process Shared Attribute.
                                                                (line 6)
* set scheduling parameters:             Thread Manager pthread_attr_setschedparam - Set Scheduling Parameters.
                                                                (line 6)
* set scheduling policy:                 Thread Manager pthread_attr_setschedpolicy - Set Scheduling Policy.
                                                                (line 6)
* set terminal attributes:               Device- and Class- Specific Functions Manager tcsetattr - Set terminal attributes.
                                                                (line 6)
* set the blocking protocol:             Mutex Manager pthread_mutexattr_setprotocol - Set the Blocking Protocol.
                                                                (line 6)
* set the current locale:                Language-Specific Services for the C Programming Language Manager setlocale - Set the Current Locale.
                                                                (line 6)
* set the priority ceiling:              Mutex Manager pthread_mutexattr_setprioceiling - Set the Priority Ceiling.
                                                                (line 6)
* set the visibility:                    Mutex Manager pthread_mutexattr_setpshared - Set the Visibility.
                                                                (line 6)
* set thread scheduling parameters:      Thread Manager pthread_setschedparam - Set Thread Scheduling Parameters.
                                                                (line 6)
* set thread scheduling scope:           Thread Manager pthread_attr_setscope - Set Thread Scheduling Scope.
                                                                (line 6)
* set thread stack address:              Thread Manager pthread_attr_setstackaddr - Set Thread Stack Address.
                                                                (line 6)
* set thread stack size:                 Thread Manager pthread_attr_setstacksize - Set Thread Stack Size.
                                                                (line 6)
* set time of day:                       Clock Manager clock_settime - Set Time of Day.
                                                                (line 6)
* set user id:                           Process Environment Manager setuid - Set User ID.
                                                                (line 6)
* sets a file creation mask.:            Files and Directories Manager umask - Sets a file creation mask..
                                                                (line 6)
* sets foreground process group id:      Device- and Class- Specific Functions Manager tcsetpgrp - Sets foreground process group ID.
                                                                (line 6)
* sets terminal input baud rate:         Device- and Class- Specific Functions Manager cfsetispeed - Sets terminal input baud rate.
                                                                (line 6)
* sets terminal output baud rate:        Device- and Class- Specific Functions Manager cfsetospeed - Sets terminal output baud rate.
                                                                (line 6)
* signal a condition variable:           Condition Variable Manager pthread_cond_signal - Signal a Condition Variable.
                                                                (line 6)
* suspend process execution:             Signal Manager pause - Suspend Process Execution.
                                                                (line 6)
* suspends/restarts terminal output.:    Device- and Class- Specific Functions Manager tcflow - Suspends/restarts terminal output..
                                                                (line 6)
* synchronize file complete in:          Input and Output Primitives Manager fsync - Synchronize file complete in-core state with that on disk.
                                                                (line 6)
* synchronize file in:                   Input and Output Primitives Manager fdatasync - Synchronize file in-core data with that on disk.
                                                                (line 6)
* synchronize file systems:              Input and Output Primitives Manager sync - Schedule file system updates.
                                                                (line 6)
* synchronously accept a signal <1>:     Signal Manager sigwaitinfo - Synchronously Accept a Signal.
                                                                (line 6)
* synchronously accept a signal:         Signal Manager sigwait - Synchronously Accept a Signal.
                                                                (line 6)
* synchronously accept a signal with timeout: Signal Manager sigtimedwait - Synchronously Accept a Signal with Timeout.
                                                                (line 6)
* terminate a process:                   Process Creation and Execution Manager _exit - Terminate a Process.
                                                                (line 6)
* terminate the current thread:          Thread Manager pthread_exit - Terminate the Current Thread.
                                                                (line 6)
* truncate a file to a specified length <1>: Files and Directories Manager truncate - truncate a file to a specified length.
                                                                (line 6)
* truncate a file to a specified length: Files and Directories Manager ftruncate - truncate a file to a specified length.
                                                                (line 6)
* unlink a semaphore:                    Semaphore Manager sem_unlink - Unlink a semaphore.
                                                                (line 6)
* unlock a mutex:                        Mutex Manager pthread_mutex_unlock - Unlock a Mutex.
                                                                (line 6)
* unlock a range of the process address space: Memory Management Manager munlock - Unlock a Range of the Process Address Space.
                                                                (line 6)
* unlock a semaphore:                    Semaphore Manager sem_post - Unlock a Semaphore.
                                                                (line 6)
* unlock the address space of a process: Memory Management Manager munlockall - Unlock the Address Space of a Process.
                                                                (line 6)
* unmap previously mapped addresses:     Memory Management Manager munmap - Unmap Previously Mapped Addresses.
                                                                (line 6)
* unmount file systems:                  Input and Output Primitives Manager unmount - Unmount file systems.
                                                                (line 6)
* usecs delay process execution:         Clock Manager usleep - Delay Process Execution in Microseconds.
                                                                (line 6)
* vectored read from a file:             Input and Output Primitives Manager readv - Vectored read from a file.
                                                                (line 6)
* vectored write to a file:              Input and Output Primitives Manager writev - Vectored write to a file.
                                                                (line 6)
* wait for a signal:                     Signal Manager sigsuspend - Wait for a Signal.
                                                                (line 6)
* wait for asynchronous i/o request:     Input and Output Primitives Manager aio_suspend - Wait for Asynchronous I/O Request.
                                                                (line 6)
* wait for process termination <1>:      Process Creation and Execution Manager waitpid - Wait for Process Termination.
                                                                (line 6)
* wait for process termination:          Process Creation and Execution Manager wait - Wait for Process Termination.
                                                                (line 6)
* wait for thread termination:           Thread Manager pthread_join - Wait for Thread Termination.
                                                                (line 6)
* wait on a condition variable:          Condition Variable Manager pthread_cond_wait - Wait on a Condition Variable.
                                                                (line 6)
* wait on a semaphore:                   Semaphore Manager sem_wait - Wait on a Semaphore.
                                                                (line 6)
* wait on a semaphore for a specified time: Semaphore Manager sem_timedwait - Wait on a Semaphore for a Specified Time.
                                                                (line 6)
* wait with timeout a condition variable: Condition Variable Manager pthread_cond_timedwait - Wait with Timeout a Condition Variable.
                                                                (line 6)
* waits for all output to be transmitted to the terminal.: Device- and Class- Specific Functions Manager tcdrain - Waits for all output to be transmitted to the terminal..
                                                                (line 6)
* writes to a file:                      Input and Output Primitives Manager write - Writes to a file.
                                                                (line 6)
* yield the processor:                   Scheduler Manager sched_yield - Yield the Processor.
                                                                (line 6)


