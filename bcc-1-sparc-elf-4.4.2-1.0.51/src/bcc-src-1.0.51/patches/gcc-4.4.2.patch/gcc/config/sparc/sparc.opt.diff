--- gcc-4.4.2.old/./gcc/config/sparc/sparc.opt	2020-02-28 17:30:30.954423795 +0100
+++ gcc-4.4.2.new/./gcc/config/sparc/sparc.opt	2017-11-16 16:06:30.489833000 +0100
@@ -22,6 +22,10 @@
 Target Report Mask(FPU)
 Use hardware FP
 
+mv8
+Target Report Mask(V8)
+Use hardware smul/sdiv
+
 mhard-float
 Target RejectNegative Mask(FPU) MaskExists
 Use hardware FP
@@ -102,6 +106,10 @@
 Target Report RejectNegative Var(sparc_std_struct_return)
 Enable strict 32-bit psABI struct return checking.
 
+mfix-ut699
+Target Report RejectNegative Var(sparc_fix_ut699)
+Enable workaround for single erratum of UT699 processor
+
 Mask(LITTLE_ENDIAN)
 ;; Generate code for little-endian
 
@@ -114,7 +122,7 @@
 Mask(SPARCLET)
 ;; Generate code for SPARClet
 
-Mask(V8)
+;;Mask(V8) 
 ;; Generate code for SPARC-V8
 
 Mask(V9)
@@ -123,3 +131,76 @@
 Mask(DEPRECATED_V8_INSNS)
 ;; Generate code that uses the V8 instructions deprecated
 ;; in the V9 architecture.
+
+mfix-b2bst
+Target Report RejectNegative Var(sparc_fix_b2bst)
+Enable workarounds for LEON3FT store-store errata
+
+mfix-gr712rc
+Target Report RejectNegative Var(sparc_fix_gr712rc)
+Enable workarounds for GR712RC errata
+
+mfix-ut700
+Target Report RejectNegative Var(sparc_fix_ut700)
+Enable workarounds for UT700 errata
+
+mfix-tn0013
+Target Report RejectNegative Var(sparc_fix_tn0013)
+Enable workarounds for TN-0013 errata
+
+mstore-after-divsqrt
+Target Report RejectNegative Mask(STORE_AFTER_DIVSQRT)
+Emit a store after fdivs/fsqrts/fdivd/fsqrtd
+
+mno-fsmuld
+Target Report RejectNegative Mask(NO_FSMULD)
+Avoid generation of fsmuld
+
+mno-sf-divsqrt
+Target Report RejectNegative Mask(NO_SF_DIVSQRT)
+Avoid generation of fdivs/fsqrts, use fdivd/fsqrtd instead
+
+mdebug-patch-divsqrt
+Target Report RejectNegative Var(debug_patch_divsqrt)
+Print debug output for fpu fixes
+
+mfpstore-errata
+Target Report RejectNegative Var(fpstore_errata)
+Enable workaround for FP-store errata for example present
+in SCOC and UT699. The machine description is modified in
+such a way that first/last single FP instruction
+(identified by the errata) can never happen in call, ret,
+jmp and call_sibling delay slots. Branch delay-slots are
+however allowed, but can be disabled to help with
+diagnostics using the -mfpstore-branch-slots switch.
+In the late split5 pass a NOP instruction is inserted
+between the first two first instructions of the errata
+sequence if such a potential bad sequence is found.
+The NOP insertion can be avoided if a matching FP store
+is not found within the following four instructions. In
+order to simplify the fpstore search alogorithm when a
+instruction with a delay-slot is encountered within the
+following three first instructions the FP store search is
+aborted and NOP is inserted. The FP store search can be
+disabled by the mfpstore-deep-scan flag for debugging
+purposes.
+This switch is default on -mtune=ut699.
+
+mfpstore-branch-slots
+Target Report RejectNegative Var(fpstore_branch_slots)
+Disable Single FPOPs and Single STF/LDF (first and last
+instruction matching errata sequence) in branch dela
+slots. Affects both conditional and unconditional branches
+but other delay slots such as calls/rets or jumps. This is
+switch is for debugging the fpstore errata. It reduces
+the number of cases in the machine description late
+processing stage.
+
+mfpstore-deep-scan
+Target Report RejectNegative Var(fpstore_deep_scan)
+After the first two instructions match the FP store errata
+pattern, the fpstore work around searches for an ending
+matching FP single store. This flag disables the search
+for the ending FP store, disabling this part of the errata
+workaround is only for debugging the -mfpstore-errata
+switch.
