--- gcc-4.4.2.old/./libstdc++-v3/libsupc++/vterminate.cc	2020-02-28 17:30:30.824425325 +0100
+++ gcc-4.4.2.new/./libstdc++-v3/libsupc++/vterminate.cc	2009-10-19 13:56:36.786140000 +0200
@@ -41,56 +41,56 @@
   // stderr.
   void __verbose_terminate_handler()
   {
-    static bool terminating;
-    if (terminating)
-      {
-	fputs("terminate called recursively\n", stderr);
-	abort ();
-      }
-    terminating = true;
-
-    // Make sure there was an exception; terminate is also called for an
-    // attempt to rethrow when there is no suitable exception.
-    type_info *t = __cxa_current_exception_type();
-    if (t)
-      {
-	// Note that "name" is the mangled name.
-	char const *name = t->name();
-	{
-	  int status = -1;
-	  char *dem = 0;
+//     static bool terminating;
+//     if (terminating)
+//       {
+// 	fputs("terminate called recursively\n", stderr);
+// 	abort ();
+//       }
+//     terminating = true;
+
+//     // Make sure there was an exception; terminate is also called for an
+//     // attempt to rethrow when there is no suitable exception.
+//     type_info *t = __cxa_current_exception_type();
+//     if (t)
+//       {
+// 	// Note that "name" is the mangled name.
+// 	char const *name = t->name();
+// 	{
+// 	  int status = -1;
+// 	  char *dem = 0;
 	  
-	  dem = __cxa_demangle(name, 0, 0, &status);
+// 	  dem = __cxa_demangle(name, 0, 0, &status);
 
-	  fputs("terminate called after throwing an instance of '", stderr);
-	  if (status == 0)
-	    fputs(dem, stderr);
-	  else
-	    fputs(name, stderr);
-	  fputs("'\n", stderr);
-
-	  if (status == 0)
-	    free(dem);
-	}
-
-	// If the exception is derived from std::exception, we can
-	// give more information.
-	try { __throw_exception_again; }
-#ifdef __EXCEPTIONS
-	catch (exception &exc)
-	  {
-	    char const *w = exc.what();
-	    fputs("  what():  ", stderr);
-	    fputs(w, stderr);
-	    fputs("\n", stderr);
-          }
-#endif
-	catch (...) { }
-      }
-    else
-      fputs("terminate called without an active exception\n", stderr);
+// 	  fputs("terminate called after throwing an instance of '", stderr);
+// 	  if (status == 0)
+// 	    fputs(dem, stderr);
+// 	  else
+// 	    fputs(name, stderr);
+// 	  fputs("'\n", stderr);
+
+// 	  if (status == 0)
+// 	    free(dem);
+// 	}
+
+// 	// If the exception is derived from std::exception, we can
+// 	// give more information.
+// 	try { __throw_exception_again; }
+// #ifdef __EXCEPTIONS
+// 	catch (exception &exc)
+// 	  {
+// 	    char const *w = exc.what();
+// 	    fputs("  what():  ", stderr);
+// 	    fputs(w, stderr);
+// 	    fputs("\n", stderr);
+//           }
+// #endif
+// 	catch (...) { }
+//       }
+//     else
+//       fputs("terminate called without an active exception\n", stderr);
     
-    abort();
+//     abort();
   }
 
 _GLIBCXX_END_NAMESPACE
